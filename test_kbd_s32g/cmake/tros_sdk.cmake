# TROS SDK CMake文件
# 若在Linux环境下编译J3、J5、S32G、X9U、TDA4等平台上的应用，则需要设置CMake变量“SOC”变量
# SOC变量可选值：x86_64、j3、j5、s32g、x9u、tda4

# Define the required CMake-version
cmake_minimum_required(VERSION 3.15)

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# -fPIC, platform independent
set(CMAKE_POSITION_INDEPENDENT_CODE ON)

# Load and run external cmake codes using ccache
find_program(CCACHE_PROGRAM ccache)

if(CCACHE_PROGRAM)
    set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE "${CCACHE_PROGRAM}")
endif()

# Set Warning-Options
if(MSVC)
    # add_compile_options(/W4)
    add_compile_options(/MP)
    add_compile_options(-bigobj)
else() # gcc and clang
    # add_compile_options(-Wall -Wextra -Werror -Wno-unused-parameter)
endif()

# Set Compiling-Options
if(MSVC)
    add_compile_options($<$<CONFIG:Release>:/O2>)
    add_compile_options($<$<CONFIG:Debug>:/Od>)
else()
    add_compile_options($<$<CONFIG:Release>:-O3>)
    add_compile_options($<$<CONFIG:Debug>:-O0>)
    add_compile_options($<$<CONFIG:Debug>:-ggdb>)
endif()

# Set Link-Options
if(MSVC)
    add_compile_options($<$<CONFIG:Release>:/MD>)
    add_compile_options($<$<CONFIG:Debug>:/MDd>)
endif()

# Set directory layout and naming rule
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
set(CMAKE_DEBUG_POSTFIX d)
message("CMAKE_BINARY_DIR = ${CMAKE_BINARY_DIR}")

if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
    set(CMAKE_INSTALL_PREFIX ${CMAKE_SOURCE_DIR}/output/${CMAKE_PROJECT_NAME} CACHE PATH "The install prefix" FORCE)
endif()

message("CMAKE_INSTALL_PREFIX = ${CMAKE_INSTALL_PREFIX}")
set(output_dir ${CMAKE_INSTALL_PREFIX})

# RPATH : https://gitlab.kitware.com/cmake/community/-/wikis/doc/cmake/RPATH-handling
set(CMAKE_SKIP_BUILD_RPATH FALSE)
set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)
set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")
set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)

# list(FIND CMAKE_PLATFORM_IMPLICIT_LINK_DIRECTORIES "${CMAKE_INSTALL_PREFIX}/lib" isSystemDir)
if("${isSystemDir}" STREQUAL "-1")
    set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")
endif("${isSystemDir}" STREQUAL "-1")

# Add macro definition for TROS.A
if(MSVC)
    add_definitions(-DWIN)
elseif(APPLE)
    # specify the minimum version of the target platform(e.g. macOS or iOS) on which the target binaries are to be deployed
    set(CMAKE_OSX_DEPLOYMENT_TARGET "11.0")
    add_definitions(-DMAC)
elseif(UNIX)
    add_definitions(-DUNIX)
else()
endif()

# Set include and link path for TROS.A
if(MSVC)
    message("Build windows application")
elseif(APPLE)
    message("Build mac application")
    include_directories($ENV{TROS_MAC_DEV_INCLUDE_DIR}/tros/)
    include_directories($ENV{TROS_MAC_DEV_INCLUDE_DIR}/third_party/)
    include_directories($ENV{TROS_MAC_DEV_INCLUDE_DIR}/bsp/)
    include_directories($ENV{TROS_MAC_DEV_INCLUDE_DIR}/auto/)
    include_directories($ENV{TROS_MAC_DEV_INCLUDE_DIR}/dnn/)
    link_directories($ENV{TROS_MAC_DEV_LIB_DIR}/tros/)
    link_directories($ENV{TROS_MAC_DEV_LIB_DIR}/third_party/)
    link_directories($ENV{TROS_MAC_DEV_LIB_DIR}/bsp/)
    link_directories($ENV{TROS_MAC_DEV_LIB_DIR}/auto/)
    link_directories($ENV{TROS_MAC_DEV_LIB_DIR}/dnn/)
else()
    if(${SOC} STREQUAL "x86_64")
        message("Build linux x86_64 application")
        include_directories($ENV{TROS_LINUX_X64_DEV_INCLUDE_DIR}/tros/)
        include_directories($ENV{TROS_LINUX_X64_DEV_INCLUDE_DIR}/third_party/)
        include_directories($ENV{TROS_LINUX_X64_DEV_INCLUDE_DIR}/bsp/)
        include_directories($ENV{TROS_LINUX_X64_DEV_INCLUDE_DIR}/auto/)
        include_directories($ENV{TROS_LINUX_X64_DEV_INCLUDE_DIR}/dnn/)
        link_directories($ENV{TROS_LINUX_X64_DEV_LIB_DIR}/tros/)
        link_directories($ENV{TROS_LINUX_X64_DEV_LIB_DIR}/third_party/)
        link_directories($ENV{TROS_LINUX_X64_DEV_LIB_DIR}/bsp/)
        link_directories($ENV{TROS_LINUX_X64_DEV_LIB_DIR}/auto/)
        link_directories($ENV{TROS_LINUX_X64_DEV_LIB_DIR}/dnn/)
    elseif(${SOC} STREQUAL "j5")
        message("Build j5 application")
        set(CMAKE_CXX_COMPILER /opt/aarch64/gcc9.3/bin/aarch64-linux-gnu-g++)
        include_directories($ENV{TROS_J5_DEV_INCLUDE_DIR}/tros/)
        include_directories($ENV{TROS_J5_DEV_INCLUDE_DIR}/third_party/)
        include_directories($ENV{TROS_J5_DEV_INCLUDE_DIR}/bsp/)
        include_directories($ENV{TROS_J5_DEV_INCLUDE_DIR}/auto/)
        include_directories($ENV{TROS_J5_DEV_INCLUDE_DIR}/dnn/)
        link_directories($ENV{TROS_J5_DEV_LIB_DIR}/tros/)
        link_directories($ENV{TROS_J5_DEV_LIB_DIR}/third_party/)
        link_directories($ENV{TROS_J5_DEV_LIB_DIR}/bsp/)
        link_directories($ENV{TROS_J5_DEV_LIB_DIR}/auto/)
        link_directories($ENV{TROS_J5_DEV_LIB_DIR}/dnn/)
    elseif(${SOC} STREQUAL "j3")
        message("Build j3 application")
        set(CMAKE_CXX_COMPILER /opt/aarch64/gcc6.5/bin/aarch64-linux-gnu-g++)
        include_directories($ENV{TROS_J3_DEV_INCLUDE_DIR}/tros/)
        include_directories($ENV{TROS_J3_DEV_INCLUDE_DIR}/third_party/)
        include_directories($ENV{TROS_J3_DEV_INCLUDE_DIR}/bsp/)
        include_directories($ENV{TROS_J3_DEV_INCLUDE_DIR}/auto/)
        include_directories($ENV{TROS_J3_DEV_INCLUDE_DIR}/dnn/)
        link_directories($ENV{TROS_J3_DEV_LIB_DIR}/tros/)
        link_directories($ENV{TROS_J3_DEV_LIB_DIR}/third_party/)
        link_directories($ENV{TROS_J3_DEV_LIB_DIR}/bsp/)
        link_directories($ENV{TROS_J3_DEV_LIB_DIR}/auto/)
        link_directories($ENV{TROS_J3_DEV_LIB_DIR}/dnn/)
    elseif(${SOC} STREQUAL "s32g")
        message("Build s32g application")
        set(CMAKE_CXX_COMPILER /opt/fsl-auto/32.0/sysroots/x86_64-fslbsp-linux/usr/bin/aarch64-fsl-linux/aarch64-fsl-linux-g++)
        set(CMAKE_SYSROOT /opt/fsl-auto/32.0/sysroots/cortexa53-crypto-fsl-linux)
        set(CMAKE_CXX_FLAGS "-mcpu=cortex-a53 -march=armv8-a+crc+crypto")
        include_directories($ENV{TROS_S32G_DEV_INCLUDE_DIR}/tros/)
        include_directories($ENV{TROS_S32G_DEV_INCLUDE_DIR}/third_party/)
        include_directories($ENV{TROS_S32G_DEV_INCLUDE_DIR}/bsp/)
        include_directories($ENV{TROS_S32G_DEV_INCLUDE_DIR}/auto/)
        include_directories($ENV{TROS_S32G_DEV_INCLUDE_DIR}/dnn/)
        link_directories($ENV{TROS_S32G_DEV_LIB_DIR}/tros/)
        link_directories($ENV{TROS_S32G_DEV_LIB_DIR}/third_party/)
        link_directories($ENV{TROS_S32G_DEV_LIB_DIR}/bsp/)
        link_directories($ENV{TROS_S32G_DEV_LIB_DIR}/auto/)
    elseif(${SOC} STREQUAL "x9u")
        message("Build x9u application")
        set(CMAKE_CXX_COMPILER /opt/minimal-rootfs/2.5.3/sysroots/x86_64-sdrvsdk-linux/usr/bin/aarch64-sdrv-linux/aarch64-sdrv-linux-g++)
        set(CMAKE_SYSROOT /opt/minimal-rootfs/2.5.3/sysroots/aarch64-sdrv-linux)
        set(CMAKE_CXX_FLAGS "-march=armv8-a -mtune=cortex-a57.cortex-a53")
        include_directories($ENV{TROS_X9U_DEV_INCLUDE_DIR}/tros/)
        include_directories(SYSTEM $ENV{TROS_X9U_DEV_INCLUDE_DIR}/third_party/)
        include_directories($ENV{TROS_X9U_DEV_INCLUDE_DIR}/auto/)
        include_directories($ENV{TROS_X9U_DEV_INCLUDE_DIR}/dnn/)
        link_directories($ENV{TROS_X9U_DEV_LIB_DIR}/tros/)
        link_directories($ENV{TROS_X9U_DEV_LIB_DIR}/third_party/)
        link_directories($ENV{TROS_X9U_DEV_LIB_DIR}/auto/)
        link_directories($ENV{TROS_X9U_DEV_LIB_DIR}/dnn/)
    elseif(${SOC} STREQUAL "tda4")
        message("Build tda4 application")
    else()
        message("Do not support SOC=${SOC}")
    endif()
endif()

# Set link Variable “SYS_LIB” for TROS.A
if(UNIX)
    if(${CMAKE_SYSTEM_NAME} STREQUAL "Android")
        set(SYS_LIB dl)
    else()
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread")
        set(SYS_LIB dl pthread)
    endif()

    if(S32G)
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread")
        set(SYS_LIB dl pthread m z)
    endif()
endif()
