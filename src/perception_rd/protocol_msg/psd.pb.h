// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: psd.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_psd_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_psd_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_psd_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_psd_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_psd_2eproto;
namespace psd {
class Image;
struct ImageDefaultTypeInternal;
extern ImageDefaultTypeInternal _Image_default_instance_;
class SApaPSInfo;
struct SApaPSInfoDefaultTypeInternal;
extern SApaPSInfoDefaultTypeInternal _SApaPSInfo_default_instance_;
class SApaPSRect;
struct SApaPSRectDefaultTypeInternal;
extern SApaPSRectDefaultTypeInternal _SApaPSRect_default_instance_;
class SApaPoint_I;
struct SApaPoint_IDefaultTypeInternal;
extern SApaPoint_IDefaultTypeInternal _SApaPoint_I_default_instance_;
}  // namespace psd
PROTOBUF_NAMESPACE_OPEN
template<> ::psd::Image* Arena::CreateMaybeMessage<::psd::Image>(Arena*);
template<> ::psd::SApaPSInfo* Arena::CreateMaybeMessage<::psd::SApaPSInfo>(Arena*);
template<> ::psd::SApaPSRect* Arena::CreateMaybeMessage<::psd::SApaPSRect>(Arena*);
template<> ::psd::SApaPoint_I* Arena::CreateMaybeMessage<::psd::SApaPoint_I>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace psd {

enum Pstype : int {
  PARALLEL_PARKING = 0,
  VERTICAL_PARKING = 1,
  DIAGONAL_PARKING_1 = 2,
  Pstype_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Pstype_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Pstype_IsValid(int value);
constexpr Pstype Pstype_MIN = PARALLEL_PARKING;
constexpr Pstype Pstype_MAX = DIAGONAL_PARKING_1;
constexpr int Pstype_ARRAYSIZE = Pstype_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Pstype_descriptor();
template<typename T>
inline const std::string& Pstype_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Pstype>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Pstype_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Pstype_descriptor(), enum_t_value);
}
inline bool Pstype_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Pstype* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Pstype>(
    Pstype_descriptor(), name, value);
}
// ===================================================================

class SApaPoint_I final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:psd.SApaPoint_I) */ {
 public:
  inline SApaPoint_I() : SApaPoint_I(nullptr) {}
  ~SApaPoint_I() override;
  explicit constexpr SApaPoint_I(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SApaPoint_I(const SApaPoint_I& from);
  SApaPoint_I(SApaPoint_I&& from) noexcept
    : SApaPoint_I() {
    *this = ::std::move(from);
  }

  inline SApaPoint_I& operator=(const SApaPoint_I& from) {
    CopyFrom(from);
    return *this;
  }
  inline SApaPoint_I& operator=(SApaPoint_I&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SApaPoint_I& default_instance() {
    return *internal_default_instance();
  }
  static inline const SApaPoint_I* internal_default_instance() {
    return reinterpret_cast<const SApaPoint_I*>(
               &_SApaPoint_I_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SApaPoint_I& a, SApaPoint_I& b) {
    a.Swap(&b);
  }
  inline void Swap(SApaPoint_I* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SApaPoint_I* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SApaPoint_I* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SApaPoint_I>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SApaPoint_I& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SApaPoint_I& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SApaPoint_I* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "psd.SApaPoint_I";
  }
  protected:
  explicit SApaPoint_I(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // optional int32 x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // optional int32 y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:psd.SApaPoint_I)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t x_;
  int32_t y_;
  friend struct ::TableStruct_psd_2eproto;
};
// -------------------------------------------------------------------

class SApaPSRect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:psd.SApaPSRect) */ {
 public:
  inline SApaPSRect() : SApaPSRect(nullptr) {}
  ~SApaPSRect() override;
  explicit constexpr SApaPSRect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SApaPSRect(const SApaPSRect& from);
  SApaPSRect(SApaPSRect&& from) noexcept
    : SApaPSRect() {
    *this = ::std::move(from);
  }

  inline SApaPSRect& operator=(const SApaPSRect& from) {
    CopyFrom(from);
    return *this;
  }
  inline SApaPSRect& operator=(SApaPSRect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SApaPSRect& default_instance() {
    return *internal_default_instance();
  }
  static inline const SApaPSRect* internal_default_instance() {
    return reinterpret_cast<const SApaPSRect*>(
               &_SApaPSRect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SApaPSRect& a, SApaPSRect& b) {
    a.Swap(&b);
  }
  inline void Swap(SApaPSRect* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SApaPSRect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SApaPSRect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SApaPSRect>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SApaPSRect& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SApaPSRect& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SApaPSRect* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "psd.SApaPSRect";
  }
  protected:
  explicit SApaPSRect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPtFieldNumber = 1,
    kPstypeFieldNumber = 2,
    kLabelFieldNumber = 3,
    kISlotTypeFieldNumber = 4,
    kISceneTypeFieldNumber = 5,
  };
  // repeated .psd.SApaPoint_I pt = 1;
  int pt_size() const;
  private:
  int _internal_pt_size() const;
  public:
  void clear_pt();
  ::psd::SApaPoint_I* mutable_pt(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::psd::SApaPoint_I >*
      mutable_pt();
  private:
  const ::psd::SApaPoint_I& _internal_pt(int index) const;
  ::psd::SApaPoint_I* _internal_add_pt();
  public:
  const ::psd::SApaPoint_I& pt(int index) const;
  ::psd::SApaPoint_I* add_pt();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::psd::SApaPoint_I >&
      pt() const;

  // optional .psd.Pstype pstype = 2;
  bool has_pstype() const;
  private:
  bool _internal_has_pstype() const;
  public:
  void clear_pstype();
  ::psd::Pstype pstype() const;
  void set_pstype(::psd::Pstype value);
  private:
  ::psd::Pstype _internal_pstype() const;
  void _internal_set_pstype(::psd::Pstype value);
  public:

  // optional int32 label = 3;
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  int32_t label() const;
  void set_label(int32_t value);
  private:
  int32_t _internal_label() const;
  void _internal_set_label(int32_t value);
  public:

  // optional int32 iSlotType = 4;
  bool has_islottype() const;
  private:
  bool _internal_has_islottype() const;
  public:
  void clear_islottype();
  int32_t islottype() const;
  void set_islottype(int32_t value);
  private:
  int32_t _internal_islottype() const;
  void _internal_set_islottype(int32_t value);
  public:

  // optional int32 iSceneType = 5;
  bool has_iscenetype() const;
  private:
  bool _internal_has_iscenetype() const;
  public:
  void clear_iscenetype();
  int32_t iscenetype() const;
  void set_iscenetype(int32_t value);
  private:
  int32_t _internal_iscenetype() const;
  void _internal_set_iscenetype(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:psd.SApaPSRect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::psd::SApaPoint_I > pt_;
  int pstype_;
  int32_t label_;
  int32_t islottype_;
  int32_t iscenetype_;
  friend struct ::TableStruct_psd_2eproto;
};
// -------------------------------------------------------------------

class Image final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:psd.Image) */ {
 public:
  inline Image() : Image(nullptr) {}
  ~Image() override;
  explicit constexpr Image(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Image(const Image& from);
  Image(Image&& from) noexcept
    : Image() {
    *this = ::std::move(from);
  }

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }
  inline Image& operator=(Image&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Image& default_instance() {
    return *internal_default_instance();
  }
  static inline const Image* internal_default_instance() {
    return reinterpret_cast<const Image*>(
               &_Image_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Image& a, Image& b) {
    a.Swap(&b);
  }
  inline void Swap(Image* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Image* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Image* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Image>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Image& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Image& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Image* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "psd.Image";
  }
  protected:
  explicit Image(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeightFieldNumber = 1,
    kWidthFieldNumber = 2,
    kEncodingFieldNumber = 3,
    kStepFieldNumber = 4,
    kPhyAddrFieldNumber = 5,
    kVirAddrFieldNumber = 6,
    kMemtypeFieldNumber = 7,
  };
  // optional uint32 height = 1;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  uint32_t height() const;
  void set_height(uint32_t value);
  private:
  uint32_t _internal_height() const;
  void _internal_set_height(uint32_t value);
  public:

  // optional uint32 width = 2;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  uint32_t width() const;
  void set_width(uint32_t value);
  private:
  uint32_t _internal_width() const;
  void _internal_set_width(uint32_t value);
  public:

  // optional uint32 encoding = 3;
  bool has_encoding() const;
  private:
  bool _internal_has_encoding() const;
  public:
  void clear_encoding();
  uint32_t encoding() const;
  void set_encoding(uint32_t value);
  private:
  uint32_t _internal_encoding() const;
  void _internal_set_encoding(uint32_t value);
  public:

  // optional uint32 step = 4;
  bool has_step() const;
  private:
  bool _internal_has_step() const;
  public:
  void clear_step();
  uint32_t step() const;
  void set_step(uint32_t value);
  private:
  uint32_t _internal_step() const;
  void _internal_set_step(uint32_t value);
  public:

  // optional uint64 phyAddr = 5;
  bool has_phyaddr() const;
  private:
  bool _internal_has_phyaddr() const;
  public:
  void clear_phyaddr();
  uint64_t phyaddr() const;
  void set_phyaddr(uint64_t value);
  private:
  uint64_t _internal_phyaddr() const;
  void _internal_set_phyaddr(uint64_t value);
  public:

  // optional uint64 virAddr = 6;
  bool has_viraddr() const;
  private:
  bool _internal_has_viraddr() const;
  public:
  void clear_viraddr();
  uint64_t viraddr() const;
  void set_viraddr(uint64_t value);
  private:
  uint64_t _internal_viraddr() const;
  void _internal_set_viraddr(uint64_t value);
  public:

  // optional uint32 memtype = 7;
  bool has_memtype() const;
  private:
  bool _internal_has_memtype() const;
  public:
  void clear_memtype();
  uint32_t memtype() const;
  void set_memtype(uint32_t value);
  private:
  uint32_t _internal_memtype() const;
  void _internal_set_memtype(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:psd.Image)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t height_;
  uint32_t width_;
  uint32_t encoding_;
  uint32_t step_;
  uint64_t phyaddr_;
  uint64_t viraddr_;
  uint32_t memtype_;
  friend struct ::TableStruct_psd_2eproto;
};
// -------------------------------------------------------------------

class SApaPSInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:psd.SApaPSInfo) */ {
 public:
  inline SApaPSInfo() : SApaPSInfo(nullptr) {}
  ~SApaPSInfo() override;
  explicit constexpr SApaPSInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SApaPSInfo(const SApaPSInfo& from);
  SApaPSInfo(SApaPSInfo&& from) noexcept
    : SApaPSInfo() {
    *this = ::std::move(from);
  }

  inline SApaPSInfo& operator=(const SApaPSInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SApaPSInfo& operator=(SApaPSInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SApaPSInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SApaPSInfo* internal_default_instance() {
    return reinterpret_cast<const SApaPSInfo*>(
               &_SApaPSInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SApaPSInfo& a, SApaPSInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SApaPSInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SApaPSInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SApaPSInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SApaPSInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SApaPSInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SApaPSInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SApaPSInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "psd.SApaPSInfo";
  }
  protected:
  explicit SApaPSInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldoutRectFieldNumber = 1,
    kUllFrameIdFieldNumber = 2,
  };
  // repeated .psd.SApaPSRect WorldoutRect = 1;
  int worldoutrect_size() const;
  private:
  int _internal_worldoutrect_size() const;
  public:
  void clear_worldoutrect();
  ::psd::SApaPSRect* mutable_worldoutrect(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::psd::SApaPSRect >*
      mutable_worldoutrect();
  private:
  const ::psd::SApaPSRect& _internal_worldoutrect(int index) const;
  ::psd::SApaPSRect* _internal_add_worldoutrect();
  public:
  const ::psd::SApaPSRect& worldoutrect(int index) const;
  ::psd::SApaPSRect* add_worldoutrect();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::psd::SApaPSRect >&
      worldoutrect() const;

  // optional int64 ullFrameId = 2;
  bool has_ullframeid() const;
  private:
  bool _internal_has_ullframeid() const;
  public:
  void clear_ullframeid();
  int64_t ullframeid() const;
  void set_ullframeid(int64_t value);
  private:
  int64_t _internal_ullframeid() const;
  void _internal_set_ullframeid(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:psd.SApaPSInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::psd::SApaPSRect > worldoutrect_;
  int64_t ullframeid_;
  friend struct ::TableStruct_psd_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SApaPoint_I

// optional int32 x = 1;
inline bool SApaPoint_I::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SApaPoint_I::has_x() const {
  return _internal_has_x();
}
inline void SApaPoint_I::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t SApaPoint_I::_internal_x() const {
  return x_;
}
inline int32_t SApaPoint_I::x() const {
  // @@protoc_insertion_point(field_get:psd.SApaPoint_I.x)
  return _internal_x();
}
inline void SApaPoint_I::_internal_set_x(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void SApaPoint_I::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:psd.SApaPoint_I.x)
}

// optional int32 y = 2;
inline bool SApaPoint_I::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SApaPoint_I::has_y() const {
  return _internal_has_y();
}
inline void SApaPoint_I::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t SApaPoint_I::_internal_y() const {
  return y_;
}
inline int32_t SApaPoint_I::y() const {
  // @@protoc_insertion_point(field_get:psd.SApaPoint_I.y)
  return _internal_y();
}
inline void SApaPoint_I::_internal_set_y(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void SApaPoint_I::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:psd.SApaPoint_I.y)
}

// -------------------------------------------------------------------

// SApaPSRect

// repeated .psd.SApaPoint_I pt = 1;
inline int SApaPSRect::_internal_pt_size() const {
  return pt_.size();
}
inline int SApaPSRect::pt_size() const {
  return _internal_pt_size();
}
inline void SApaPSRect::clear_pt() {
  pt_.Clear();
}
inline ::psd::SApaPoint_I* SApaPSRect::mutable_pt(int index) {
  // @@protoc_insertion_point(field_mutable:psd.SApaPSRect.pt)
  return pt_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::psd::SApaPoint_I >*
SApaPSRect::mutable_pt() {
  // @@protoc_insertion_point(field_mutable_list:psd.SApaPSRect.pt)
  return &pt_;
}
inline const ::psd::SApaPoint_I& SApaPSRect::_internal_pt(int index) const {
  return pt_.Get(index);
}
inline const ::psd::SApaPoint_I& SApaPSRect::pt(int index) const {
  // @@protoc_insertion_point(field_get:psd.SApaPSRect.pt)
  return _internal_pt(index);
}
inline ::psd::SApaPoint_I* SApaPSRect::_internal_add_pt() {
  return pt_.Add();
}
inline ::psd::SApaPoint_I* SApaPSRect::add_pt() {
  ::psd::SApaPoint_I* _add = _internal_add_pt();
  // @@protoc_insertion_point(field_add:psd.SApaPSRect.pt)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::psd::SApaPoint_I >&
SApaPSRect::pt() const {
  // @@protoc_insertion_point(field_list:psd.SApaPSRect.pt)
  return pt_;
}

// optional .psd.Pstype pstype = 2;
inline bool SApaPSRect::_internal_has_pstype() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SApaPSRect::has_pstype() const {
  return _internal_has_pstype();
}
inline void SApaPSRect::clear_pstype() {
  pstype_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::psd::Pstype SApaPSRect::_internal_pstype() const {
  return static_cast< ::psd::Pstype >(pstype_);
}
inline ::psd::Pstype SApaPSRect::pstype() const {
  // @@protoc_insertion_point(field_get:psd.SApaPSRect.pstype)
  return _internal_pstype();
}
inline void SApaPSRect::_internal_set_pstype(::psd::Pstype value) {
  _has_bits_[0] |= 0x00000001u;
  pstype_ = value;
}
inline void SApaPSRect::set_pstype(::psd::Pstype value) {
  _internal_set_pstype(value);
  // @@protoc_insertion_point(field_set:psd.SApaPSRect.pstype)
}

// optional int32 label = 3;
inline bool SApaPSRect::_internal_has_label() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SApaPSRect::has_label() const {
  return _internal_has_label();
}
inline void SApaPSRect::clear_label() {
  label_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t SApaPSRect::_internal_label() const {
  return label_;
}
inline int32_t SApaPSRect::label() const {
  // @@protoc_insertion_point(field_get:psd.SApaPSRect.label)
  return _internal_label();
}
inline void SApaPSRect::_internal_set_label(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  label_ = value;
}
inline void SApaPSRect::set_label(int32_t value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:psd.SApaPSRect.label)
}

// optional int32 iSlotType = 4;
inline bool SApaPSRect::_internal_has_islottype() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SApaPSRect::has_islottype() const {
  return _internal_has_islottype();
}
inline void SApaPSRect::clear_islottype() {
  islottype_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t SApaPSRect::_internal_islottype() const {
  return islottype_;
}
inline int32_t SApaPSRect::islottype() const {
  // @@protoc_insertion_point(field_get:psd.SApaPSRect.iSlotType)
  return _internal_islottype();
}
inline void SApaPSRect::_internal_set_islottype(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  islottype_ = value;
}
inline void SApaPSRect::set_islottype(int32_t value) {
  _internal_set_islottype(value);
  // @@protoc_insertion_point(field_set:psd.SApaPSRect.iSlotType)
}

// optional int32 iSceneType = 5;
inline bool SApaPSRect::_internal_has_iscenetype() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SApaPSRect::has_iscenetype() const {
  return _internal_has_iscenetype();
}
inline void SApaPSRect::clear_iscenetype() {
  iscenetype_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t SApaPSRect::_internal_iscenetype() const {
  return iscenetype_;
}
inline int32_t SApaPSRect::iscenetype() const {
  // @@protoc_insertion_point(field_get:psd.SApaPSRect.iSceneType)
  return _internal_iscenetype();
}
inline void SApaPSRect::_internal_set_iscenetype(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  iscenetype_ = value;
}
inline void SApaPSRect::set_iscenetype(int32_t value) {
  _internal_set_iscenetype(value);
  // @@protoc_insertion_point(field_set:psd.SApaPSRect.iSceneType)
}

// -------------------------------------------------------------------

// Image

// optional uint32 height = 1;
inline bool Image::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Image::has_height() const {
  return _internal_has_height();
}
inline void Image::clear_height() {
  height_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t Image::_internal_height() const {
  return height_;
}
inline uint32_t Image::height() const {
  // @@protoc_insertion_point(field_get:psd.Image.height)
  return _internal_height();
}
inline void Image::_internal_set_height(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  height_ = value;
}
inline void Image::set_height(uint32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:psd.Image.height)
}

// optional uint32 width = 2;
inline bool Image::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Image::has_width() const {
  return _internal_has_width();
}
inline void Image::clear_width() {
  width_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t Image::_internal_width() const {
  return width_;
}
inline uint32_t Image::width() const {
  // @@protoc_insertion_point(field_get:psd.Image.width)
  return _internal_width();
}
inline void Image::_internal_set_width(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  width_ = value;
}
inline void Image::set_width(uint32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:psd.Image.width)
}

// optional uint32 encoding = 3;
inline bool Image::_internal_has_encoding() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Image::has_encoding() const {
  return _internal_has_encoding();
}
inline void Image::clear_encoding() {
  encoding_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t Image::_internal_encoding() const {
  return encoding_;
}
inline uint32_t Image::encoding() const {
  // @@protoc_insertion_point(field_get:psd.Image.encoding)
  return _internal_encoding();
}
inline void Image::_internal_set_encoding(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  encoding_ = value;
}
inline void Image::set_encoding(uint32_t value) {
  _internal_set_encoding(value);
  // @@protoc_insertion_point(field_set:psd.Image.encoding)
}

// optional uint32 step = 4;
inline bool Image::_internal_has_step() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Image::has_step() const {
  return _internal_has_step();
}
inline void Image::clear_step() {
  step_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t Image::_internal_step() const {
  return step_;
}
inline uint32_t Image::step() const {
  // @@protoc_insertion_point(field_get:psd.Image.step)
  return _internal_step();
}
inline void Image::_internal_set_step(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  step_ = value;
}
inline void Image::set_step(uint32_t value) {
  _internal_set_step(value);
  // @@protoc_insertion_point(field_set:psd.Image.step)
}

// optional uint64 phyAddr = 5;
inline bool Image::_internal_has_phyaddr() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Image::has_phyaddr() const {
  return _internal_has_phyaddr();
}
inline void Image::clear_phyaddr() {
  phyaddr_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000010u;
}
inline uint64_t Image::_internal_phyaddr() const {
  return phyaddr_;
}
inline uint64_t Image::phyaddr() const {
  // @@protoc_insertion_point(field_get:psd.Image.phyAddr)
  return _internal_phyaddr();
}
inline void Image::_internal_set_phyaddr(uint64_t value) {
  _has_bits_[0] |= 0x00000010u;
  phyaddr_ = value;
}
inline void Image::set_phyaddr(uint64_t value) {
  _internal_set_phyaddr(value);
  // @@protoc_insertion_point(field_set:psd.Image.phyAddr)
}

// optional uint64 virAddr = 6;
inline bool Image::_internal_has_viraddr() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Image::has_viraddr() const {
  return _internal_has_viraddr();
}
inline void Image::clear_viraddr() {
  viraddr_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000020u;
}
inline uint64_t Image::_internal_viraddr() const {
  return viraddr_;
}
inline uint64_t Image::viraddr() const {
  // @@protoc_insertion_point(field_get:psd.Image.virAddr)
  return _internal_viraddr();
}
inline void Image::_internal_set_viraddr(uint64_t value) {
  _has_bits_[0] |= 0x00000020u;
  viraddr_ = value;
}
inline void Image::set_viraddr(uint64_t value) {
  _internal_set_viraddr(value);
  // @@protoc_insertion_point(field_set:psd.Image.virAddr)
}

// optional uint32 memtype = 7;
inline bool Image::_internal_has_memtype() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Image::has_memtype() const {
  return _internal_has_memtype();
}
inline void Image::clear_memtype() {
  memtype_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t Image::_internal_memtype() const {
  return memtype_;
}
inline uint32_t Image::memtype() const {
  // @@protoc_insertion_point(field_get:psd.Image.memtype)
  return _internal_memtype();
}
inline void Image::_internal_set_memtype(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  memtype_ = value;
}
inline void Image::set_memtype(uint32_t value) {
  _internal_set_memtype(value);
  // @@protoc_insertion_point(field_set:psd.Image.memtype)
}

// -------------------------------------------------------------------

// SApaPSInfo

// repeated .psd.SApaPSRect WorldoutRect = 1;
inline int SApaPSInfo::_internal_worldoutrect_size() const {
  return worldoutrect_.size();
}
inline int SApaPSInfo::worldoutrect_size() const {
  return _internal_worldoutrect_size();
}
inline void SApaPSInfo::clear_worldoutrect() {
  worldoutrect_.Clear();
}
inline ::psd::SApaPSRect* SApaPSInfo::mutable_worldoutrect(int index) {
  // @@protoc_insertion_point(field_mutable:psd.SApaPSInfo.WorldoutRect)
  return worldoutrect_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::psd::SApaPSRect >*
SApaPSInfo::mutable_worldoutrect() {
  // @@protoc_insertion_point(field_mutable_list:psd.SApaPSInfo.WorldoutRect)
  return &worldoutrect_;
}
inline const ::psd::SApaPSRect& SApaPSInfo::_internal_worldoutrect(int index) const {
  return worldoutrect_.Get(index);
}
inline const ::psd::SApaPSRect& SApaPSInfo::worldoutrect(int index) const {
  // @@protoc_insertion_point(field_get:psd.SApaPSInfo.WorldoutRect)
  return _internal_worldoutrect(index);
}
inline ::psd::SApaPSRect* SApaPSInfo::_internal_add_worldoutrect() {
  return worldoutrect_.Add();
}
inline ::psd::SApaPSRect* SApaPSInfo::add_worldoutrect() {
  ::psd::SApaPSRect* _add = _internal_add_worldoutrect();
  // @@protoc_insertion_point(field_add:psd.SApaPSInfo.WorldoutRect)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::psd::SApaPSRect >&
SApaPSInfo::worldoutrect() const {
  // @@protoc_insertion_point(field_list:psd.SApaPSInfo.WorldoutRect)
  return worldoutrect_;
}

// optional int64 ullFrameId = 2;
inline bool SApaPSInfo::_internal_has_ullframeid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SApaPSInfo::has_ullframeid() const {
  return _internal_has_ullframeid();
}
inline void SApaPSInfo::clear_ullframeid() {
  ullframeid_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t SApaPSInfo::_internal_ullframeid() const {
  return ullframeid_;
}
inline int64_t SApaPSInfo::ullframeid() const {
  // @@protoc_insertion_point(field_get:psd.SApaPSInfo.ullFrameId)
  return _internal_ullframeid();
}
inline void SApaPSInfo::_internal_set_ullframeid(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  ullframeid_ = value;
}
inline void SApaPSInfo::set_ullframeid(int64_t value) {
  _internal_set_ullframeid(value);
  // @@protoc_insertion_point(field_set:psd.SApaPSInfo.ullFrameId)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace psd

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::psd::Pstype> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::psd::Pstype>() {
  return ::psd::Pstype_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_psd_2eproto
