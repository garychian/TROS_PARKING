// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: psd.proto

#include "psd.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace psd {
constexpr SApaPoint_I::SApaPoint_I(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0){}
struct SApaPoint_IDefaultTypeInternal {
  constexpr SApaPoint_IDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SApaPoint_IDefaultTypeInternal() {}
  union {
    SApaPoint_I _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SApaPoint_IDefaultTypeInternal _SApaPoint_I_default_instance_;
constexpr SApaPSRect::SApaPSRect(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pt_()
  , pstype_(0)

  , label_(0)
  , islottype_(0)
  , iscenetype_(0){}
struct SApaPSRectDefaultTypeInternal {
  constexpr SApaPSRectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SApaPSRectDefaultTypeInternal() {}
  union {
    SApaPSRect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SApaPSRectDefaultTypeInternal _SApaPSRect_default_instance_;
constexpr Image::Image(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : height_(0u)
  , width_(0u)
  , encoding_(0u)
  , step_(0u)
  , phyaddr_(uint64_t{0u})
  , viraddr_(uint64_t{0u})
  , memtype_(0u){}
struct ImageDefaultTypeInternal {
  constexpr ImageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImageDefaultTypeInternal() {}
  union {
    Image _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImageDefaultTypeInternal _Image_default_instance_;
constexpr SApaPSInfo::SApaPSInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : worldoutrect_()
  , ullframeid_(int64_t{0}){}
struct SApaPSInfoDefaultTypeInternal {
  constexpr SApaPSInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SApaPSInfoDefaultTypeInternal() {}
  union {
    SApaPSInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SApaPSInfoDefaultTypeInternal _SApaPSInfo_default_instance_;
}  // namespace psd
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_psd_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_psd_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_psd_2eproto = nullptr;

const uint32_t TableStruct_psd_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::psd::SApaPoint_I, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::psd::SApaPoint_I, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::psd::SApaPoint_I, x_),
  PROTOBUF_FIELD_OFFSET(::psd::SApaPoint_I, y_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::psd::SApaPSRect, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::psd::SApaPSRect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::psd::SApaPSRect, pt_),
  PROTOBUF_FIELD_OFFSET(::psd::SApaPSRect, pstype_),
  PROTOBUF_FIELD_OFFSET(::psd::SApaPSRect, label_),
  PROTOBUF_FIELD_OFFSET(::psd::SApaPSRect, islottype_),
  PROTOBUF_FIELD_OFFSET(::psd::SApaPSRect, iscenetype_),
  ~0u,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::psd::Image, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::psd::Image, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::psd::Image, height_),
  PROTOBUF_FIELD_OFFSET(::psd::Image, width_),
  PROTOBUF_FIELD_OFFSET(::psd::Image, encoding_),
  PROTOBUF_FIELD_OFFSET(::psd::Image, step_),
  PROTOBUF_FIELD_OFFSET(::psd::Image, phyaddr_),
  PROTOBUF_FIELD_OFFSET(::psd::Image, viraddr_),
  PROTOBUF_FIELD_OFFSET(::psd::Image, memtype_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::psd::SApaPSInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::psd::SApaPSInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::psd::SApaPSInfo, worldoutrect_),
  PROTOBUF_FIELD_OFFSET(::psd::SApaPSInfo, ullframeid_),
  ~0u,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::psd::SApaPoint_I)},
  { 10, 21, -1, sizeof(::psd::SApaPSRect)},
  { 26, 39, -1, sizeof(::psd::Image)},
  { 46, 54, -1, sizeof(::psd::SApaPSInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::psd::_SApaPoint_I_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::psd::_SApaPSRect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::psd::_Image_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::psd::_SApaPSInfo_default_instance_),
};

const char descriptor_table_protodef_psd_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tpsd.proto\022\003psd\"9\n\013SApaPoint_I\022\016\n\001x\030\001 \001"
  "(\005H\000\210\001\001\022\016\n\001y\030\002 \001(\005H\001\210\001\001B\004\n\002_xB\004\n\002_y\"\303\001\n\n"
  "SApaPSRect\022\034\n\002pt\030\001 \003(\0132\020.psd.SApaPoint_I"
  "\022 \n\006pstype\030\002 \001(\0162\013.psd.PstypeH\000\210\001\001\022\022\n\005la"
  "bel\030\003 \001(\005H\001\210\001\001\022\026\n\tiSlotType\030\004 \001(\005H\002\210\001\001\022\027"
  "\n\niSceneType\030\005 \001(\005H\003\210\001\001B\t\n\007_pstypeB\010\n\006_l"
  "abelB\014\n\n_iSlotTypeB\r\n\013_iSceneType\"\353\001\n\005Im"
  "age\022\023\n\006height\030\001 \001(\rH\000\210\001\001\022\022\n\005width\030\002 \001(\rH"
  "\001\210\001\001\022\025\n\010encoding\030\003 \001(\rH\002\210\001\001\022\021\n\004step\030\004 \001("
  "\rH\003\210\001\001\022\024\n\007phyAddr\030\005 \001(\004H\004\210\001\001\022\024\n\007virAddr\030"
  "\006 \001(\004H\005\210\001\001\022\024\n\007memtype\030\007 \001(\rH\006\210\001\001B\t\n\007_hei"
  "ghtB\010\n\006_widthB\013\n\t_encodingB\007\n\005_stepB\n\n\010_"
  "phyAddrB\n\n\010_virAddrB\n\n\010_memtype\"[\n\nSApaP"
  "SInfo\022%\n\014WorldoutRect\030\001 \003(\0132\017.psd.SApaPS"
  "Rect\022\027\n\nullFrameId\030\002 \001(\003H\000\210\001\001B\r\n\013_ullFra"
  "meId*L\n\006Pstype\022\024\n\020PARALLEL_PARKING\020\000\022\024\n\020"
  "VERTICAL_PARKING\020\001\022\026\n\022DIAGONAL_PARKING_1"
  "\020\002b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_psd_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_psd_2eproto = {
  false, false, 690, descriptor_table_protodef_psd_2eproto, "psd.proto", 
  &descriptor_table_psd_2eproto_once, nullptr, 0, 4,
  schemas, file_default_instances, TableStruct_psd_2eproto::offsets,
  file_level_metadata_psd_2eproto, file_level_enum_descriptors_psd_2eproto, file_level_service_descriptors_psd_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_psd_2eproto_getter() {
  return &descriptor_table_psd_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_psd_2eproto(&descriptor_table_psd_2eproto);
namespace psd {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Pstype_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_psd_2eproto);
  return file_level_enum_descriptors_psd_2eproto[0];
}
bool Pstype_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SApaPoint_I::_Internal {
 public:
  using HasBits = decltype(std::declval<SApaPoint_I>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SApaPoint_I::SApaPoint_I(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:psd.SApaPoint_I)
}
SApaPoint_I::SApaPoint_I(const SApaPoint_I& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:psd.SApaPoint_I)
}

inline void SApaPoint_I::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

SApaPoint_I::~SApaPoint_I() {
  // @@protoc_insertion_point(destructor:psd.SApaPoint_I)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SApaPoint_I::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SApaPoint_I::ArenaDtor(void* object) {
  SApaPoint_I* _this = reinterpret_cast< SApaPoint_I* >(object);
  (void)_this;
}
void SApaPoint_I::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SApaPoint_I::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SApaPoint_I::Clear() {
// @@protoc_insertion_point(message_clear_start:psd.SApaPoint_I)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SApaPoint_I::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SApaPoint_I::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:psd.SApaPoint_I)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 x = 1;
  if (_internal_has_x()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // optional int32 y = 2;
  if (_internal_has_y()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:psd.SApaPoint_I)
  return target;
}

size_t SApaPoint_I::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:psd.SApaPoint_I)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_x());
    }

    // optional int32 y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_y());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SApaPoint_I::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SApaPoint_I::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SApaPoint_I::GetClassData() const { return &_class_data_; }

void SApaPoint_I::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SApaPoint_I *>(to)->MergeFrom(
      static_cast<const SApaPoint_I &>(from));
}


void SApaPoint_I::MergeFrom(const SApaPoint_I& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:psd.SApaPoint_I)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SApaPoint_I::CopyFrom(const SApaPoint_I& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:psd.SApaPoint_I)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SApaPoint_I::IsInitialized() const {
  return true;
}

void SApaPoint_I::InternalSwap(SApaPoint_I* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SApaPoint_I, y_)
      + sizeof(SApaPoint_I::y_)
      - PROTOBUF_FIELD_OFFSET(SApaPoint_I, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SApaPoint_I::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_psd_2eproto_getter, &descriptor_table_psd_2eproto_once,
      file_level_metadata_psd_2eproto[0]);
}

// ===================================================================

class SApaPSRect::_Internal {
 public:
  using HasBits = decltype(std::declval<SApaPSRect>()._has_bits_);
  static void set_has_pstype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_islottype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_iscenetype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

SApaPSRect::SApaPSRect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  pt_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:psd.SApaPSRect)
}
SApaPSRect::SApaPSRect(const SApaPSRect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      pt_(from.pt_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pstype_, &from.pstype_,
    static_cast<size_t>(reinterpret_cast<char*>(&iscenetype_) -
    reinterpret_cast<char*>(&pstype_)) + sizeof(iscenetype_));
  // @@protoc_insertion_point(copy_constructor:psd.SApaPSRect)
}

inline void SApaPSRect::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pstype_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&iscenetype_) -
    reinterpret_cast<char*>(&pstype_)) + sizeof(iscenetype_));
}

SApaPSRect::~SApaPSRect() {
  // @@protoc_insertion_point(destructor:psd.SApaPSRect)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SApaPSRect::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SApaPSRect::ArenaDtor(void* object) {
  SApaPSRect* _this = reinterpret_cast< SApaPSRect* >(object);
  (void)_this;
}
void SApaPSRect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SApaPSRect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SApaPSRect::Clear() {
// @@protoc_insertion_point(message_clear_start:psd.SApaPSRect)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pt_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&pstype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&iscenetype_) -
        reinterpret_cast<char*>(&pstype_)) + sizeof(iscenetype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SApaPSRect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .psd.SApaPoint_I pt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pt(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .psd.Pstype pstype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_pstype(static_cast<::psd::Pstype>(val));
        } else
          goto handle_unusual;
        continue;
      // optional int32 label = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_label(&has_bits);
          label_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 iSlotType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_islottype(&has_bits);
          islottype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 iSceneType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_iscenetype(&has_bits);
          iscenetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SApaPSRect::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:psd.SApaPSRect)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .psd.SApaPoint_I pt = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pt_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_pt(i), target, stream);
  }

  // optional .psd.Pstype pstype = 2;
  if (_internal_has_pstype()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_pstype(), target);
  }

  // optional int32 label = 3;
  if (_internal_has_label()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_label(), target);
  }

  // optional int32 iSlotType = 4;
  if (_internal_has_islottype()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_islottype(), target);
  }

  // optional int32 iSceneType = 5;
  if (_internal_has_iscenetype()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_iscenetype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:psd.SApaPSRect)
  return target;
}

size_t SApaPSRect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:psd.SApaPSRect)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .psd.SApaPoint_I pt = 1;
  total_size += 1UL * this->_internal_pt_size();
  for (const auto& msg : this->pt_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .psd.Pstype pstype = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pstype());
    }

    // optional int32 label = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_label());
    }

    // optional int32 iSlotType = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_islottype());
    }

    // optional int32 iSceneType = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_iscenetype());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SApaPSRect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SApaPSRect::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SApaPSRect::GetClassData() const { return &_class_data_; }

void SApaPSRect::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SApaPSRect *>(to)->MergeFrom(
      static_cast<const SApaPSRect &>(from));
}


void SApaPSRect::MergeFrom(const SApaPSRect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:psd.SApaPSRect)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  pt_.MergeFrom(from.pt_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      pstype_ = from.pstype_;
    }
    if (cached_has_bits & 0x00000002u) {
      label_ = from.label_;
    }
    if (cached_has_bits & 0x00000004u) {
      islottype_ = from.islottype_;
    }
    if (cached_has_bits & 0x00000008u) {
      iscenetype_ = from.iscenetype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SApaPSRect::CopyFrom(const SApaPSRect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:psd.SApaPSRect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SApaPSRect::IsInitialized() const {
  return true;
}

void SApaPSRect::InternalSwap(SApaPSRect* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pt_.InternalSwap(&other->pt_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SApaPSRect, iscenetype_)
      + sizeof(SApaPSRect::iscenetype_)
      - PROTOBUF_FIELD_OFFSET(SApaPSRect, pstype_)>(
          reinterpret_cast<char*>(&pstype_),
          reinterpret_cast<char*>(&other->pstype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SApaPSRect::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_psd_2eproto_getter, &descriptor_table_psd_2eproto_once,
      file_level_metadata_psd_2eproto[1]);
}

// ===================================================================

class Image::_Internal {
 public:
  using HasBits = decltype(std::declval<Image>()._has_bits_);
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_encoding(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_step(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_phyaddr(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_viraddr(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_memtype(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

Image::Image(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:psd.Image)
}
Image::Image(const Image& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&memtype_) -
    reinterpret_cast<char*>(&height_)) + sizeof(memtype_));
  // @@protoc_insertion_point(copy_constructor:psd.Image)
}

inline void Image::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&height_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&memtype_) -
    reinterpret_cast<char*>(&height_)) + sizeof(memtype_));
}

Image::~Image() {
  // @@protoc_insertion_point(destructor:psd.Image)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Image::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Image::ArenaDtor(void* object) {
  Image* _this = reinterpret_cast< Image* >(object);
  (void)_this;
}
void Image::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Image::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Image::Clear() {
// @@protoc_insertion_point(message_clear_start:psd.Image)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&memtype_) -
        reinterpret_cast<char*>(&height_)) + sizeof(memtype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Image::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 encoding = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_encoding(&has_bits);
          encoding_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 step = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_step(&has_bits);
          step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 phyAddr = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_phyaddr(&has_bits);
          phyaddr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 virAddr = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_viraddr(&has_bits);
          viraddr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 memtype = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_memtype(&has_bits);
          memtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Image::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:psd.Image)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional uint32 height = 1;
  if (_internal_has_height()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_height(), target);
  }

  // optional uint32 width = 2;
  if (_internal_has_width()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_width(), target);
  }

  // optional uint32 encoding = 3;
  if (_internal_has_encoding()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_encoding(), target);
  }

  // optional uint32 step = 4;
  if (_internal_has_step()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_step(), target);
  }

  // optional uint64 phyAddr = 5;
  if (_internal_has_phyaddr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_phyaddr(), target);
  }

  // optional uint64 virAddr = 6;
  if (_internal_has_viraddr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_viraddr(), target);
  }

  // optional uint32 memtype = 7;
  if (_internal_has_memtype()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_memtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:psd.Image)
  return target;
}

size_t Image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:psd.Image)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint32 height = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
    }

    // optional uint32 width = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_width());
    }

    // optional uint32 encoding = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_encoding());
    }

    // optional uint32 step = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_step());
    }

    // optional uint64 phyAddr = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_phyaddr());
    }

    // optional uint64 virAddr = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_viraddr());
    }

    // optional uint32 memtype = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_memtype());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Image::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Image::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Image::GetClassData() const { return &_class_data_; }

void Image::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Image *>(to)->MergeFrom(
      static_cast<const Image &>(from));
}


void Image::MergeFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:psd.Image)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000002u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000004u) {
      encoding_ = from.encoding_;
    }
    if (cached_has_bits & 0x00000008u) {
      step_ = from.step_;
    }
    if (cached_has_bits & 0x00000010u) {
      phyaddr_ = from.phyaddr_;
    }
    if (cached_has_bits & 0x00000020u) {
      viraddr_ = from.viraddr_;
    }
    if (cached_has_bits & 0x00000040u) {
      memtype_ = from.memtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Image::CopyFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:psd.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image::IsInitialized() const {
  return true;
}

void Image::InternalSwap(Image* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Image, memtype_)
      + sizeof(Image::memtype_)
      - PROTOBUF_FIELD_OFFSET(Image, height_)>(
          reinterpret_cast<char*>(&height_),
          reinterpret_cast<char*>(&other->height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Image::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_psd_2eproto_getter, &descriptor_table_psd_2eproto_once,
      file_level_metadata_psd_2eproto[2]);
}

// ===================================================================

class SApaPSInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<SApaPSInfo>()._has_bits_);
  static void set_has_ullframeid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SApaPSInfo::SApaPSInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  worldoutrect_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:psd.SApaPSInfo)
}
SApaPSInfo::SApaPSInfo(const SApaPSInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      worldoutrect_(from.worldoutrect_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ullframeid_ = from.ullframeid_;
  // @@protoc_insertion_point(copy_constructor:psd.SApaPSInfo)
}

inline void SApaPSInfo::SharedCtor() {
ullframeid_ = int64_t{0};
}

SApaPSInfo::~SApaPSInfo() {
  // @@protoc_insertion_point(destructor:psd.SApaPSInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SApaPSInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SApaPSInfo::ArenaDtor(void* object) {
  SApaPSInfo* _this = reinterpret_cast< SApaPSInfo* >(object);
  (void)_this;
}
void SApaPSInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SApaPSInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SApaPSInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:psd.SApaPSInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  worldoutrect_.Clear();
  ullframeid_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SApaPSInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .psd.SApaPSRect WorldoutRect = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_worldoutrect(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int64 ullFrameId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_ullframeid(&has_bits);
          ullframeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SApaPSInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:psd.SApaPSInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .psd.SApaPSRect WorldoutRect = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_worldoutrect_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_worldoutrect(i), target, stream);
  }

  // optional int64 ullFrameId = 2;
  if (_internal_has_ullframeid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_ullframeid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:psd.SApaPSInfo)
  return target;
}

size_t SApaPSInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:psd.SApaPSInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .psd.SApaPSRect WorldoutRect = 1;
  total_size += 1UL * this->_internal_worldoutrect_size();
  for (const auto& msg : this->worldoutrect_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int64 ullFrameId = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_ullframeid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SApaPSInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SApaPSInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SApaPSInfo::GetClassData() const { return &_class_data_; }

void SApaPSInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SApaPSInfo *>(to)->MergeFrom(
      static_cast<const SApaPSInfo &>(from));
}


void SApaPSInfo::MergeFrom(const SApaPSInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:psd.SApaPSInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  worldoutrect_.MergeFrom(from.worldoutrect_);
  if (from._internal_has_ullframeid()) {
    _internal_set_ullframeid(from._internal_ullframeid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SApaPSInfo::CopyFrom(const SApaPSInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:psd.SApaPSInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SApaPSInfo::IsInitialized() const {
  return true;
}

void SApaPSInfo::InternalSwap(SApaPSInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  worldoutrect_.InternalSwap(&other->worldoutrect_);
  swap(ullframeid_, other->ullframeid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SApaPSInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_psd_2eproto_getter, &descriptor_table_psd_2eproto_once,
      file_level_metadata_psd_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace psd
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::psd::SApaPoint_I* Arena::CreateMaybeMessage< ::psd::SApaPoint_I >(Arena* arena) {
  return Arena::CreateMessageInternal< ::psd::SApaPoint_I >(arena);
}
template<> PROTOBUF_NOINLINE ::psd::SApaPSRect* Arena::CreateMaybeMessage< ::psd::SApaPSRect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::psd::SApaPSRect >(arena);
}
template<> PROTOBUF_NOINLINE ::psd::Image* Arena::CreateMaybeMessage< ::psd::Image >(Arena* arena) {
  return Arena::CreateMessageInternal< ::psd::Image >(arena);
}
template<> PROTOBUF_NOINLINE ::psd::SApaPSInfo* Arena::CreateMaybeMessage< ::psd::SApaPSInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::psd::SApaPSInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
