// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fsm.proto

#include "fsm.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace fsm {
constexpr Slotlabel::Slotlabel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : targetslotlabel_(0){}
struct SlotlabelDefaultTypeInternal {
  constexpr SlotlabelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SlotlabelDefaultTypeInternal() {}
  union {
    Slotlabel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SlotlabelDefaultTypeInternal _Slotlabel_default_instance_;
constexpr Apastatusreq::Apastatusreq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : apastatusreq_(0)
{}
struct ApastatusreqDefaultTypeInternal {
  constexpr ApastatusreqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ApastatusreqDefaultTypeInternal() {}
  union {
    Apastatusreq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ApastatusreqDefaultTypeInternal _Apastatusreq_default_instance_;
}  // namespace fsm
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_fsm_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_fsm_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_fsm_2eproto = nullptr;

const uint32_t TableStruct_fsm_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::fsm::Slotlabel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fsm::Slotlabel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fsm::Slotlabel, targetslotlabel_),
  0,
  PROTOBUF_FIELD_OFFSET(::fsm::Apastatusreq, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fsm::Apastatusreq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::fsm::Apastatusreq, apastatusreq_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::fsm::Slotlabel)},
  { 8, 15, -1, sizeof(::fsm::Apastatusreq)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fsm::_Slotlabel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fsm::_Apastatusreq_default_instance_),
};

const char descriptor_table_protodef_fsm_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tfsm.proto\022\003fsm\"=\n\tSlotlabel\022\034\n\017targetS"
  "lotLabel\030\001 \001(\005H\000\210\001\001B\022\n\020_targetSlotLabel\""
  "Q\n\014Apastatusreq\0220\n\014apaStatusReq\030\001 \001(\0162\025."
  "fsm.apaStatusReqTypeH\000\210\001\001B\017\n\r_apaStatusR"
  "eq*z\n\020apaStatusReqType\022\007\n\003off\020\000\022\013\n\007stand"
  "by\020\001\022\020\n\014Search_phase\020\002\022\r\n\tExit_park\020\003\022\n\n"
  "\006enable\020\004\022\014\n\010Guidance\020\005\022\n\n\006Finish\020\006\022\t\n\005e"
  "rror\020\007b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_fsm_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fsm_2eproto = {
  false, false, 294, descriptor_table_protodef_fsm_2eproto, "fsm.proto", 
  &descriptor_table_fsm_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_fsm_2eproto::offsets,
  file_level_metadata_fsm_2eproto, file_level_enum_descriptors_fsm_2eproto, file_level_service_descriptors_fsm_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_fsm_2eproto_getter() {
  return &descriptor_table_fsm_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_fsm_2eproto(&descriptor_table_fsm_2eproto);
namespace fsm {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* apaStatusReqType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_fsm_2eproto);
  return file_level_enum_descriptors_fsm_2eproto[0];
}
bool apaStatusReqType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Slotlabel::_Internal {
 public:
  using HasBits = decltype(std::declval<Slotlabel>()._has_bits_);
  static void set_has_targetslotlabel(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Slotlabel::Slotlabel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:fsm.Slotlabel)
}
Slotlabel::Slotlabel(const Slotlabel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  targetslotlabel_ = from.targetslotlabel_;
  // @@protoc_insertion_point(copy_constructor:fsm.Slotlabel)
}

inline void Slotlabel::SharedCtor() {
targetslotlabel_ = 0;
}

Slotlabel::~Slotlabel() {
  // @@protoc_insertion_point(destructor:fsm.Slotlabel)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Slotlabel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Slotlabel::ArenaDtor(void* object) {
  Slotlabel* _this = reinterpret_cast< Slotlabel* >(object);
  (void)_this;
}
void Slotlabel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Slotlabel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Slotlabel::Clear() {
// @@protoc_insertion_point(message_clear_start:fsm.Slotlabel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  targetslotlabel_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Slotlabel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 targetSlotLabel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_targetslotlabel(&has_bits);
          targetslotlabel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Slotlabel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fsm.Slotlabel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 targetSlotLabel = 1;
  if (_internal_has_targetslotlabel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_targetslotlabel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fsm.Slotlabel)
  return target;
}

size_t Slotlabel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fsm.Slotlabel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 targetSlotLabel = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_targetslotlabel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Slotlabel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Slotlabel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Slotlabel::GetClassData() const { return &_class_data_; }

void Slotlabel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Slotlabel *>(to)->MergeFrom(
      static_cast<const Slotlabel &>(from));
}


void Slotlabel::MergeFrom(const Slotlabel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fsm.Slotlabel)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_targetslotlabel()) {
    _internal_set_targetslotlabel(from._internal_targetslotlabel());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Slotlabel::CopyFrom(const Slotlabel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fsm.Slotlabel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Slotlabel::IsInitialized() const {
  return true;
}

void Slotlabel::InternalSwap(Slotlabel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(targetslotlabel_, other->targetslotlabel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Slotlabel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_fsm_2eproto_getter, &descriptor_table_fsm_2eproto_once,
      file_level_metadata_fsm_2eproto[0]);
}

// ===================================================================

class Apastatusreq::_Internal {
 public:
  using HasBits = decltype(std::declval<Apastatusreq>()._has_bits_);
  static void set_has_apastatusreq(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Apastatusreq::Apastatusreq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:fsm.Apastatusreq)
}
Apastatusreq::Apastatusreq(const Apastatusreq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  apastatusreq_ = from.apastatusreq_;
  // @@protoc_insertion_point(copy_constructor:fsm.Apastatusreq)
}

inline void Apastatusreq::SharedCtor() {
apastatusreq_ = 0;
}

Apastatusreq::~Apastatusreq() {
  // @@protoc_insertion_point(destructor:fsm.Apastatusreq)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Apastatusreq::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Apastatusreq::ArenaDtor(void* object) {
  Apastatusreq* _this = reinterpret_cast< Apastatusreq* >(object);
  (void)_this;
}
void Apastatusreq::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Apastatusreq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Apastatusreq::Clear() {
// @@protoc_insertion_point(message_clear_start:fsm.Apastatusreq)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  apastatusreq_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Apastatusreq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .fsm.apaStatusReqType apaStatusReq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_apastatusreq(static_cast<::fsm::apaStatusReqType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Apastatusreq::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fsm.Apastatusreq)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .fsm.apaStatusReqType apaStatusReq = 1;
  if (_internal_has_apastatusreq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_apastatusreq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fsm.Apastatusreq)
  return target;
}

size_t Apastatusreq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fsm.Apastatusreq)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .fsm.apaStatusReqType apaStatusReq = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_apastatusreq());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Apastatusreq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Apastatusreq::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Apastatusreq::GetClassData() const { return &_class_data_; }

void Apastatusreq::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Apastatusreq *>(to)->MergeFrom(
      static_cast<const Apastatusreq &>(from));
}


void Apastatusreq::MergeFrom(const Apastatusreq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fsm.Apastatusreq)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_apastatusreq()) {
    _internal_set_apastatusreq(from._internal_apastatusreq());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Apastatusreq::CopyFrom(const Apastatusreq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fsm.Apastatusreq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Apastatusreq::IsInitialized() const {
  return true;
}

void Apastatusreq::InternalSwap(Apastatusreq* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(apastatusreq_, other->apastatusreq_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Apastatusreq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_fsm_2eproto_getter, &descriptor_table_fsm_2eproto_once,
      file_level_metadata_fsm_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace fsm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::fsm::Slotlabel* Arena::CreateMaybeMessage< ::fsm::Slotlabel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fsm::Slotlabel >(arena);
}
template<> PROTOBUF_NOINLINE ::fsm::Apastatusreq* Arena::CreateMaybeMessage< ::fsm::Apastatusreq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fsm::Apastatusreq >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
