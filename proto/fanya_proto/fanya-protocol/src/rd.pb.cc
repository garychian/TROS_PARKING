// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rd.proto

#include "rd.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace rd {
constexpr SApaPoint_I::SApaPoint_I(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0){}
struct SApaPoint_IDefaultTypeInternal {
  constexpr SApaPoint_IDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SApaPoint_IDefaultTypeInternal() {}
  union {
    SApaPoint_I _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SApaPoint_IDefaultTypeInternal _SApaPoint_I_default_instance_;
constexpr SApaPSRect::SApaPSRect(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pt_()
  , pstype_(0)

  , label_(0)
  , islottype_(0)
  , iscenetype_(0){}
struct SApaPSRectDefaultTypeInternal {
  constexpr SApaPSRectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SApaPSRectDefaultTypeInternal() {}
  union {
    SApaPSRect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SApaPSRectDefaultTypeInternal _SApaPSRect_default_instance_;
constexpr Image::Image(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : encoding_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , header_(nullptr)
  , data_(nullptr)
  , oriheight_(0u)
  , oriwidth_(0u)
  , height_(0u)
  , width_(0u)
  , phyaddr_(uint64_t{0u})
  , step_(0u)
  , memtype_(0)

  , viraddr_(uint64_t{0u}){}
struct ImageDefaultTypeInternal {
  constexpr ImageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ImageDefaultTypeInternal() {}
  union {
    Image _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ImageDefaultTypeInternal _Image_default_instance_;
constexpr SApaPSInfo::SApaPSInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : worldoutrect_()
  , ullframeid_(int64_t{0}){}
struct SApaPSInfoDefaultTypeInternal {
  constexpr SApaPSInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SApaPSInfoDefaultTypeInternal() {}
  union {
    SApaPSInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SApaPSInfoDefaultTypeInternal _SApaPSInfo_default_instance_;
constexpr QuadParkingSlots::QuadParkingSlots(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : quadparkingslotlist_()
  , header_(nullptr)
  , frametimestampns_(uint64_t{0u})
  , sensorid_(0){}
struct QuadParkingSlotsDefaultTypeInternal {
  constexpr QuadParkingSlotsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QuadParkingSlotsDefaultTypeInternal() {}
  union {
    QuadParkingSlots _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QuadParkingSlotsDefaultTypeInternal _QuadParkingSlots_default_instance_;
constexpr Header::Header(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : frameid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timestampns_(nullptr)
  , seq_(0u){}
struct HeaderDefaultTypeInternal {
  constexpr HeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HeaderDefaultTypeInternal() {}
  union {
    Header _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HeaderDefaultTypeInternal _Header_default_instance_;
constexpr Time::Time(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nanosec_(uint64_t{0u}){}
struct TimeDefaultTypeInternal {
  constexpr TimeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TimeDefaultTypeInternal() {}
  union {
    Time _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TimeDefaultTypeInternal _Time_default_instance_;
constexpr QuadParkingSlot::QuadParkingSlot(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tl_(nullptr)
  , tr_(nullptr)
  , bl_(nullptr)
  , br_(nullptr)
  , dirin_(nullptr)
  , dirwidth_(nullptr)
  , dirlength_(nullptr)
  , center_(nullptr)
  , ptl_(nullptr)
  , ptr_(nullptr)
  , pbl_(nullptr)
  , pbr_(nullptr)
  , confidence_(0)
  , label_(0u)
  , slottype_(0)
  , stl_(0)
  , str_(0)
  , sbl_(0)
  , sbr_(0)
  , filtered_(false)
  , oppmodify_(false)
  , iscomplete_(false)
  , isvisited_(false)
  , width_(0)
  , length_(0){}
struct QuadParkingSlotDefaultTypeInternal {
  constexpr QuadParkingSlotDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QuadParkingSlotDefaultTypeInternal() {}
  union {
    QuadParkingSlot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QuadParkingSlotDefaultTypeInternal _QuadParkingSlot_default_instance_;
constexpr Point2f::Point2f(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0){}
struct Point2fDefaultTypeInternal {
  constexpr Point2fDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Point2fDefaultTypeInternal() {}
  union {
    Point2f _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Point2fDefaultTypeInternal _Point2f_default_instance_;
constexpr ApproxBoxPoints::ApproxBoxPoints(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : point_(nullptr)
  , borderdist_(0)
  , pointscore_(0)
  , linelen_(0)
  , linescore_(0)
  , hasborderpoint_(false){}
struct ApproxBoxPointsDefaultTypeInternal {
  constexpr ApproxBoxPointsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ApproxBoxPointsDefaultTypeInternal() {}
  union {
    ApproxBoxPoints _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ApproxBoxPointsDefaultTypeInternal _ApproxBoxPoints_default_instance_;
constexpr Data_Row::Data_Row(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_()
  , _value_cached_byte_size_(0){}
struct Data_RowDefaultTypeInternal {
  constexpr Data_RowDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Data_RowDefaultTypeInternal() {}
  union {
    Data_Row _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Data_RowDefaultTypeInternal _Data_Row_default_instance_;
constexpr Data::Data(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pt_(){}
struct DataDefaultTypeInternal {
  constexpr DataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DataDefaultTypeInternal() {}
  union {
    Data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DataDefaultTypeInternal _Data_default_instance_;
}  // namespace rd
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_rd_2eproto[12];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_rd_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_rd_2eproto = nullptr;

const uint32_t TableStruct_rd_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::rd::SApaPoint_I, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rd::SApaPoint_I, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rd::SApaPoint_I, x_),
  PROTOBUF_FIELD_OFFSET(::rd::SApaPoint_I, y_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::rd::SApaPSRect, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rd::SApaPSRect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rd::SApaPSRect, pt_),
  PROTOBUF_FIELD_OFFSET(::rd::SApaPSRect, pstype_),
  PROTOBUF_FIELD_OFFSET(::rd::SApaPSRect, label_),
  PROTOBUF_FIELD_OFFSET(::rd::SApaPSRect, islottype_),
  PROTOBUF_FIELD_OFFSET(::rd::SApaPSRect, iscenetype_),
  ~0u,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::rd::Image, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rd::Image, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rd::Image, header_),
  PROTOBUF_FIELD_OFFSET(::rd::Image, oriheight_),
  PROTOBUF_FIELD_OFFSET(::rd::Image, oriwidth_),
  PROTOBUF_FIELD_OFFSET(::rd::Image, height_),
  PROTOBUF_FIELD_OFFSET(::rd::Image, width_),
  PROTOBUF_FIELD_OFFSET(::rd::Image, encoding_),
  PROTOBUF_FIELD_OFFSET(::rd::Image, step_),
  PROTOBUF_FIELD_OFFSET(::rd::Image, data_),
  PROTOBUF_FIELD_OFFSET(::rd::Image, phyaddr_),
  PROTOBUF_FIELD_OFFSET(::rd::Image, viraddr_),
  PROTOBUF_FIELD_OFFSET(::rd::Image, memtype_),
  1,
  3,
  4,
  5,
  6,
  0,
  8,
  2,
  7,
  10,
  9,
  PROTOBUF_FIELD_OFFSET(::rd::SApaPSInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rd::SApaPSInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rd::SApaPSInfo, worldoutrect_),
  PROTOBUF_FIELD_OFFSET(::rd::SApaPSInfo, ullframeid_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::rd::QuadParkingSlots, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rd::QuadParkingSlots, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rd::QuadParkingSlots, header_),
  PROTOBUF_FIELD_OFFSET(::rd::QuadParkingSlots, frametimestampns_),
  PROTOBUF_FIELD_OFFSET(::rd::QuadParkingSlots, sensorid_),
  PROTOBUF_FIELD_OFFSET(::rd::QuadParkingSlots, quadparkingslotlist_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::rd::Header, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rd::Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rd::Header, seq_),
  PROTOBUF_FIELD_OFFSET(::rd::Header, timestampns_),
  PROTOBUF_FIELD_OFFSET(::rd::Header, frameid_),
  2,
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::rd::Time, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rd::Time, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rd::Time, nanosec_),
  0,
  PROTOBUF_FIELD_OFFSET(::rd::QuadParkingSlot, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rd::QuadParkingSlot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rd::QuadParkingSlot, tl_),
  PROTOBUF_FIELD_OFFSET(::rd::QuadParkingSlot, tr_),
  PROTOBUF_FIELD_OFFSET(::rd::QuadParkingSlot, bl_),
  PROTOBUF_FIELD_OFFSET(::rd::QuadParkingSlot, br_),
  PROTOBUF_FIELD_OFFSET(::rd::QuadParkingSlot, confidence_),
  PROTOBUF_FIELD_OFFSET(::rd::QuadParkingSlot, label_),
  PROTOBUF_FIELD_OFFSET(::rd::QuadParkingSlot, filtered_),
  PROTOBUF_FIELD_OFFSET(::rd::QuadParkingSlot, slottype_),
  PROTOBUF_FIELD_OFFSET(::rd::QuadParkingSlot, stl_),
  PROTOBUF_FIELD_OFFSET(::rd::QuadParkingSlot, str_),
  PROTOBUF_FIELD_OFFSET(::rd::QuadParkingSlot, sbl_),
  PROTOBUF_FIELD_OFFSET(::rd::QuadParkingSlot, sbr_),
  PROTOBUF_FIELD_OFFSET(::rd::QuadParkingSlot, dirin_),
  PROTOBUF_FIELD_OFFSET(::rd::QuadParkingSlot, dirwidth_),
  PROTOBUF_FIELD_OFFSET(::rd::QuadParkingSlot, dirlength_),
  PROTOBUF_FIELD_OFFSET(::rd::QuadParkingSlot, center_),
  PROTOBUF_FIELD_OFFSET(::rd::QuadParkingSlot, oppmodify_),
  PROTOBUF_FIELD_OFFSET(::rd::QuadParkingSlot, iscomplete_),
  PROTOBUF_FIELD_OFFSET(::rd::QuadParkingSlot, width_),
  PROTOBUF_FIELD_OFFSET(::rd::QuadParkingSlot, length_),
  PROTOBUF_FIELD_OFFSET(::rd::QuadParkingSlot, isvisited_),
  PROTOBUF_FIELD_OFFSET(::rd::QuadParkingSlot, ptl_),
  PROTOBUF_FIELD_OFFSET(::rd::QuadParkingSlot, ptr_),
  PROTOBUF_FIELD_OFFSET(::rd::QuadParkingSlot, pbl_),
  PROTOBUF_FIELD_OFFSET(::rd::QuadParkingSlot, pbr_),
  0,
  1,
  2,
  3,
  12,
  13,
  19,
  14,
  15,
  16,
  17,
  18,
  4,
  5,
  6,
  7,
  20,
  21,
  23,
  24,
  22,
  8,
  9,
  10,
  11,
  PROTOBUF_FIELD_OFFSET(::rd::Point2f, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rd::Point2f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rd::Point2f, x_),
  PROTOBUF_FIELD_OFFSET(::rd::Point2f, y_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::rd::ApproxBoxPoints, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::rd::ApproxBoxPoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rd::ApproxBoxPoints, point_),
  PROTOBUF_FIELD_OFFSET(::rd::ApproxBoxPoints, borderdist_),
  PROTOBUF_FIELD_OFFSET(::rd::ApproxBoxPoints, pointscore_),
  PROTOBUF_FIELD_OFFSET(::rd::ApproxBoxPoints, linelen_),
  PROTOBUF_FIELD_OFFSET(::rd::ApproxBoxPoints, linescore_),
  PROTOBUF_FIELD_OFFSET(::rd::ApproxBoxPoints, hasborderpoint_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rd::Data_Row, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rd::Data_Row, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rd::Data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rd::Data, pt_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::rd::SApaPoint_I)},
  { 10, 21, -1, sizeof(::rd::SApaPSRect)},
  { 26, 43, -1, sizeof(::rd::Image)},
  { 54, 62, -1, sizeof(::rd::SApaPSInfo)},
  { 64, 74, -1, sizeof(::rd::QuadParkingSlots)},
  { 78, 87, -1, sizeof(::rd::Header)},
  { 90, 97, -1, sizeof(::rd::Time)},
  { 98, 129, -1, sizeof(::rd::QuadParkingSlot)},
  { 154, 162, -1, sizeof(::rd::Point2f)},
  { 164, 176, -1, sizeof(::rd::ApproxBoxPoints)},
  { 182, -1, -1, sizeof(::rd::Data_Row)},
  { 189, -1, -1, sizeof(::rd::Data)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rd::_SApaPoint_I_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rd::_SApaPSRect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rd::_Image_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rd::_SApaPSInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rd::_QuadParkingSlots_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rd::_Header_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rd::_Time_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rd::_QuadParkingSlot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rd::_Point2f_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rd::_ApproxBoxPoints_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rd::_Data_Row_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rd::_Data_default_instance_),
};

const char descriptor_table_protodef_rd_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\010rd.proto\022\002rd\"9\n\013SApaPoint_I\022\016\n\001x\030\001 \001(\005"
  "H\000\210\001\001\022\016\n\001y\030\002 \001(\005H\001\210\001\001B\004\n\002_xB\004\n\002_y\"\301\001\n\nSA"
  "paPSRect\022\033\n\002pt\030\001 \003(\0132\017.rd.SApaPoint_I\022\037\n"
  "\006pstype\030\002 \001(\0162\n.rd.PstypeH\000\210\001\001\022\022\n\005label\030"
  "\003 \001(\005H\001\210\001\001\022\026\n\tiSlotType\030\004 \001(\005H\002\210\001\001\022\027\n\niS"
  "ceneType\030\005 \001(\005H\003\210\001\001B\t\n\007_pstypeB\010\n\006_label"
  "B\014\n\n_iSlotTypeB\r\n\013_iSceneType\"\224\003\n\005Image\022"
  "\037\n\006header\030\001 \001(\0132\n.rd.HeaderH\000\210\001\001\022\026\n\toriH"
  "eight\030\002 \001(\rH\001\210\001\001\022\025\n\010oriWidth\030\003 \001(\rH\002\210\001\001\022"
  "\023\n\006height\030\004 \001(\rH\003\210\001\001\022\022\n\005width\030\005 \001(\rH\004\210\001\001"
  "\022\025\n\010encoding\030\006 \001(\tH\005\210\001\001\022\021\n\004step\030\007 \001(\rH\006\210"
  "\001\001\022\033\n\004data\030\010 \001(\0132\010.rd.DataH\007\210\001\001\022\024\n\007phyAd"
  "dr\030\t \001(\004H\010\210\001\001\022\024\n\007virAddr\030\n \001(\004H\t\210\001\001\022!\n\007m"
  "emtype\030\013 \001(\0162\013.rd.MemtypeH\n\210\001\001B\t\n\007_heade"
  "rB\014\n\n_oriHeightB\013\n\t_oriWidthB\t\n\007_heightB"
  "\010\n\006_widthB\013\n\t_encodingB\007\n\005_stepB\007\n\005_data"
  "B\n\n\010_phyAddrB\n\n\010_virAddrB\n\n\010_memtype\"Z\n\n"
  "SApaPSInfo\022$\n\014WorldoutRect\030\001 \003(\0132\016.rd.SA"
  "paPSRect\022\027\n\nullFrameId\030\002 \001(\003H\000\210\001\001B\r\n\013_ul"
  "lFrameId\"\310\001\n\020QuadParkingSlots\022\037\n\006header\030"
  "\001 \001(\0132\n.rd.HeaderH\000\210\001\001\022\035\n\020frameTimeStamp"
  "Ns\030\002 \001(\004H\001\210\001\001\022\025\n\010sensorId\030\003 \001(\005H\002\210\001\001\0220\n\023"
  "quadParkingSlotList\030\004 \003(\0132\023.rd.QuadParki"
  "ngSlotB\t\n\007_headerB\023\n\021_frameTimeStampNsB\013"
  "\n\t_sensorId\"x\n\006Header\022\020\n\003seq\030\001 \001(\rH\000\210\001\001\022"
  "\"\n\013timestampNs\030\002 \001(\0132\010.rd.TimeH\001\210\001\001\022\024\n\007f"
  "rameId\030\003 \001(\tH\002\210\001\001B\006\n\004_seqB\016\n\014_timestampN"
  "sB\n\n\010_frameId\"(\n\004Time\022\024\n\007nanoSec\030\001 \001(\004H\000"
  "\210\001\001B\n\n\010_nanoSec\"\305\007\n\017QuadParkingSlot\022\034\n\002t"
  "l\030\001 \001(\0132\013.rd.Point2fH\000\210\001\001\022\034\n\002tr\030\002 \001(\0132\013."
  "rd.Point2fH\001\210\001\001\022\034\n\002bl\030\003 \001(\0132\013.rd.Point2f"
  "H\002\210\001\001\022\034\n\002br\030\004 \001(\0132\013.rd.Point2fH\003\210\001\001\022\027\n\nc"
  "onfidence\030\005 \001(\002H\004\210\001\001\022\022\n\005label\030\006 \001(\rH\005\210\001\001"
  "\022\025\n\010filtered\030\007 \001(\010H\006\210\001\001\022\025\n\010slotType\030\010 \001("
  "\005H\007\210\001\001\022\020\n\003sTl\030\t \001(\002H\010\210\001\001\022\020\n\003sTr\030\n \001(\002H\t\210"
  "\001\001\022\020\n\003sBl\030\013 \001(\002H\n\210\001\001\022\020\n\003sBr\030\014 \001(\002H\013\210\001\001\022\037"
  "\n\005dirIn\030\r \001(\0132\013.rd.Point2fH\014\210\001\001\022\"\n\010dirWi"
  "dth\030\016 \001(\0132\013.rd.Point2fH\r\210\001\001\022#\n\tdirLength"
  "\030\017 \001(\0132\013.rd.Point2fH\016\210\001\001\022 \n\006center\030\020 \001(\013"
  "2\013.rd.Point2fH\017\210\001\001\022\026\n\toppModify\030\021 \001(\010H\020\210"
  "\001\001\022\027\n\nisComplete\030\022 \001(\010H\021\210\001\001\022\022\n\005width\030\023 \001"
  "(\002H\022\210\001\001\022\023\n\006length\030\024 \001(\002H\023\210\001\001\022\026\n\tisVisite"
  "d\030\025 \001(\010H\024\210\001\001\022%\n\003pTl\030\026 \001(\0132\023.rd.ApproxBox"
  "PointsH\025\210\001\001\022%\n\003pTr\030\027 \001(\0132\023.rd.ApproxBoxP"
  "ointsH\026\210\001\001\022%\n\003pBl\030\030 \001(\0132\023.rd.ApproxBoxPo"
  "intsH\027\210\001\001\022%\n\003pBr\030\031 \001(\0132\023.rd.ApproxBoxPoi"
  "ntsH\030\210\001\001B\005\n\003_tlB\005\n\003_trB\005\n\003_blB\005\n\003_brB\r\n\013"
  "_confidenceB\010\n\006_labelB\013\n\t_filteredB\013\n\t_s"
  "lotTypeB\006\n\004_sTlB\006\n\004_sTrB\006\n\004_sBlB\006\n\004_sBrB"
  "\010\n\006_dirInB\013\n\t_dirWidthB\014\n\n_dirLengthB\t\n\007"
  "_centerB\014\n\n_oppModifyB\r\n\013_isCompleteB\010\n\006"
  "_widthB\t\n\007_lengthB\014\n\n_isVisitedB\006\n\004_pTlB"
  "\006\n\004_pTrB\006\n\004_pBlB\006\n\004_pBr\"5\n\007Point2f\022\016\n\001x\030"
  "\001 \001(\002H\000\210\001\001\022\016\n\001y\030\002 \001(\002H\001\210\001\001B\004\n\002_xB\004\n\002_y\"\204"
  "\002\n\017ApproxBoxPoints\022\037\n\005point\030\001 \001(\0132\013.rd.P"
  "oint2fH\000\210\001\001\022\027\n\nborderDist\030\002 \001(\002H\001\210\001\001\022\027\n\n"
  "pointScore\030\003 \001(\002H\002\210\001\001\022\024\n\007lineLen\030\004 \001(\002H\003"
  "\210\001\001\022\026\n\tlineScore\030\005 \001(\002H\004\210\001\001\022\033\n\016hasBorder"
  "Point\030\006 \001(\010H\005\210\001\001B\010\n\006_pointB\r\n\013_borderDis"
  "tB\r\n\013_pointScoreB\n\n\010_lineLenB\014\n\n_lineSco"
  "reB\021\n\017_hasBorderPoint\"6\n\004Data\022\030\n\002pt\030\001 \003("
  "\0132\014.rd.Data.Row\032\024\n\003Row\022\r\n\005value\030\001 \003(\005*L\n"
  "\006Pstype\022\024\n\020PARALLEL_PARKING\020\000\022\024\n\020VERTICA"
  "L_PARKING\020\001\022\026\n\022DIAGONAL_PARKING_1\020\002*5\n\007M"
  "emtype\022\010\n\004host\020\000\022\020\n\014cambriconVgu\020\001\022\016\n\nho"
  "rizonIon\020\002b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_rd_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rd_2eproto = {
  false, false, 2618, descriptor_table_protodef_rd_2eproto, "rd.proto", 
  &descriptor_table_rd_2eproto_once, nullptr, 0, 12,
  schemas, file_default_instances, TableStruct_rd_2eproto::offsets,
  file_level_metadata_rd_2eproto, file_level_enum_descriptors_rd_2eproto, file_level_service_descriptors_rd_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_rd_2eproto_getter() {
  return &descriptor_table_rd_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_rd_2eproto(&descriptor_table_rd_2eproto);
namespace rd {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Pstype_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rd_2eproto);
  return file_level_enum_descriptors_rd_2eproto[0];
}
bool Pstype_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Memtype_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_rd_2eproto);
  return file_level_enum_descriptors_rd_2eproto[1];
}
bool Memtype_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SApaPoint_I::_Internal {
 public:
  using HasBits = decltype(std::declval<SApaPoint_I>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SApaPoint_I::SApaPoint_I(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rd.SApaPoint_I)
}
SApaPoint_I::SApaPoint_I(const SApaPoint_I& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:rd.SApaPoint_I)
}

inline void SApaPoint_I::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

SApaPoint_I::~SApaPoint_I() {
  // @@protoc_insertion_point(destructor:rd.SApaPoint_I)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SApaPoint_I::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SApaPoint_I::ArenaDtor(void* object) {
  SApaPoint_I* _this = reinterpret_cast< SApaPoint_I* >(object);
  (void)_this;
}
void SApaPoint_I::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SApaPoint_I::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SApaPoint_I::Clear() {
// @@protoc_insertion_point(message_clear_start:rd.SApaPoint_I)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SApaPoint_I::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SApaPoint_I::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rd.SApaPoint_I)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 x = 1;
  if (_internal_has_x()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // optional int32 y = 2;
  if (_internal_has_y()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rd.SApaPoint_I)
  return target;
}

size_t SApaPoint_I::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rd.SApaPoint_I)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_x());
    }

    // optional int32 y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_y());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SApaPoint_I::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SApaPoint_I::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SApaPoint_I::GetClassData() const { return &_class_data_; }

void SApaPoint_I::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SApaPoint_I *>(to)->MergeFrom(
      static_cast<const SApaPoint_I &>(from));
}


void SApaPoint_I::MergeFrom(const SApaPoint_I& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rd.SApaPoint_I)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SApaPoint_I::CopyFrom(const SApaPoint_I& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rd.SApaPoint_I)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SApaPoint_I::IsInitialized() const {
  return true;
}

void SApaPoint_I::InternalSwap(SApaPoint_I* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SApaPoint_I, y_)
      + sizeof(SApaPoint_I::y_)
      - PROTOBUF_FIELD_OFFSET(SApaPoint_I, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SApaPoint_I::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rd_2eproto_getter, &descriptor_table_rd_2eproto_once,
      file_level_metadata_rd_2eproto[0]);
}

// ===================================================================

class SApaPSRect::_Internal {
 public:
  using HasBits = decltype(std::declval<SApaPSRect>()._has_bits_);
  static void set_has_pstype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_islottype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_iscenetype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

SApaPSRect::SApaPSRect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  pt_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rd.SApaPSRect)
}
SApaPSRect::SApaPSRect(const SApaPSRect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      pt_(from.pt_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pstype_, &from.pstype_,
    static_cast<size_t>(reinterpret_cast<char*>(&iscenetype_) -
    reinterpret_cast<char*>(&pstype_)) + sizeof(iscenetype_));
  // @@protoc_insertion_point(copy_constructor:rd.SApaPSRect)
}

inline void SApaPSRect::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pstype_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&iscenetype_) -
    reinterpret_cast<char*>(&pstype_)) + sizeof(iscenetype_));
}

SApaPSRect::~SApaPSRect() {
  // @@protoc_insertion_point(destructor:rd.SApaPSRect)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SApaPSRect::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SApaPSRect::ArenaDtor(void* object) {
  SApaPSRect* _this = reinterpret_cast< SApaPSRect* >(object);
  (void)_this;
}
void SApaPSRect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SApaPSRect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SApaPSRect::Clear() {
// @@protoc_insertion_point(message_clear_start:rd.SApaPSRect)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pt_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&pstype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&iscenetype_) -
        reinterpret_cast<char*>(&pstype_)) + sizeof(iscenetype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SApaPSRect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .rd.SApaPoint_I pt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pt(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .rd.Pstype pstype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_pstype(static_cast<::rd::Pstype>(val));
        } else
          goto handle_unusual;
        continue;
      // optional int32 label = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_label(&has_bits);
          label_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 iSlotType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_islottype(&has_bits);
          islottype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 iSceneType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_iscenetype(&has_bits);
          iscenetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SApaPSRect::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rd.SApaPSRect)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .rd.SApaPoint_I pt = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pt_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_pt(i), target, stream);
  }

  // optional .rd.Pstype pstype = 2;
  if (_internal_has_pstype()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_pstype(), target);
  }

  // optional int32 label = 3;
  if (_internal_has_label()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_label(), target);
  }

  // optional int32 iSlotType = 4;
  if (_internal_has_islottype()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_islottype(), target);
  }

  // optional int32 iSceneType = 5;
  if (_internal_has_iscenetype()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_iscenetype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rd.SApaPSRect)
  return target;
}

size_t SApaPSRect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rd.SApaPSRect)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rd.SApaPoint_I pt = 1;
  total_size += 1UL * this->_internal_pt_size();
  for (const auto& msg : this->pt_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .rd.Pstype pstype = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pstype());
    }

    // optional int32 label = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_label());
    }

    // optional int32 iSlotType = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_islottype());
    }

    // optional int32 iSceneType = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_iscenetype());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SApaPSRect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SApaPSRect::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SApaPSRect::GetClassData() const { return &_class_data_; }

void SApaPSRect::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SApaPSRect *>(to)->MergeFrom(
      static_cast<const SApaPSRect &>(from));
}


void SApaPSRect::MergeFrom(const SApaPSRect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rd.SApaPSRect)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  pt_.MergeFrom(from.pt_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      pstype_ = from.pstype_;
    }
    if (cached_has_bits & 0x00000002u) {
      label_ = from.label_;
    }
    if (cached_has_bits & 0x00000004u) {
      islottype_ = from.islottype_;
    }
    if (cached_has_bits & 0x00000008u) {
      iscenetype_ = from.iscenetype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SApaPSRect::CopyFrom(const SApaPSRect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rd.SApaPSRect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SApaPSRect::IsInitialized() const {
  return true;
}

void SApaPSRect::InternalSwap(SApaPSRect* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pt_.InternalSwap(&other->pt_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SApaPSRect, iscenetype_)
      + sizeof(SApaPSRect::iscenetype_)
      - PROTOBUF_FIELD_OFFSET(SApaPSRect, pstype_)>(
          reinterpret_cast<char*>(&pstype_),
          reinterpret_cast<char*>(&other->pstype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SApaPSRect::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rd_2eproto_getter, &descriptor_table_rd_2eproto_once,
      file_level_metadata_rd_2eproto[1]);
}

// ===================================================================

class Image::_Internal {
 public:
  using HasBits = decltype(std::declval<Image>()._has_bits_);
  static const ::rd::Header& header(const Image* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_oriheight(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_oriwidth(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_encoding(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_step(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::rd::Data& data(const Image* msg);
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_phyaddr(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_viraddr(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_memtype(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

const ::rd::Header&
Image::_Internal::header(const Image* msg) {
  return *msg->header_;
}
const ::rd::Data&
Image::_Internal::data(const Image* msg) {
  return *msg->data_;
}
Image::Image(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rd.Image)
}
Image::Image(const Image& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  encoding_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    encoding_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_encoding()) {
    encoding_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_encoding(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::rd::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_data()) {
    data_ = new ::rd::Data(*from.data_);
  } else {
    data_ = nullptr;
  }
  ::memcpy(&oriheight_, &from.oriheight_,
    static_cast<size_t>(reinterpret_cast<char*>(&viraddr_) -
    reinterpret_cast<char*>(&oriheight_)) + sizeof(viraddr_));
  // @@protoc_insertion_point(copy_constructor:rd.Image)
}

inline void Image::SharedCtor() {
encoding_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  encoding_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&viraddr_) -
    reinterpret_cast<char*>(&header_)) + sizeof(viraddr_));
}

Image::~Image() {
  // @@protoc_insertion_point(destructor:rd.Image)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Image::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  encoding_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete data_;
}

void Image::ArenaDtor(void* object) {
  Image* _this = reinterpret_cast< Image* >(object);
  (void)_this;
}
void Image::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Image::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Image::Clear() {
// @@protoc_insertion_point(message_clear_start:rd.Image)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      encoding_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(data_ != nullptr);
      data_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&oriheight_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&phyaddr_) -
        reinterpret_cast<char*>(&oriheight_)) + sizeof(phyaddr_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&step_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&viraddr_) -
        reinterpret_cast<char*>(&step_)) + sizeof(viraddr_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Image::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .rd.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 oriHeight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_oriheight(&has_bits);
          oriheight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 oriWidth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_oriwidth(&has_bits);
          oriwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 width = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string encoding = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_encoding();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rd.Image.encoding"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 step = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_step(&has_bits);
          step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .rd.Data data = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 phyAddr = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_phyaddr(&has_bits);
          phyaddr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 virAddr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_viraddr(&has_bits);
          viraddr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .rd.Memtype memtype = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_memtype(static_cast<::rd::Memtype>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Image::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rd.Image)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .rd.Header header = 1;
  if (_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional uint32 oriHeight = 2;
  if (_internal_has_oriheight()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_oriheight(), target);
  }

  // optional uint32 oriWidth = 3;
  if (_internal_has_oriwidth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_oriwidth(), target);
  }

  // optional uint32 height = 4;
  if (_internal_has_height()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_height(), target);
  }

  // optional uint32 width = 5;
  if (_internal_has_width()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_width(), target);
  }

  // optional string encoding = 6;
  if (_internal_has_encoding()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_encoding().data(), static_cast<int>(this->_internal_encoding().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rd.Image.encoding");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_encoding(), target);
  }

  // optional uint32 step = 7;
  if (_internal_has_step()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_step(), target);
  }

  // optional .rd.Data data = 8;
  if (_internal_has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::data(this), target, stream);
  }

  // optional uint64 phyAddr = 9;
  if (_internal_has_phyaddr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_phyaddr(), target);
  }

  // optional uint64 virAddr = 10;
  if (_internal_has_viraddr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->_internal_viraddr(), target);
  }

  // optional .rd.Memtype memtype = 11;
  if (_internal_has_memtype()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_memtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rd.Image)
  return target;
}

size_t Image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rd.Image)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string encoding = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_encoding());
    }

    // optional .rd.Header header = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .rd.Data data = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_);
    }

    // optional uint32 oriHeight = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_oriheight());
    }

    // optional uint32 oriWidth = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_oriwidth());
    }

    // optional uint32 height = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
    }

    // optional uint32 width = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_width());
    }

    // optional uint64 phyAddr = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_phyaddr());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional uint32 step = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_step());
    }

    // optional .rd.Memtype memtype = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_memtype());
    }

    // optional uint64 virAddr = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_viraddr());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Image::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Image::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Image::GetClassData() const { return &_class_data_; }

void Image::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Image *>(to)->MergeFrom(
      static_cast<const Image &>(from));
}


void Image::MergeFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rd.Image)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_encoding(from._internal_encoding());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_header()->::rd::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_data()->::rd::Data::MergeFrom(from._internal_data());
    }
    if (cached_has_bits & 0x00000008u) {
      oriheight_ = from.oriheight_;
    }
    if (cached_has_bits & 0x00000010u) {
      oriwidth_ = from.oriwidth_;
    }
    if (cached_has_bits & 0x00000020u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000040u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000080u) {
      phyaddr_ = from.phyaddr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      step_ = from.step_;
    }
    if (cached_has_bits & 0x00000200u) {
      memtype_ = from.memtype_;
    }
    if (cached_has_bits & 0x00000400u) {
      viraddr_ = from.viraddr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Image::CopyFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rd.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image::IsInitialized() const {
  return true;
}

void Image::InternalSwap(Image* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &encoding_, lhs_arena,
      &other->encoding_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Image, viraddr_)
      + sizeof(Image::viraddr_)
      - PROTOBUF_FIELD_OFFSET(Image, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Image::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rd_2eproto_getter, &descriptor_table_rd_2eproto_once,
      file_level_metadata_rd_2eproto[2]);
}

// ===================================================================

class SApaPSInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<SApaPSInfo>()._has_bits_);
  static void set_has_ullframeid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SApaPSInfo::SApaPSInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  worldoutrect_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rd.SApaPSInfo)
}
SApaPSInfo::SApaPSInfo(const SApaPSInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      worldoutrect_(from.worldoutrect_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ullframeid_ = from.ullframeid_;
  // @@protoc_insertion_point(copy_constructor:rd.SApaPSInfo)
}

inline void SApaPSInfo::SharedCtor() {
ullframeid_ = int64_t{0};
}

SApaPSInfo::~SApaPSInfo() {
  // @@protoc_insertion_point(destructor:rd.SApaPSInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SApaPSInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SApaPSInfo::ArenaDtor(void* object) {
  SApaPSInfo* _this = reinterpret_cast< SApaPSInfo* >(object);
  (void)_this;
}
void SApaPSInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SApaPSInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SApaPSInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:rd.SApaPSInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  worldoutrect_.Clear();
  ullframeid_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SApaPSInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .rd.SApaPSRect WorldoutRect = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_worldoutrect(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int64 ullFrameId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_ullframeid(&has_bits);
          ullframeid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SApaPSInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rd.SApaPSInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .rd.SApaPSRect WorldoutRect = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_worldoutrect_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_worldoutrect(i), target, stream);
  }

  // optional int64 ullFrameId = 2;
  if (_internal_has_ullframeid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_ullframeid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rd.SApaPSInfo)
  return target;
}

size_t SApaPSInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rd.SApaPSInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rd.SApaPSRect WorldoutRect = 1;
  total_size += 1UL * this->_internal_worldoutrect_size();
  for (const auto& msg : this->worldoutrect_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int64 ullFrameId = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_ullframeid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SApaPSInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SApaPSInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SApaPSInfo::GetClassData() const { return &_class_data_; }

void SApaPSInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SApaPSInfo *>(to)->MergeFrom(
      static_cast<const SApaPSInfo &>(from));
}


void SApaPSInfo::MergeFrom(const SApaPSInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rd.SApaPSInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  worldoutrect_.MergeFrom(from.worldoutrect_);
  if (from._internal_has_ullframeid()) {
    _internal_set_ullframeid(from._internal_ullframeid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SApaPSInfo::CopyFrom(const SApaPSInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rd.SApaPSInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SApaPSInfo::IsInitialized() const {
  return true;
}

void SApaPSInfo::InternalSwap(SApaPSInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  worldoutrect_.InternalSwap(&other->worldoutrect_);
  swap(ullframeid_, other->ullframeid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SApaPSInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rd_2eproto_getter, &descriptor_table_rd_2eproto_once,
      file_level_metadata_rd_2eproto[3]);
}

// ===================================================================

class QuadParkingSlots::_Internal {
 public:
  using HasBits = decltype(std::declval<QuadParkingSlots>()._has_bits_);
  static const ::rd::Header& header(const QuadParkingSlots* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_frametimestampns(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sensorid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::rd::Header&
QuadParkingSlots::_Internal::header(const QuadParkingSlots* msg) {
  return *msg->header_;
}
QuadParkingSlots::QuadParkingSlots(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  quadparkingslotlist_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rd.QuadParkingSlots)
}
QuadParkingSlots::QuadParkingSlots(const QuadParkingSlots& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      quadparkingslotlist_(from.quadparkingslotlist_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::rd::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  ::memcpy(&frametimestampns_, &from.frametimestampns_,
    static_cast<size_t>(reinterpret_cast<char*>(&sensorid_) -
    reinterpret_cast<char*>(&frametimestampns_)) + sizeof(sensorid_));
  // @@protoc_insertion_point(copy_constructor:rd.QuadParkingSlots)
}

inline void QuadParkingSlots::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sensorid_) -
    reinterpret_cast<char*>(&header_)) + sizeof(sensorid_));
}

QuadParkingSlots::~QuadParkingSlots() {
  // @@protoc_insertion_point(destructor:rd.QuadParkingSlots)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void QuadParkingSlots::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
}

void QuadParkingSlots::ArenaDtor(void* object) {
  QuadParkingSlots* _this = reinterpret_cast< QuadParkingSlots* >(object);
  (void)_this;
}
void QuadParkingSlots::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QuadParkingSlots::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QuadParkingSlots::Clear() {
// @@protoc_insertion_point(message_clear_start:rd.QuadParkingSlots)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  quadparkingslotlist_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != nullptr);
    header_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&frametimestampns_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sensorid_) -
        reinterpret_cast<char*>(&frametimestampns_)) + sizeof(sensorid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuadParkingSlots::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .rd.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 frameTimeStampNs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_frametimestampns(&has_bits);
          frametimestampns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 sensorId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_sensorid(&has_bits);
          sensorid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .rd.QuadParkingSlot quadParkingSlotList = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_quadparkingslotlist(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QuadParkingSlots::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rd.QuadParkingSlots)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .rd.Header header = 1;
  if (_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional uint64 frameTimeStampNs = 2;
  if (_internal_has_frametimestampns()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_frametimestampns(), target);
  }

  // optional int32 sensorId = 3;
  if (_internal_has_sensorid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_sensorid(), target);
  }

  // repeated .rd.QuadParkingSlot quadParkingSlotList = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_quadparkingslotlist_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_quadparkingslotlist(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rd.QuadParkingSlots)
  return target;
}

size_t QuadParkingSlots::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rd.QuadParkingSlots)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rd.QuadParkingSlot quadParkingSlotList = 4;
  total_size += 1UL * this->_internal_quadparkingslotlist_size();
  for (const auto& msg : this->quadparkingslotlist_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .rd.Header header = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional uint64 frameTimeStampNs = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_frametimestampns());
    }

    // optional int32 sensorId = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_sensorid());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuadParkingSlots::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    QuadParkingSlots::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuadParkingSlots::GetClassData() const { return &_class_data_; }

void QuadParkingSlots::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<QuadParkingSlots *>(to)->MergeFrom(
      static_cast<const QuadParkingSlots &>(from));
}


void QuadParkingSlots::MergeFrom(const QuadParkingSlots& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rd.QuadParkingSlots)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  quadparkingslotlist_.MergeFrom(from.quadparkingslotlist_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_header()->::rd::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      frametimestampns_ = from.frametimestampns_;
    }
    if (cached_has_bits & 0x00000004u) {
      sensorid_ = from.sensorid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuadParkingSlots::CopyFrom(const QuadParkingSlots& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rd.QuadParkingSlots)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuadParkingSlots::IsInitialized() const {
  return true;
}

void QuadParkingSlots::InternalSwap(QuadParkingSlots* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  quadparkingslotlist_.InternalSwap(&other->quadparkingslotlist_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QuadParkingSlots, sensorid_)
      + sizeof(QuadParkingSlots::sensorid_)
      - PROTOBUF_FIELD_OFFSET(QuadParkingSlots, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QuadParkingSlots::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rd_2eproto_getter, &descriptor_table_rd_2eproto_once,
      file_level_metadata_rd_2eproto[4]);
}

// ===================================================================

class Header::_Internal {
 public:
  using HasBits = decltype(std::declval<Header>()._has_bits_);
  static void set_has_seq(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::rd::Time& timestampns(const Header* msg);
  static void set_has_timestampns(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_frameid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::rd::Time&
Header::_Internal::timestampns(const Header* msg) {
  return *msg->timestampns_;
}
Header::Header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rd.Header)
}
Header::Header(const Header& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  frameid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    frameid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_frameid()) {
    frameid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_frameid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_timestampns()) {
    timestampns_ = new ::rd::Time(*from.timestampns_);
  } else {
    timestampns_ = nullptr;
  }
  seq_ = from.seq_;
  // @@protoc_insertion_point(copy_constructor:rd.Header)
}

inline void Header::SharedCtor() {
frameid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  frameid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestampns_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&seq_) -
    reinterpret_cast<char*>(&timestampns_)) + sizeof(seq_));
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:rd.Header)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Header::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  frameid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timestampns_;
}

void Header::ArenaDtor(void* object) {
  Header* _this = reinterpret_cast< Header* >(object);
  (void)_this;
}
void Header::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:rd.Header)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      frameid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(timestampns_ != nullptr);
      timestampns_->Clear();
    }
  }
  seq_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Header::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 seq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_seq(&has_bits);
          seq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .rd.Time timestampNs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestampns(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string frameId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_frameid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rd.Header.frameId"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Header::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rd.Header)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional uint32 seq = 1;
  if (_internal_has_seq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_seq(), target);
  }

  // optional .rd.Time timestampNs = 2;
  if (_internal_has_timestampns()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::timestampns(this), target, stream);
  }

  // optional string frameId = 3;
  if (_internal_has_frameid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_frameid().data(), static_cast<int>(this->_internal_frameid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rd.Header.frameId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_frameid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rd.Header)
  return target;
}

size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rd.Header)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string frameId = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_frameid());
    }

    // optional .rd.Time timestampNs = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *timestampns_);
    }

    // optional uint32 seq = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_seq());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Header::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Header::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Header::GetClassData() const { return &_class_data_; }

void Header::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Header *>(to)->MergeFrom(
      static_cast<const Header &>(from));
}


void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rd.Header)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_frameid(from._internal_frameid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_timestampns()->::rd::Time::MergeFrom(from._internal_timestampns());
    }
    if (cached_has_bits & 0x00000004u) {
      seq_ = from.seq_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rd.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  return true;
}

void Header::InternalSwap(Header* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &frameid_, lhs_arena,
      &other->frameid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Header, seq_)
      + sizeof(Header::seq_)
      - PROTOBUF_FIELD_OFFSET(Header, timestampns_)>(
          reinterpret_cast<char*>(&timestampns_),
          reinterpret_cast<char*>(&other->timestampns_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Header::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rd_2eproto_getter, &descriptor_table_rd_2eproto_once,
      file_level_metadata_rd_2eproto[5]);
}

// ===================================================================

class Time::_Internal {
 public:
  using HasBits = decltype(std::declval<Time>()._has_bits_);
  static void set_has_nanosec(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Time::Time(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rd.Time)
}
Time::Time(const Time& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nanosec_ = from.nanosec_;
  // @@protoc_insertion_point(copy_constructor:rd.Time)
}

inline void Time::SharedCtor() {
nanosec_ = uint64_t{0u};
}

Time::~Time() {
  // @@protoc_insertion_point(destructor:rd.Time)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Time::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Time::ArenaDtor(void* object) {
  Time* _this = reinterpret_cast< Time* >(object);
  (void)_this;
}
void Time::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Time::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Time::Clear() {
// @@protoc_insertion_point(message_clear_start:rd.Time)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nanosec_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Time::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 nanoSec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_nanosec(&has_bits);
          nanosec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Time::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rd.Time)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional uint64 nanoSec = 1;
  if (_internal_has_nanosec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_nanosec(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rd.Time)
  return target;
}

size_t Time::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rd.Time)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 nanoSec = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_nanosec());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Time::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Time::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Time::GetClassData() const { return &_class_data_; }

void Time::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Time *>(to)->MergeFrom(
      static_cast<const Time &>(from));
}


void Time::MergeFrom(const Time& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rd.Time)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_nanosec()) {
    _internal_set_nanosec(from._internal_nanosec());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Time::CopyFrom(const Time& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rd.Time)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Time::IsInitialized() const {
  return true;
}

void Time::InternalSwap(Time* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(nanosec_, other->nanosec_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Time::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rd_2eproto_getter, &descriptor_table_rd_2eproto_once,
      file_level_metadata_rd_2eproto[6]);
}

// ===================================================================

class QuadParkingSlot::_Internal {
 public:
  using HasBits = decltype(std::declval<QuadParkingSlot>()._has_bits_);
  static const ::rd::Point2f& tl(const QuadParkingSlot* msg);
  static void set_has_tl(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::rd::Point2f& tr(const QuadParkingSlot* msg);
  static void set_has_tr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::rd::Point2f& bl(const QuadParkingSlot* msg);
  static void set_has_bl(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::rd::Point2f& br(const QuadParkingSlot* msg);
  static void set_has_br(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_filtered(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_slottype(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_stl(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_str(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_sbl(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_sbr(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::rd::Point2f& dirin(const QuadParkingSlot* msg);
  static void set_has_dirin(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::rd::Point2f& dirwidth(const QuadParkingSlot* msg);
  static void set_has_dirwidth(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::rd::Point2f& dirlength(const QuadParkingSlot* msg);
  static void set_has_dirlength(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::rd::Point2f& center(const QuadParkingSlot* msg);
  static void set_has_center(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_oppmodify(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_iscomplete(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_isvisited(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::rd::ApproxBoxPoints& ptl(const QuadParkingSlot* msg);
  static void set_has_ptl(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::rd::ApproxBoxPoints& ptr(const QuadParkingSlot* msg);
  static void set_has_ptr(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::rd::ApproxBoxPoints& pbl(const QuadParkingSlot* msg);
  static void set_has_pbl(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::rd::ApproxBoxPoints& pbr(const QuadParkingSlot* msg);
  static void set_has_pbr(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

const ::rd::Point2f&
QuadParkingSlot::_Internal::tl(const QuadParkingSlot* msg) {
  return *msg->tl_;
}
const ::rd::Point2f&
QuadParkingSlot::_Internal::tr(const QuadParkingSlot* msg) {
  return *msg->tr_;
}
const ::rd::Point2f&
QuadParkingSlot::_Internal::bl(const QuadParkingSlot* msg) {
  return *msg->bl_;
}
const ::rd::Point2f&
QuadParkingSlot::_Internal::br(const QuadParkingSlot* msg) {
  return *msg->br_;
}
const ::rd::Point2f&
QuadParkingSlot::_Internal::dirin(const QuadParkingSlot* msg) {
  return *msg->dirin_;
}
const ::rd::Point2f&
QuadParkingSlot::_Internal::dirwidth(const QuadParkingSlot* msg) {
  return *msg->dirwidth_;
}
const ::rd::Point2f&
QuadParkingSlot::_Internal::dirlength(const QuadParkingSlot* msg) {
  return *msg->dirlength_;
}
const ::rd::Point2f&
QuadParkingSlot::_Internal::center(const QuadParkingSlot* msg) {
  return *msg->center_;
}
const ::rd::ApproxBoxPoints&
QuadParkingSlot::_Internal::ptl(const QuadParkingSlot* msg) {
  return *msg->ptl_;
}
const ::rd::ApproxBoxPoints&
QuadParkingSlot::_Internal::ptr(const QuadParkingSlot* msg) {
  return *msg->ptr_;
}
const ::rd::ApproxBoxPoints&
QuadParkingSlot::_Internal::pbl(const QuadParkingSlot* msg) {
  return *msg->pbl_;
}
const ::rd::ApproxBoxPoints&
QuadParkingSlot::_Internal::pbr(const QuadParkingSlot* msg) {
  return *msg->pbr_;
}
QuadParkingSlot::QuadParkingSlot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rd.QuadParkingSlot)
}
QuadParkingSlot::QuadParkingSlot(const QuadParkingSlot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tl()) {
    tl_ = new ::rd::Point2f(*from.tl_);
  } else {
    tl_ = nullptr;
  }
  if (from._internal_has_tr()) {
    tr_ = new ::rd::Point2f(*from.tr_);
  } else {
    tr_ = nullptr;
  }
  if (from._internal_has_bl()) {
    bl_ = new ::rd::Point2f(*from.bl_);
  } else {
    bl_ = nullptr;
  }
  if (from._internal_has_br()) {
    br_ = new ::rd::Point2f(*from.br_);
  } else {
    br_ = nullptr;
  }
  if (from._internal_has_dirin()) {
    dirin_ = new ::rd::Point2f(*from.dirin_);
  } else {
    dirin_ = nullptr;
  }
  if (from._internal_has_dirwidth()) {
    dirwidth_ = new ::rd::Point2f(*from.dirwidth_);
  } else {
    dirwidth_ = nullptr;
  }
  if (from._internal_has_dirlength()) {
    dirlength_ = new ::rd::Point2f(*from.dirlength_);
  } else {
    dirlength_ = nullptr;
  }
  if (from._internal_has_center()) {
    center_ = new ::rd::Point2f(*from.center_);
  } else {
    center_ = nullptr;
  }
  if (from._internal_has_ptl()) {
    ptl_ = new ::rd::ApproxBoxPoints(*from.ptl_);
  } else {
    ptl_ = nullptr;
  }
  if (from._internal_has_ptr()) {
    ptr_ = new ::rd::ApproxBoxPoints(*from.ptr_);
  } else {
    ptr_ = nullptr;
  }
  if (from._internal_has_pbl()) {
    pbl_ = new ::rd::ApproxBoxPoints(*from.pbl_);
  } else {
    pbl_ = nullptr;
  }
  if (from._internal_has_pbr()) {
    pbr_ = new ::rd::ApproxBoxPoints(*from.pbr_);
  } else {
    pbr_ = nullptr;
  }
  ::memcpy(&confidence_, &from.confidence_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&confidence_)) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:rd.QuadParkingSlot)
}

inline void QuadParkingSlot::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tl_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&tl_)) + sizeof(length_));
}

QuadParkingSlot::~QuadParkingSlot() {
  // @@protoc_insertion_point(destructor:rd.QuadParkingSlot)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void QuadParkingSlot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete tl_;
  if (this != internal_default_instance()) delete tr_;
  if (this != internal_default_instance()) delete bl_;
  if (this != internal_default_instance()) delete br_;
  if (this != internal_default_instance()) delete dirin_;
  if (this != internal_default_instance()) delete dirwidth_;
  if (this != internal_default_instance()) delete dirlength_;
  if (this != internal_default_instance()) delete center_;
  if (this != internal_default_instance()) delete ptl_;
  if (this != internal_default_instance()) delete ptr_;
  if (this != internal_default_instance()) delete pbl_;
  if (this != internal_default_instance()) delete pbr_;
}

void QuadParkingSlot::ArenaDtor(void* object) {
  QuadParkingSlot* _this = reinterpret_cast< QuadParkingSlot* >(object);
  (void)_this;
}
void QuadParkingSlot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QuadParkingSlot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QuadParkingSlot::Clear() {
// @@protoc_insertion_point(message_clear_start:rd.QuadParkingSlot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(tl_ != nullptr);
      tl_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(tr_ != nullptr);
      tr_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(bl_ != nullptr);
      bl_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(br_ != nullptr);
      br_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(dirin_ != nullptr);
      dirin_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(dirwidth_ != nullptr);
      dirwidth_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(dirlength_ != nullptr);
      dirlength_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(center_ != nullptr);
      center_->Clear();
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(ptl_ != nullptr);
      ptl_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(ptr_ != nullptr);
      ptr_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(pbl_ != nullptr);
      pbl_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(pbr_ != nullptr);
      pbr_->Clear();
    }
  }
  if (cached_has_bits & 0x0000f000u) {
    ::memset(&confidence_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stl_) -
        reinterpret_cast<char*>(&confidence_)) + sizeof(stl_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&str_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&width_) -
        reinterpret_cast<char*>(&str_)) + sizeof(width_));
  }
  length_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QuadParkingSlot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .rd.Point2f tl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tl(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .rd.Point2f tr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .rd.Point2f bl = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_bl(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .rd.Point2f br = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_br(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float confidence = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_confidence(&has_bits);
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 label = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_label(&has_bits);
          label_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool filtered = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_filtered(&has_bits);
          filtered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 slotType = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_slottype(&has_bits);
          slottype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float sTl = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_stl(&has_bits);
          stl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float sTr = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _Internal::set_has_str(&has_bits);
          str_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float sBl = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _Internal::set_has_sbl(&has_bits);
          sbl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float sBr = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _Internal::set_has_sbr(&has_bits);
          sbr_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .rd.Point2f dirIn = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_dirin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .rd.Point2f dirWidth = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_dirwidth(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .rd.Point2f dirLength = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_dirlength(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .rd.Point2f center = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_center(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool oppModify = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_oppmodify(&has_bits);
          oppmodify_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool isComplete = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _Internal::set_has_iscomplete(&has_bits);
          iscomplete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float width = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 157)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float length = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 165)) {
          _Internal::set_has_length(&has_bits);
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool isVisited = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _Internal::set_has_isvisited(&has_bits);
          isvisited_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .rd.ApproxBoxPoints pTl = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_ptl(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .rd.ApproxBoxPoints pTr = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_ptr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .rd.ApproxBoxPoints pBl = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_pbl(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .rd.ApproxBoxPoints pBr = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_pbr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QuadParkingSlot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rd.QuadParkingSlot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .rd.Point2f tl = 1;
  if (_internal_has_tl()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tl(this), target, stream);
  }

  // optional .rd.Point2f tr = 2;
  if (_internal_has_tr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::tr(this), target, stream);
  }

  // optional .rd.Point2f bl = 3;
  if (_internal_has_bl()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::bl(this), target, stream);
  }

  // optional .rd.Point2f br = 4;
  if (_internal_has_br()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::br(this), target, stream);
  }

  // optional float confidence = 5;
  if (_internal_has_confidence()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_confidence(), target);
  }

  // optional uint32 label = 6;
  if (_internal_has_label()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_label(), target);
  }

  // optional bool filtered = 7;
  if (_internal_has_filtered()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_filtered(), target);
  }

  // optional int32 slotType = 8;
  if (_internal_has_slottype()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_slottype(), target);
  }

  // optional float sTl = 9;
  if (_internal_has_stl()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_stl(), target);
  }

  // optional float sTr = 10;
  if (_internal_has_str()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_str(), target);
  }

  // optional float sBl = 11;
  if (_internal_has_sbl()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_sbl(), target);
  }

  // optional float sBr = 12;
  if (_internal_has_sbr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_sbr(), target);
  }

  // optional .rd.Point2f dirIn = 13;
  if (_internal_has_dirin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::dirin(this), target, stream);
  }

  // optional .rd.Point2f dirWidth = 14;
  if (_internal_has_dirwidth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::dirwidth(this), target, stream);
  }

  // optional .rd.Point2f dirLength = 15;
  if (_internal_has_dirlength()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::dirlength(this), target, stream);
  }

  // optional .rd.Point2f center = 16;
  if (_internal_has_center()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::center(this), target, stream);
  }

  // optional bool oppModify = 17;
  if (_internal_has_oppmodify()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->_internal_oppmodify(), target);
  }

  // optional bool isComplete = 18;
  if (_internal_has_iscomplete()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(18, this->_internal_iscomplete(), target);
  }

  // optional float width = 19;
  if (_internal_has_width()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->_internal_width(), target);
  }

  // optional float length = 20;
  if (_internal_has_length()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(20, this->_internal_length(), target);
  }

  // optional bool isVisited = 21;
  if (_internal_has_isvisited()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_isvisited(), target);
  }

  // optional .rd.ApproxBoxPoints pTl = 22;
  if (_internal_has_ptl()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::ptl(this), target, stream);
  }

  // optional .rd.ApproxBoxPoints pTr = 23;
  if (_internal_has_ptr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::ptr(this), target, stream);
  }

  // optional .rd.ApproxBoxPoints pBl = 24;
  if (_internal_has_pbl()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::pbl(this), target, stream);
  }

  // optional .rd.ApproxBoxPoints pBr = 25;
  if (_internal_has_pbr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::pbr(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rd.QuadParkingSlot)
  return target;
}

size_t QuadParkingSlot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rd.QuadParkingSlot)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .rd.Point2f tl = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tl_);
    }

    // optional .rd.Point2f tr = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tr_);
    }

    // optional .rd.Point2f bl = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bl_);
    }

    // optional .rd.Point2f br = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *br_);
    }

    // optional .rd.Point2f dirIn = 13;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dirin_);
    }

    // optional .rd.Point2f dirWidth = 14;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dirwidth_);
    }

    // optional .rd.Point2f dirLength = 15;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dirlength_);
    }

    // optional .rd.Point2f center = 16;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *center_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .rd.ApproxBoxPoints pTl = 22;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ptl_);
    }

    // optional .rd.ApproxBoxPoints pTr = 23;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ptr_);
    }

    // optional .rd.ApproxBoxPoints pBl = 24;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pbl_);
    }

    // optional .rd.ApproxBoxPoints pBr = 25;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *pbr_);
    }

    // optional float confidence = 5;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional uint32 label = 6;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_label());
    }

    // optional int32 slotType = 8;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_slottype());
    }

    // optional float sTl = 9;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float sTr = 10;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 4;
    }

    // optional float sBl = 11;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 4;
    }

    // optional float sBr = 12;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 4;
    }

    // optional bool filtered = 7;
    if (cached_has_bits & 0x00080000u) {
      total_size += 1 + 1;
    }

    // optional bool oppModify = 17;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 1;
    }

    // optional bool isComplete = 18;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 1;
    }

    // optional bool isVisited = 21;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 1;
    }

    // optional float width = 19;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 4;
    }

  }
  // optional float length = 20;
  if (cached_has_bits & 0x01000000u) {
    total_size += 2 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QuadParkingSlot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    QuadParkingSlot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QuadParkingSlot::GetClassData() const { return &_class_data_; }

void QuadParkingSlot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<QuadParkingSlot *>(to)->MergeFrom(
      static_cast<const QuadParkingSlot &>(from));
}


void QuadParkingSlot::MergeFrom(const QuadParkingSlot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rd.QuadParkingSlot)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_tl()->::rd::Point2f::MergeFrom(from._internal_tl());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_tr()->::rd::Point2f::MergeFrom(from._internal_tr());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_bl()->::rd::Point2f::MergeFrom(from._internal_bl());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_br()->::rd::Point2f::MergeFrom(from._internal_br());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_dirin()->::rd::Point2f::MergeFrom(from._internal_dirin());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_dirwidth()->::rd::Point2f::MergeFrom(from._internal_dirwidth());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_dirlength()->::rd::Point2f::MergeFrom(from._internal_dirlength());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_center()->::rd::Point2f::MergeFrom(from._internal_center());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_ptl()->::rd::ApproxBoxPoints::MergeFrom(from._internal_ptl());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_ptr()->::rd::ApproxBoxPoints::MergeFrom(from._internal_ptr());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_mutable_pbl()->::rd::ApproxBoxPoints::MergeFrom(from._internal_pbl());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_mutable_pbr()->::rd::ApproxBoxPoints::MergeFrom(from._internal_pbr());
    }
    if (cached_has_bits & 0x00001000u) {
      confidence_ = from.confidence_;
    }
    if (cached_has_bits & 0x00002000u) {
      label_ = from.label_;
    }
    if (cached_has_bits & 0x00004000u) {
      slottype_ = from.slottype_;
    }
    if (cached_has_bits & 0x00008000u) {
      stl_ = from.stl_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      str_ = from.str_;
    }
    if (cached_has_bits & 0x00020000u) {
      sbl_ = from.sbl_;
    }
    if (cached_has_bits & 0x00040000u) {
      sbr_ = from.sbr_;
    }
    if (cached_has_bits & 0x00080000u) {
      filtered_ = from.filtered_;
    }
    if (cached_has_bits & 0x00100000u) {
      oppmodify_ = from.oppmodify_;
    }
    if (cached_has_bits & 0x00200000u) {
      iscomplete_ = from.iscomplete_;
    }
    if (cached_has_bits & 0x00400000u) {
      isvisited_ = from.isvisited_;
    }
    if (cached_has_bits & 0x00800000u) {
      width_ = from.width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x01000000u) {
    _internal_set_length(from._internal_length());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QuadParkingSlot::CopyFrom(const QuadParkingSlot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rd.QuadParkingSlot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuadParkingSlot::IsInitialized() const {
  return true;
}

void QuadParkingSlot::InternalSwap(QuadParkingSlot* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(QuadParkingSlot, length_)
      + sizeof(QuadParkingSlot::length_)
      - PROTOBUF_FIELD_OFFSET(QuadParkingSlot, tl_)>(
          reinterpret_cast<char*>(&tl_),
          reinterpret_cast<char*>(&other->tl_));
}

::PROTOBUF_NAMESPACE_ID::Metadata QuadParkingSlot::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rd_2eproto_getter, &descriptor_table_rd_2eproto_once,
      file_level_metadata_rd_2eproto[7]);
}

// ===================================================================

class Point2f::_Internal {
 public:
  using HasBits = decltype(std::declval<Point2f>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Point2f::Point2f(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rd.Point2f)
}
Point2f::Point2f(const Point2f& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:rd.Point2f)
}

inline void Point2f::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Point2f::~Point2f() {
  // @@protoc_insertion_point(destructor:rd.Point2f)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Point2f::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Point2f::ArenaDtor(void* object) {
  Point2f* _this = reinterpret_cast< Point2f* >(object);
  (void)_this;
}
void Point2f::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point2f::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Point2f::Clear() {
// @@protoc_insertion_point(message_clear_start:rd.Point2f)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point2f::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Point2f::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rd.Point2f)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional float x = 1;
  if (_internal_has_x()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // optional float y = 2;
  if (_internal_has_y()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rd.Point2f)
  return target;
}

size_t Point2f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rd.Point2f)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Point2f::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Point2f::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Point2f::GetClassData() const { return &_class_data_; }

void Point2f::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Point2f *>(to)->MergeFrom(
      static_cast<const Point2f &>(from));
}


void Point2f::MergeFrom(const Point2f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rd.Point2f)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Point2f::CopyFrom(const Point2f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rd.Point2f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point2f::IsInitialized() const {
  return true;
}

void Point2f::InternalSwap(Point2f* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point2f, y_)
      + sizeof(Point2f::y_)
      - PROTOBUF_FIELD_OFFSET(Point2f, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point2f::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rd_2eproto_getter, &descriptor_table_rd_2eproto_once,
      file_level_metadata_rd_2eproto[8]);
}

// ===================================================================

class ApproxBoxPoints::_Internal {
 public:
  using HasBits = decltype(std::declval<ApproxBoxPoints>()._has_bits_);
  static const ::rd::Point2f& point(const ApproxBoxPoints* msg);
  static void set_has_point(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_borderdist(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_pointscore(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_linelen(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_linescore(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_hasborderpoint(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::rd::Point2f&
ApproxBoxPoints::_Internal::point(const ApproxBoxPoints* msg) {
  return *msg->point_;
}
ApproxBoxPoints::ApproxBoxPoints(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rd.ApproxBoxPoints)
}
ApproxBoxPoints::ApproxBoxPoints(const ApproxBoxPoints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_point()) {
    point_ = new ::rd::Point2f(*from.point_);
  } else {
    point_ = nullptr;
  }
  ::memcpy(&borderdist_, &from.borderdist_,
    static_cast<size_t>(reinterpret_cast<char*>(&hasborderpoint_) -
    reinterpret_cast<char*>(&borderdist_)) + sizeof(hasborderpoint_));
  // @@protoc_insertion_point(copy_constructor:rd.ApproxBoxPoints)
}

inline void ApproxBoxPoints::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&point_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hasborderpoint_) -
    reinterpret_cast<char*>(&point_)) + sizeof(hasborderpoint_));
}

ApproxBoxPoints::~ApproxBoxPoints() {
  // @@protoc_insertion_point(destructor:rd.ApproxBoxPoints)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ApproxBoxPoints::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete point_;
}

void ApproxBoxPoints::ArenaDtor(void* object) {
  ApproxBoxPoints* _this = reinterpret_cast< ApproxBoxPoints* >(object);
  (void)_this;
}
void ApproxBoxPoints::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ApproxBoxPoints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ApproxBoxPoints::Clear() {
// @@protoc_insertion_point(message_clear_start:rd.ApproxBoxPoints)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(point_ != nullptr);
    point_->Clear();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&borderdist_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hasborderpoint_) -
        reinterpret_cast<char*>(&borderdist_)) + sizeof(hasborderpoint_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApproxBoxPoints::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .rd.Point2f point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_point(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float borderDist = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_borderdist(&has_bits);
          borderdist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float pointScore = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_pointscore(&has_bits);
          pointscore_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float lineLen = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_linelen(&has_bits);
          linelen_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float lineScore = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_linescore(&has_bits);
          linescore_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional bool hasBorderPoint = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_hasborderpoint(&has_bits);
          hasborderpoint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ApproxBoxPoints::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rd.ApproxBoxPoints)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .rd.Point2f point = 1;
  if (_internal_has_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::point(this), target, stream);
  }

  // optional float borderDist = 2;
  if (_internal_has_borderdist()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_borderdist(), target);
  }

  // optional float pointScore = 3;
  if (_internal_has_pointscore()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_pointscore(), target);
  }

  // optional float lineLen = 4;
  if (_internal_has_linelen()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_linelen(), target);
  }

  // optional float lineScore = 5;
  if (_internal_has_linescore()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_linescore(), target);
  }

  // optional bool hasBorderPoint = 6;
  if (_internal_has_hasborderpoint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_hasborderpoint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rd.ApproxBoxPoints)
  return target;
}

size_t ApproxBoxPoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rd.ApproxBoxPoints)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .rd.Point2f point = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *point_);
    }

    // optional float borderDist = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float pointScore = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float lineLen = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float lineScore = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional bool hasBorderPoint = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ApproxBoxPoints::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ApproxBoxPoints::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ApproxBoxPoints::GetClassData() const { return &_class_data_; }

void ApproxBoxPoints::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ApproxBoxPoints *>(to)->MergeFrom(
      static_cast<const ApproxBoxPoints &>(from));
}


void ApproxBoxPoints::MergeFrom(const ApproxBoxPoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rd.ApproxBoxPoints)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_point()->::rd::Point2f::MergeFrom(from._internal_point());
    }
    if (cached_has_bits & 0x00000002u) {
      borderdist_ = from.borderdist_;
    }
    if (cached_has_bits & 0x00000004u) {
      pointscore_ = from.pointscore_;
    }
    if (cached_has_bits & 0x00000008u) {
      linelen_ = from.linelen_;
    }
    if (cached_has_bits & 0x00000010u) {
      linescore_ = from.linescore_;
    }
    if (cached_has_bits & 0x00000020u) {
      hasborderpoint_ = from.hasborderpoint_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ApproxBoxPoints::CopyFrom(const ApproxBoxPoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rd.ApproxBoxPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApproxBoxPoints::IsInitialized() const {
  return true;
}

void ApproxBoxPoints::InternalSwap(ApproxBoxPoints* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ApproxBoxPoints, hasborderpoint_)
      + sizeof(ApproxBoxPoints::hasborderpoint_)
      - PROTOBUF_FIELD_OFFSET(ApproxBoxPoints, point_)>(
          reinterpret_cast<char*>(&point_),
          reinterpret_cast<char*>(&other->point_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ApproxBoxPoints::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rd_2eproto_getter, &descriptor_table_rd_2eproto_once,
      file_level_metadata_rd_2eproto[9]);
}

// ===================================================================

class Data_Row::_Internal {
 public:
};

Data_Row::Data_Row(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  value_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rd.Data.Row)
}
Data_Row::Data_Row(const Data_Row& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rd.Data.Row)
}

inline void Data_Row::SharedCtor() {
}

Data_Row::~Data_Row() {
  // @@protoc_insertion_point(destructor:rd.Data.Row)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Data_Row::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Data_Row::ArenaDtor(void* object) {
  Data_Row* _this = reinterpret_cast< Data_Row* >(object);
  (void)_this;
}
void Data_Row::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Data_Row::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Data_Row::Clear() {
// @@protoc_insertion_point(message_clear_start:rd.Data.Row)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Data_Row::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_value(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Data_Row::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rd.Data.Row)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 value = 1;
  {
    int byte_size = _value_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_value(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rd.Data.Row)
  return target;
}

size_t Data_Row::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rd.Data.Row)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 value = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->value_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _value_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Data_Row::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Data_Row::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Data_Row::GetClassData() const { return &_class_data_; }

void Data_Row::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Data_Row *>(to)->MergeFrom(
      static_cast<const Data_Row &>(from));
}


void Data_Row::MergeFrom(const Data_Row& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rd.Data.Row)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Data_Row::CopyFrom(const Data_Row& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rd.Data.Row)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data_Row::IsInitialized() const {
  return true;
}

void Data_Row::InternalSwap(Data_Row* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Data_Row::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rd_2eproto_getter, &descriptor_table_rd_2eproto_once,
      file_level_metadata_rd_2eproto[10]);
}

// ===================================================================

class Data::_Internal {
 public:
};

Data::Data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  pt_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rd.Data)
}
Data::Data(const Data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      pt_(from.pt_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:rd.Data)
}

inline void Data::SharedCtor() {
}

Data::~Data() {
  // @@protoc_insertion_point(destructor:rd.Data)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Data::ArenaDtor(void* object) {
  Data* _this = reinterpret_cast< Data* >(object);
  (void)_this;
}
void Data::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Data::Clear() {
// @@protoc_insertion_point(message_clear_start:rd.Data)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pt_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .rd.Data.Row pt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pt(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Data::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rd.Data)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .rd.Data.Row pt = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pt_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_pt(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rd.Data)
  return target;
}

size_t Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rd.Data)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rd.Data.Row pt = 1;
  total_size += 1UL * this->_internal_pt_size();
  for (const auto& msg : this->pt_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Data::GetClassData() const { return &_class_data_; }

void Data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Data *>(to)->MergeFrom(
      static_cast<const Data &>(from));
}


void Data::MergeFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rd.Data)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  pt_.MergeFrom(from.pt_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Data::CopyFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rd.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data::IsInitialized() const {
  return true;
}

void Data::InternalSwap(Data* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  pt_.InternalSwap(&other->pt_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Data::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_rd_2eproto_getter, &descriptor_table_rd_2eproto_once,
      file_level_metadata_rd_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace rd
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::rd::SApaPoint_I* Arena::CreateMaybeMessage< ::rd::SApaPoint_I >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rd::SApaPoint_I >(arena);
}
template<> PROTOBUF_NOINLINE ::rd::SApaPSRect* Arena::CreateMaybeMessage< ::rd::SApaPSRect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rd::SApaPSRect >(arena);
}
template<> PROTOBUF_NOINLINE ::rd::Image* Arena::CreateMaybeMessage< ::rd::Image >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rd::Image >(arena);
}
template<> PROTOBUF_NOINLINE ::rd::SApaPSInfo* Arena::CreateMaybeMessage< ::rd::SApaPSInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rd::SApaPSInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::rd::QuadParkingSlots* Arena::CreateMaybeMessage< ::rd::QuadParkingSlots >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rd::QuadParkingSlots >(arena);
}
template<> PROTOBUF_NOINLINE ::rd::Header* Arena::CreateMaybeMessage< ::rd::Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rd::Header >(arena);
}
template<> PROTOBUF_NOINLINE ::rd::Time* Arena::CreateMaybeMessage< ::rd::Time >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rd::Time >(arena);
}
template<> PROTOBUF_NOINLINE ::rd::QuadParkingSlot* Arena::CreateMaybeMessage< ::rd::QuadParkingSlot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rd::QuadParkingSlot >(arena);
}
template<> PROTOBUF_NOINLINE ::rd::Point2f* Arena::CreateMaybeMessage< ::rd::Point2f >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rd::Point2f >(arena);
}
template<> PROTOBUF_NOINLINE ::rd::ApproxBoxPoints* Arena::CreateMaybeMessage< ::rd::ApproxBoxPoints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rd::ApproxBoxPoints >(arena);
}
template<> PROTOBUF_NOINLINE ::rd::Data_Row* Arena::CreateMaybeMessage< ::rd::Data_Row >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rd::Data_Row >(arena);
}
template<> PROTOBUF_NOINLINE ::rd::Data* Arena::CreateMaybeMessage< ::rd::Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rd::Data >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
