// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sen.proto

#include "sen.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace sen {
constexpr Point3D::Point3D(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0){}
struct Point3DDefaultTypeInternal {
  constexpr Point3DDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Point3DDefaultTypeInternal() {}
  union {
    Point3D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Point3DDefaultTypeInternal _Point3D_default_instance_;
constexpr IMUData::IMUData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : acc_(nullptr)
  , gyro_(nullptr){}
struct IMUDataDefaultTypeInternal {
  constexpr IMUDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IMUDataDefaultTypeInternal() {}
  union {
    IMUData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IMUDataDefaultTypeInternal _IMUData_default_instance_;
constexpr GNSSData::GNSSData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : std_(nullptr)
  , lat_(0)
  , lon_(0)
  , height_(0)
  , quality_(0){}
struct GNSSDataDefaultTypeInternal {
  constexpr GNSSDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GNSSDataDefaultTypeInternal() {}
  union {
    GNSSData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GNSSDataDefaultTypeInternal _GNSSData_default_instance_;
constexpr INSData::INSData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : euler_rpy_(nullptr)
  , velocity_(nullptr)
  , lat_(0)
  , lon_(0)
  , alt_(0)
  , quality_(0){}
struct INSDataDefaultTypeInternal {
  constexpr INSDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~INSDataDefaultTypeInternal() {}
  union {
    INSData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT INSDataDefaultTypeInternal _INSData_default_instance_;
constexpr DualAntennaData::DualAntennaData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : heading_(0)
  , heading_std_(0)
  , quality_(0){}
struct DualAntennaDataDefaultTypeInternal {
  constexpr DualAntennaDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DualAntennaDataDefaultTypeInternal() {}
  union {
    DualAntennaData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DualAntennaDataDefaultTypeInternal _DualAntennaData_default_instance_;
}  // namespace sen
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sen_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_sen_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sen_2eproto = nullptr;

const uint32_t TableStruct_sen_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::sen::Point3D, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::sen::Point3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sen::Point3D, x_),
  PROTOBUF_FIELD_OFFSET(::sen::Point3D, y_),
  PROTOBUF_FIELD_OFFSET(::sen::Point3D, z_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::sen::IMUData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::sen::IMUData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sen::IMUData, acc_),
  PROTOBUF_FIELD_OFFSET(::sen::IMUData, gyro_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::sen::GNSSData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::sen::GNSSData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sen::GNSSData, lat_),
  PROTOBUF_FIELD_OFFSET(::sen::GNSSData, lon_),
  PROTOBUF_FIELD_OFFSET(::sen::GNSSData, height_),
  PROTOBUF_FIELD_OFFSET(::sen::GNSSData, quality_),
  PROTOBUF_FIELD_OFFSET(::sen::GNSSData, std_),
  1,
  2,
  3,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::sen::INSData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::sen::INSData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sen::INSData, quality_),
  PROTOBUF_FIELD_OFFSET(::sen::INSData, lat_),
  PROTOBUF_FIELD_OFFSET(::sen::INSData, lon_),
  PROTOBUF_FIELD_OFFSET(::sen::INSData, alt_),
  PROTOBUF_FIELD_OFFSET(::sen::INSData, euler_rpy_),
  PROTOBUF_FIELD_OFFSET(::sen::INSData, velocity_),
  5,
  2,
  3,
  4,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::sen::DualAntennaData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::sen::DualAntennaData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::sen::DualAntennaData, heading_),
  PROTOBUF_FIELD_OFFSET(::sen::DualAntennaData, heading_std_),
  PROTOBUF_FIELD_OFFSET(::sen::DualAntennaData, quality_),
  0,
  1,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::sen::Point3D)},
  { 12, 20, -1, sizeof(::sen::IMUData)},
  { 22, 33, -1, sizeof(::sen::GNSSData)},
  { 38, 50, -1, sizeof(::sen::INSData)},
  { 56, 65, -1, sizeof(::sen::DualAntennaData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sen::_Point3D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sen::_IMUData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sen::_GNSSData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sen::_INSData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sen::_DualAntennaData_default_instance_),
};

const char descriptor_table_protodef_sen_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tsen.proto\022\003sen\"K\n\007Point3D\022\016\n\001x\030\001 \001(\001H\000"
  "\210\001\001\022\016\n\001y\030\002 \001(\001H\001\210\001\001\022\016\n\001z\030\003 \001(\001H\002\210\001\001B\004\n\002_"
  "xB\004\n\002_yB\004\n\002_z\"[\n\007IMUData\022\036\n\003acc\030\001 \001(\0132\014."
  "sen.Point3DH\000\210\001\001\022\037\n\004gyro\030\002 \001(\0132\014.sen.Poi"
  "nt3DH\001\210\001\001B\006\n\004_accB\007\n\005_gyro\"\250\001\n\010GNSSData\022"
  "\020\n\003lat\030\001 \001(\001H\000\210\001\001\022\020\n\003lon\030\002 \001(\001H\001\210\001\001\022\023\n\006h"
  "eight\030\003 \001(\001H\002\210\001\001\022\024\n\007quality\030\004 \001(\005H\003\210\001\001\022\036"
  "\n\003std\030\005 \001(\0132\014.sen.Point3DH\004\210\001\001B\006\n\004_latB\006"
  "\n\004_lonB\t\n\007_heightB\n\n\010_qualityB\006\n\004_std\"\337\001"
  "\n\007INSData\022\024\n\007quality\030\001 \001(\005H\000\210\001\001\022\020\n\003lat\030\002"
  " \001(\001H\001\210\001\001\022\020\n\003lon\030\003 \001(\001H\002\210\001\001\022\020\n\003alt\030\004 \001(\001"
  "H\003\210\001\001\022$\n\teuler_rpy\030\005 \001(\0132\014.sen.Point3DH\004"
  "\210\001\001\022#\n\010velocity\030\006 \001(\0132\014.sen.Point3DH\005\210\001\001"
  "B\n\n\010_qualityB\006\n\004_latB\006\n\004_lonB\006\n\004_altB\014\n\n"
  "_euler_rpyB\013\n\t_velocity\"\177\n\017DualAntennaDa"
  "ta\022\024\n\007heading\030\001 \001(\001H\000\210\001\001\022\030\n\013heading_std\030"
  "\002 \001(\001H\001\210\001\001\022\024\n\007quality\030\003 \001(\005H\002\210\001\001B\n\n\010_hea"
  "dingB\016\n\014_heading_stdB\n\n\010_qualityb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sen_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sen_2eproto = {
  false, false, 720, descriptor_table_protodef_sen_2eproto, "sen.proto", 
  &descriptor_table_sen_2eproto_once, nullptr, 0, 5,
  schemas, file_default_instances, TableStruct_sen_2eproto::offsets,
  file_level_metadata_sen_2eproto, file_level_enum_descriptors_sen_2eproto, file_level_service_descriptors_sen_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_sen_2eproto_getter() {
  return &descriptor_table_sen_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_sen_2eproto(&descriptor_table_sen_2eproto);
namespace sen {

// ===================================================================

class Point3D::_Internal {
 public:
  using HasBits = decltype(std::declval<Point3D>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_z(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

Point3D::Point3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sen.Point3D)
}
Point3D::Point3D(const Point3D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:sen.Point3D)
}

inline void Point3D::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Point3D::~Point3D() {
  // @@protoc_insertion_point(destructor:sen.Point3D)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Point3D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Point3D::ArenaDtor(void* object) {
  Point3D* _this = reinterpret_cast< Point3D* >(object);
  (void)_this;
}
void Point3D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point3D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Point3D::Clear() {
// @@protoc_insertion_point(message_clear_start:sen.Point3D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&x_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point3D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_z(&has_bits);
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Point3D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sen.Point3D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional double x = 1;
  if (_internal_has_x()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // optional double y = 2;
  if (_internal_has_y()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // optional double z = 3;
  if (_internal_has_z()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sen.Point3D)
  return target;
}

size_t Point3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sen.Point3D)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double z = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Point3D::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Point3D::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Point3D::GetClassData() const { return &_class_data_; }

void Point3D::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Point3D *>(to)->MergeFrom(
      static_cast<const Point3D &>(from));
}


void Point3D::MergeFrom(const Point3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sen.Point3D)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Point3D::CopyFrom(const Point3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sen.Point3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point3D::IsInitialized() const {
  return true;
}

void Point3D::InternalSwap(Point3D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point3D, z_)
      + sizeof(Point3D::z_)
      - PROTOBUF_FIELD_OFFSET(Point3D, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point3D::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sen_2eproto_getter, &descriptor_table_sen_2eproto_once,
      file_level_metadata_sen_2eproto[0]);
}

// ===================================================================

class IMUData::_Internal {
 public:
  using HasBits = decltype(std::declval<IMUData>()._has_bits_);
  static const ::sen::Point3D& acc(const IMUData* msg);
  static void set_has_acc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sen::Point3D& gyro(const IMUData* msg);
  static void set_has_gyro(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::sen::Point3D&
IMUData::_Internal::acc(const IMUData* msg) {
  return *msg->acc_;
}
const ::sen::Point3D&
IMUData::_Internal::gyro(const IMUData* msg) {
  return *msg->gyro_;
}
IMUData::IMUData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sen.IMUData)
}
IMUData::IMUData(const IMUData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_acc()) {
    acc_ = new ::sen::Point3D(*from.acc_);
  } else {
    acc_ = nullptr;
  }
  if (from._internal_has_gyro()) {
    gyro_ = new ::sen::Point3D(*from.gyro_);
  } else {
    gyro_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sen.IMUData)
}

inline void IMUData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&acc_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&gyro_) -
    reinterpret_cast<char*>(&acc_)) + sizeof(gyro_));
}

IMUData::~IMUData() {
  // @@protoc_insertion_point(destructor:sen.IMUData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IMUData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete acc_;
  if (this != internal_default_instance()) delete gyro_;
}

void IMUData::ArenaDtor(void* object) {
  IMUData* _this = reinterpret_cast< IMUData* >(object);
  (void)_this;
}
void IMUData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IMUData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IMUData::Clear() {
// @@protoc_insertion_point(message_clear_start:sen.IMUData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(acc_ != nullptr);
      acc_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(gyro_ != nullptr);
      gyro_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IMUData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .sen.Point3D acc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_acc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sen.Point3D gyro = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_gyro(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IMUData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sen.IMUData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .sen.Point3D acc = 1;
  if (_internal_has_acc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::acc(this), target, stream);
  }

  // optional .sen.Point3D gyro = 2;
  if (_internal_has_gyro()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::gyro(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sen.IMUData)
  return target;
}

size_t IMUData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sen.IMUData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .sen.Point3D acc = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *acc_);
    }

    // optional .sen.Point3D gyro = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *gyro_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IMUData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IMUData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IMUData::GetClassData() const { return &_class_data_; }

void IMUData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IMUData *>(to)->MergeFrom(
      static_cast<const IMUData &>(from));
}


void IMUData::MergeFrom(const IMUData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sen.IMUData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_acc()->::sen::Point3D::MergeFrom(from._internal_acc());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_gyro()->::sen::Point3D::MergeFrom(from._internal_gyro());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IMUData::CopyFrom(const IMUData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sen.IMUData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMUData::IsInitialized() const {
  return true;
}

void IMUData::InternalSwap(IMUData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IMUData, gyro_)
      + sizeof(IMUData::gyro_)
      - PROTOBUF_FIELD_OFFSET(IMUData, acc_)>(
          reinterpret_cast<char*>(&acc_),
          reinterpret_cast<char*>(&other->acc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IMUData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sen_2eproto_getter, &descriptor_table_sen_2eproto_once,
      file_level_metadata_sen_2eproto[1]);
}

// ===================================================================

class GNSSData::_Internal {
 public:
  using HasBits = decltype(std::declval<GNSSData>()._has_bits_);
  static void set_has_lat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lon(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::sen::Point3D& std(const GNSSData* msg);
  static void set_has_std(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::sen::Point3D&
GNSSData::_Internal::std(const GNSSData* msg) {
  return *msg->std_;
}
GNSSData::GNSSData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sen.GNSSData)
}
GNSSData::GNSSData(const GNSSData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_std()) {
    std_ = new ::sen::Point3D(*from.std_);
  } else {
    std_ = nullptr;
  }
  ::memcpy(&lat_, &from.lat_,
    static_cast<size_t>(reinterpret_cast<char*>(&quality_) -
    reinterpret_cast<char*>(&lat_)) + sizeof(quality_));
  // @@protoc_insertion_point(copy_constructor:sen.GNSSData)
}

inline void GNSSData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&std_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&quality_) -
    reinterpret_cast<char*>(&std_)) + sizeof(quality_));
}

GNSSData::~GNSSData() {
  // @@protoc_insertion_point(destructor:sen.GNSSData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GNSSData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete std_;
}

void GNSSData::ArenaDtor(void* object) {
  GNSSData* _this = reinterpret_cast< GNSSData* >(object);
  (void)_this;
}
void GNSSData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GNSSData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GNSSData::Clear() {
// @@protoc_insertion_point(message_clear_start:sen.GNSSData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(std_ != nullptr);
    std_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&lat_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&quality_) -
        reinterpret_cast<char*>(&lat_)) + sizeof(quality_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GNSSData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double lat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_lat(&has_bits);
          lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double lon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_lon(&has_bits);
          lon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 quality = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_quality(&has_bits);
          quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sen.Point3D std = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_std(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GNSSData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sen.GNSSData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional double lat = 1;
  if (_internal_has_lat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_lat(), target);
  }

  // optional double lon = 2;
  if (_internal_has_lon()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_lon(), target);
  }

  // optional double height = 3;
  if (_internal_has_height()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_height(), target);
  }

  // optional int32 quality = 4;
  if (_internal_has_quality()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_quality(), target);
  }

  // optional .sen.Point3D std = 5;
  if (_internal_has_std()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::std(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sen.GNSSData)
  return target;
}

size_t GNSSData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sen.GNSSData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .sen.Point3D std = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *std_);
    }

    // optional double lat = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double lon = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double height = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional int32 quality = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_quality());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GNSSData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GNSSData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GNSSData::GetClassData() const { return &_class_data_; }

void GNSSData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GNSSData *>(to)->MergeFrom(
      static_cast<const GNSSData &>(from));
}


void GNSSData::MergeFrom(const GNSSData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sen.GNSSData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_std()->::sen::Point3D::MergeFrom(from._internal_std());
    }
    if (cached_has_bits & 0x00000002u) {
      lat_ = from.lat_;
    }
    if (cached_has_bits & 0x00000004u) {
      lon_ = from.lon_;
    }
    if (cached_has_bits & 0x00000008u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000010u) {
      quality_ = from.quality_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GNSSData::CopyFrom(const GNSSData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sen.GNSSData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GNSSData::IsInitialized() const {
  return true;
}

void GNSSData::InternalSwap(GNSSData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GNSSData, quality_)
      + sizeof(GNSSData::quality_)
      - PROTOBUF_FIELD_OFFSET(GNSSData, std_)>(
          reinterpret_cast<char*>(&std_),
          reinterpret_cast<char*>(&other->std_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GNSSData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sen_2eproto_getter, &descriptor_table_sen_2eproto_once,
      file_level_metadata_sen_2eproto[2]);
}

// ===================================================================

class INSData::_Internal {
 public:
  using HasBits = decltype(std::declval<INSData>()._has_bits_);
  static void set_has_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_lat(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_lon(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_alt(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::sen::Point3D& euler_rpy(const INSData* msg);
  static void set_has_euler_rpy(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::sen::Point3D& velocity(const INSData* msg);
  static void set_has_velocity(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::sen::Point3D&
INSData::_Internal::euler_rpy(const INSData* msg) {
  return *msg->euler_rpy_;
}
const ::sen::Point3D&
INSData::_Internal::velocity(const INSData* msg) {
  return *msg->velocity_;
}
INSData::INSData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sen.INSData)
}
INSData::INSData(const INSData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_euler_rpy()) {
    euler_rpy_ = new ::sen::Point3D(*from.euler_rpy_);
  } else {
    euler_rpy_ = nullptr;
  }
  if (from._internal_has_velocity()) {
    velocity_ = new ::sen::Point3D(*from.velocity_);
  } else {
    velocity_ = nullptr;
  }
  ::memcpy(&lat_, &from.lat_,
    static_cast<size_t>(reinterpret_cast<char*>(&quality_) -
    reinterpret_cast<char*>(&lat_)) + sizeof(quality_));
  // @@protoc_insertion_point(copy_constructor:sen.INSData)
}

inline void INSData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&euler_rpy_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&quality_) -
    reinterpret_cast<char*>(&euler_rpy_)) + sizeof(quality_));
}

INSData::~INSData() {
  // @@protoc_insertion_point(destructor:sen.INSData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void INSData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete euler_rpy_;
  if (this != internal_default_instance()) delete velocity_;
}

void INSData::ArenaDtor(void* object) {
  INSData* _this = reinterpret_cast< INSData* >(object);
  (void)_this;
}
void INSData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void INSData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void INSData::Clear() {
// @@protoc_insertion_point(message_clear_start:sen.INSData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(euler_rpy_ != nullptr);
      euler_rpy_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(velocity_ != nullptr);
      velocity_->Clear();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&lat_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&quality_) -
        reinterpret_cast<char*>(&lat_)) + sizeof(quality_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* INSData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 quality = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_quality(&has_bits);
          quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double lat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_lat(&has_bits);
          lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double lon = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_lon(&has_bits);
          lon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double alt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_alt(&has_bits);
          alt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional .sen.Point3D euler_rpy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_euler_rpy(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .sen.Point3D velocity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* INSData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sen.INSData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 quality = 1;
  if (_internal_has_quality()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_quality(), target);
  }

  // optional double lat = 2;
  if (_internal_has_lat()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_lat(), target);
  }

  // optional double lon = 3;
  if (_internal_has_lon()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_lon(), target);
  }

  // optional double alt = 4;
  if (_internal_has_alt()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_alt(), target);
  }

  // optional .sen.Point3D euler_rpy = 5;
  if (_internal_has_euler_rpy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::euler_rpy(this), target, stream);
  }

  // optional .sen.Point3D velocity = 6;
  if (_internal_has_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::velocity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sen.INSData)
  return target;
}

size_t INSData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sen.INSData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .sen.Point3D euler_rpy = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *euler_rpy_);
    }

    // optional .sen.Point3D velocity = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *velocity_);
    }

    // optional double lat = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double lon = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double alt = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional int32 quality = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_quality());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData INSData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    INSData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*INSData::GetClassData() const { return &_class_data_; }

void INSData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<INSData *>(to)->MergeFrom(
      static_cast<const INSData &>(from));
}


void INSData::MergeFrom(const INSData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sen.INSData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_euler_rpy()->::sen::Point3D::MergeFrom(from._internal_euler_rpy());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_velocity()->::sen::Point3D::MergeFrom(from._internal_velocity());
    }
    if (cached_has_bits & 0x00000004u) {
      lat_ = from.lat_;
    }
    if (cached_has_bits & 0x00000008u) {
      lon_ = from.lon_;
    }
    if (cached_has_bits & 0x00000010u) {
      alt_ = from.alt_;
    }
    if (cached_has_bits & 0x00000020u) {
      quality_ = from.quality_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void INSData::CopyFrom(const INSData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sen.INSData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool INSData::IsInitialized() const {
  return true;
}

void INSData::InternalSwap(INSData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(INSData, quality_)
      + sizeof(INSData::quality_)
      - PROTOBUF_FIELD_OFFSET(INSData, euler_rpy_)>(
          reinterpret_cast<char*>(&euler_rpy_),
          reinterpret_cast<char*>(&other->euler_rpy_));
}

::PROTOBUF_NAMESPACE_ID::Metadata INSData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sen_2eproto_getter, &descriptor_table_sen_2eproto_once,
      file_level_metadata_sen_2eproto[3]);
}

// ===================================================================

class DualAntennaData::_Internal {
 public:
  using HasBits = decltype(std::declval<DualAntennaData>()._has_bits_);
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_heading_std(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_quality(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

DualAntennaData::DualAntennaData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sen.DualAntennaData)
}
DualAntennaData::DualAntennaData(const DualAntennaData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&heading_, &from.heading_,
    static_cast<size_t>(reinterpret_cast<char*>(&quality_) -
    reinterpret_cast<char*>(&heading_)) + sizeof(quality_));
  // @@protoc_insertion_point(copy_constructor:sen.DualAntennaData)
}

inline void DualAntennaData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&heading_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&quality_) -
    reinterpret_cast<char*>(&heading_)) + sizeof(quality_));
}

DualAntennaData::~DualAntennaData() {
  // @@protoc_insertion_point(destructor:sen.DualAntennaData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DualAntennaData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DualAntennaData::ArenaDtor(void* object) {
  DualAntennaData* _this = reinterpret_cast< DualAntennaData* >(object);
  (void)_this;
}
void DualAntennaData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DualAntennaData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DualAntennaData::Clear() {
// @@protoc_insertion_point(message_clear_start:sen.DualAntennaData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&heading_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&quality_) -
        reinterpret_cast<char*>(&heading_)) + sizeof(quality_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DualAntennaData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double heading = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_heading(&has_bits);
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double heading_std = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_heading_std(&has_bits);
          heading_std_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional int32 quality = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_quality(&has_bits);
          quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DualAntennaData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sen.DualAntennaData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional double heading = 1;
  if (_internal_has_heading()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_heading(), target);
  }

  // optional double heading_std = 2;
  if (_internal_has_heading_std()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_heading_std(), target);
  }

  // optional int32 quality = 3;
  if (_internal_has_quality()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_quality(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sen.DualAntennaData)
  return target;
}

size_t DualAntennaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sen.DualAntennaData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional double heading = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double heading_std = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional int32 quality = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_quality());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DualAntennaData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DualAntennaData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DualAntennaData::GetClassData() const { return &_class_data_; }

void DualAntennaData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DualAntennaData *>(to)->MergeFrom(
      static_cast<const DualAntennaData &>(from));
}


void DualAntennaData::MergeFrom(const DualAntennaData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sen.DualAntennaData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      heading_ = from.heading_;
    }
    if (cached_has_bits & 0x00000002u) {
      heading_std_ = from.heading_std_;
    }
    if (cached_has_bits & 0x00000004u) {
      quality_ = from.quality_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DualAntennaData::CopyFrom(const DualAntennaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sen.DualAntennaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DualAntennaData::IsInitialized() const {
  return true;
}

void DualAntennaData::InternalSwap(DualAntennaData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DualAntennaData, quality_)
      + sizeof(DualAntennaData::quality_)
      - PROTOBUF_FIELD_OFFSET(DualAntennaData, heading_)>(
          reinterpret_cast<char*>(&heading_),
          reinterpret_cast<char*>(&other->heading_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DualAntennaData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_sen_2eproto_getter, &descriptor_table_sen_2eproto_once,
      file_level_metadata_sen_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace sen
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sen::Point3D* Arena::CreateMaybeMessage< ::sen::Point3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sen::Point3D >(arena);
}
template<> PROTOBUF_NOINLINE ::sen::IMUData* Arena::CreateMaybeMessage< ::sen::IMUData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sen::IMUData >(arena);
}
template<> PROTOBUF_NOINLINE ::sen::GNSSData* Arena::CreateMaybeMessage< ::sen::GNSSData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sen::GNSSData >(arena);
}
template<> PROTOBUF_NOINLINE ::sen::INSData* Arena::CreateMaybeMessage< ::sen::INSData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sen::INSData >(arena);
}
template<> PROTOBUF_NOINLINE ::sen::DualAntennaData* Arena::CreateMaybeMessage< ::sen::DualAntennaData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sen::DualAntennaData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
