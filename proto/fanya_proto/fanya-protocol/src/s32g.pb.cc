// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: s32g.proto

#include "s32g.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace s32g {
constexpr slotlabel::slotlabel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : targetslotlabel_(0){}
struct slotlabelDefaultTypeInternal {
  constexpr slotlabelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~slotlabelDefaultTypeInternal() {}
  union {
    slotlabel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT slotlabelDefaultTypeInternal _slotlabel_default_instance_;
constexpr apastatusreqMessage::apastatusreqMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : apastatusreq_(0)
{}
struct apastatusreqMessageDefaultTypeInternal {
  constexpr apastatusreqMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~apastatusreqMessageDefaultTypeInternal() {}
  union {
    apastatusreqMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT apastatusreqMessageDefaultTypeInternal _apastatusreqMessage_default_instance_;
}  // namespace s32g
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_s32g_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_s32g_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_s32g_2eproto = nullptr;

const uint32_t TableStruct_s32g_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::s32g::slotlabel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::s32g::slotlabel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::s32g::slotlabel, targetslotlabel_),
  0,
  PROTOBUF_FIELD_OFFSET(::s32g::apastatusreqMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::s32g::apastatusreqMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::s32g::apastatusreqMessage, apastatusreq_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, -1, sizeof(::s32g::slotlabel)},
  { 8, 15, -1, sizeof(::s32g::apastatusreqMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::s32g::_slotlabel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::s32g::_apastatusreqMessage_default_instance_),
};

const char descriptor_table_protodef_s32g_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ns32g.proto\022\004s32g\"=\n\tslotlabel\022\034\n\017targe"
  "tSlotLabel\030\001 \001(\005H\000\210\001\001B\022\n\020_targetSlotLabe"
  "l\"U\n\023apastatusreqMessage\022-\n\014apastatusreq"
  "\030\001 \001(\0162\022.s32g.apaStatusReqH\000\210\001\001B\017\n\r_apas"
  "tatusreq*v\n\014apaStatusReq\022\007\n\003off\020\000\022\013\n\007sta"
  "ndby\020\001\022\020\n\014Search_phase\020\002\022\r\n\tExit_park\020\003\022"
  "\n\n\006enable\020\004\022\014\n\010Guidance\020\005\022\n\n\006Finish\020\006\022\t\n"
  "\005error\020\007b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_s32g_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_s32g_2eproto = {
  false, false, 296, descriptor_table_protodef_s32g_2eproto, "s32g.proto", 
  &descriptor_table_s32g_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_s32g_2eproto::offsets,
  file_level_metadata_s32g_2eproto, file_level_enum_descriptors_s32g_2eproto, file_level_service_descriptors_s32g_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_s32g_2eproto_getter() {
  return &descriptor_table_s32g_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_s32g_2eproto(&descriptor_table_s32g_2eproto);
namespace s32g {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* apaStatusReq_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_s32g_2eproto);
  return file_level_enum_descriptors_s32g_2eproto[0];
}
bool apaStatusReq_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class slotlabel::_Internal {
 public:
  using HasBits = decltype(std::declval<slotlabel>()._has_bits_);
  static void set_has_targetslotlabel(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

slotlabel::slotlabel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:s32g.slotlabel)
}
slotlabel::slotlabel(const slotlabel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  targetslotlabel_ = from.targetslotlabel_;
  // @@protoc_insertion_point(copy_constructor:s32g.slotlabel)
}

inline void slotlabel::SharedCtor() {
targetslotlabel_ = 0;
}

slotlabel::~slotlabel() {
  // @@protoc_insertion_point(destructor:s32g.slotlabel)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void slotlabel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void slotlabel::ArenaDtor(void* object) {
  slotlabel* _this = reinterpret_cast< slotlabel* >(object);
  (void)_this;
}
void slotlabel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void slotlabel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void slotlabel::Clear() {
// @@protoc_insertion_point(message_clear_start:s32g.slotlabel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  targetslotlabel_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* slotlabel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 targetSlotLabel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_targetslotlabel(&has_bits);
          targetslotlabel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* slotlabel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:s32g.slotlabel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional int32 targetSlotLabel = 1;
  if (_internal_has_targetslotlabel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_targetslotlabel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s32g.slotlabel)
  return target;
}

size_t slotlabel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s32g.slotlabel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 targetSlotLabel = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_targetslotlabel());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData slotlabel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    slotlabel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*slotlabel::GetClassData() const { return &_class_data_; }

void slotlabel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<slotlabel *>(to)->MergeFrom(
      static_cast<const slotlabel &>(from));
}


void slotlabel::MergeFrom(const slotlabel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s32g.slotlabel)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_targetslotlabel()) {
    _internal_set_targetslotlabel(from._internal_targetslotlabel());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void slotlabel::CopyFrom(const slotlabel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s32g.slotlabel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool slotlabel::IsInitialized() const {
  return true;
}

void slotlabel::InternalSwap(slotlabel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(targetslotlabel_, other->targetslotlabel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata slotlabel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_s32g_2eproto_getter, &descriptor_table_s32g_2eproto_once,
      file_level_metadata_s32g_2eproto[0]);
}

// ===================================================================

class apastatusreqMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<apastatusreqMessage>()._has_bits_);
  static void set_has_apastatusreq(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

apastatusreqMessage::apastatusreqMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:s32g.apastatusreqMessage)
}
apastatusreqMessage::apastatusreqMessage(const apastatusreqMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  apastatusreq_ = from.apastatusreq_;
  // @@protoc_insertion_point(copy_constructor:s32g.apastatusreqMessage)
}

inline void apastatusreqMessage::SharedCtor() {
apastatusreq_ = 0;
}

apastatusreqMessage::~apastatusreqMessage() {
  // @@protoc_insertion_point(destructor:s32g.apastatusreqMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void apastatusreqMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void apastatusreqMessage::ArenaDtor(void* object) {
  apastatusreqMessage* _this = reinterpret_cast< apastatusreqMessage* >(object);
  (void)_this;
}
void apastatusreqMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void apastatusreqMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void apastatusreqMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:s32g.apastatusreqMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  apastatusreq_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* apastatusreqMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .s32g.apaStatusReq apastatusreq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_apastatusreq(static_cast<::s32g::apaStatusReq>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* apastatusreqMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:s32g.apastatusreqMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .s32g.apaStatusReq apastatusreq = 1;
  if (_internal_has_apastatusreq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_apastatusreq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:s32g.apastatusreqMessage)
  return target;
}

size_t apastatusreqMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:s32g.apastatusreqMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .s32g.apaStatusReq apastatusreq = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_apastatusreq());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData apastatusreqMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    apastatusreqMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*apastatusreqMessage::GetClassData() const { return &_class_data_; }

void apastatusreqMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<apastatusreqMessage *>(to)->MergeFrom(
      static_cast<const apastatusreqMessage &>(from));
}


void apastatusreqMessage::MergeFrom(const apastatusreqMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:s32g.apastatusreqMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_apastatusreq()) {
    _internal_set_apastatusreq(from._internal_apastatusreq());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void apastatusreqMessage::CopyFrom(const apastatusreqMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:s32g.apastatusreqMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool apastatusreqMessage::IsInitialized() const {
  return true;
}

void apastatusreqMessage::InternalSwap(apastatusreqMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(apastatusreq_, other->apastatusreq_);
}

::PROTOBUF_NAMESPACE_ID::Metadata apastatusreqMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_s32g_2eproto_getter, &descriptor_table_s32g_2eproto_once,
      file_level_metadata_s32g_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace s32g
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::s32g::slotlabel* Arena::CreateMaybeMessage< ::s32g::slotlabel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::s32g::slotlabel >(arena);
}
template<> PROTOBUF_NOINLINE ::s32g::apastatusreqMessage* Arena::CreateMaybeMessage< ::s32g::apastatusreqMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::s32g::apastatusreqMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
