// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aph.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_aph_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_aph_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_aph_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_aph_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_aph_2eproto;
namespace aph {
class apa_status;
struct apa_statusDefaultTypeInternal;
extern apa_statusDefaultTypeInternal _apa_status_default_instance_;
class target_slot;
struct target_slotDefaultTypeInternal;
extern target_slotDefaultTypeInternal _target_slot_default_instance_;
}  // namespace aph
PROTOBUF_NAMESPACE_OPEN
template<> ::aph::apa_status* Arena::CreateMaybeMessage<::aph::apa_status>(Arena*);
template<> ::aph::target_slot* Arena::CreateMaybeMessage<::aph::target_slot>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace aph {

enum ApaStatusType : int {
  APA_STATUS_OFF = 0,
  APA_STATUS_STANDBY = 1,
  APA_STATUS_SEARCHING = 2,
  APA_STATUS_EXIT_PARK = 3,
  APA_STATUS_ENABLE = 4,
  APA_STATUS_GUIDANCE = 5,
  APA_STATUS_FINISH = 6,
  APA_STATUS_ERROR = 7,
  APA_STATUS_PARKING = 8,
  APA_STATUS_RESERVED = 9,
  ApaStatusType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ApaStatusType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ApaStatusType_IsValid(int value);
constexpr ApaStatusType ApaStatusType_MIN = APA_STATUS_OFF;
constexpr ApaStatusType ApaStatusType_MAX = APA_STATUS_RESERVED;
constexpr int ApaStatusType_ARRAYSIZE = ApaStatusType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ApaStatusType_descriptor();
template<typename T>
inline const std::string& ApaStatusType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ApaStatusType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ApaStatusType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ApaStatusType_descriptor(), enum_t_value);
}
inline bool ApaStatusType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ApaStatusType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ApaStatusType>(
    ApaStatusType_descriptor(), name, value);
}
// ===================================================================

class apa_status final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aph.apa_status) */ {
 public:
  inline apa_status() : apa_status(nullptr) {}
  ~apa_status() override;
  explicit constexpr apa_status(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  apa_status(const apa_status& from);
  apa_status(apa_status&& from) noexcept
    : apa_status() {
    *this = ::std::move(from);
  }

  inline apa_status& operator=(const apa_status& from) {
    CopyFrom(from);
    return *this;
  }
  inline apa_status& operator=(apa_status&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const apa_status& default_instance() {
    return *internal_default_instance();
  }
  static inline const apa_status* internal_default_instance() {
    return reinterpret_cast<const apa_status*>(
               &_apa_status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(apa_status& a, apa_status& b) {
    a.Swap(&b);
  }
  inline void Swap(apa_status* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(apa_status* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  apa_status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<apa_status>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const apa_status& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const apa_status& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(apa_status* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aph.apa_status";
  }
  protected:
  explicit apa_status(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMCurrentApaStatusFieldNumber = 1,
  };
  // optional .aph.ApaStatusType m_current_apa_status = 1;
  bool has_m_current_apa_status() const;
  private:
  bool _internal_has_m_current_apa_status() const;
  public:
  void clear_m_current_apa_status();
  ::aph::ApaStatusType m_current_apa_status() const;
  void set_m_current_apa_status(::aph::ApaStatusType value);
  private:
  ::aph::ApaStatusType _internal_m_current_apa_status() const;
  void _internal_set_m_current_apa_status(::aph::ApaStatusType value);
  public:

  // @@protoc_insertion_point(class_scope:aph.apa_status)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int m_current_apa_status_;
  friend struct ::TableStruct_aph_2eproto;
};
// -------------------------------------------------------------------

class target_slot final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aph.target_slot) */ {
 public:
  inline target_slot() : target_slot(nullptr) {}
  ~target_slot() override;
  explicit constexpr target_slot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  target_slot(const target_slot& from);
  target_slot(target_slot&& from) noexcept
    : target_slot() {
    *this = ::std::move(from);
  }

  inline target_slot& operator=(const target_slot& from) {
    CopyFrom(from);
    return *this;
  }
  inline target_slot& operator=(target_slot&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const target_slot& default_instance() {
    return *internal_default_instance();
  }
  static inline const target_slot* internal_default_instance() {
    return reinterpret_cast<const target_slot*>(
               &_target_slot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(target_slot& a, target_slot& b) {
    a.Swap(&b);
  }
  inline void Swap(target_slot* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(target_slot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  target_slot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<target_slot>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const target_slot& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const target_slot& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(target_slot* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aph.target_slot";
  }
  protected:
  explicit target_slot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMUserSelectSlotLabelIdxFieldNumber = 1,
  };
  // optional int32 m_user_select_slot_label_idx = 1;
  bool has_m_user_select_slot_label_idx() const;
  private:
  bool _internal_has_m_user_select_slot_label_idx() const;
  public:
  void clear_m_user_select_slot_label_idx();
  int32_t m_user_select_slot_label_idx() const;
  void set_m_user_select_slot_label_idx(int32_t value);
  private:
  int32_t _internal_m_user_select_slot_label_idx() const;
  void _internal_set_m_user_select_slot_label_idx(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:aph.target_slot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t m_user_select_slot_label_idx_;
  friend struct ::TableStruct_aph_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// apa_status

// optional .aph.ApaStatusType m_current_apa_status = 1;
inline bool apa_status::_internal_has_m_current_apa_status() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool apa_status::has_m_current_apa_status() const {
  return _internal_has_m_current_apa_status();
}
inline void apa_status::clear_m_current_apa_status() {
  m_current_apa_status_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::aph::ApaStatusType apa_status::_internal_m_current_apa_status() const {
  return static_cast< ::aph::ApaStatusType >(m_current_apa_status_);
}
inline ::aph::ApaStatusType apa_status::m_current_apa_status() const {
  // @@protoc_insertion_point(field_get:aph.apa_status.m_current_apa_status)
  return _internal_m_current_apa_status();
}
inline void apa_status::_internal_set_m_current_apa_status(::aph::ApaStatusType value) {
  _has_bits_[0] |= 0x00000001u;
  m_current_apa_status_ = value;
}
inline void apa_status::set_m_current_apa_status(::aph::ApaStatusType value) {
  _internal_set_m_current_apa_status(value);
  // @@protoc_insertion_point(field_set:aph.apa_status.m_current_apa_status)
}

// -------------------------------------------------------------------

// target_slot

// optional int32 m_user_select_slot_label_idx = 1;
inline bool target_slot::_internal_has_m_user_select_slot_label_idx() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool target_slot::has_m_user_select_slot_label_idx() const {
  return _internal_has_m_user_select_slot_label_idx();
}
inline void target_slot::clear_m_user_select_slot_label_idx() {
  m_user_select_slot_label_idx_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t target_slot::_internal_m_user_select_slot_label_idx() const {
  return m_user_select_slot_label_idx_;
}
inline int32_t target_slot::m_user_select_slot_label_idx() const {
  // @@protoc_insertion_point(field_get:aph.target_slot.m_user_select_slot_label_idx)
  return _internal_m_user_select_slot_label_idx();
}
inline void target_slot::_internal_set_m_user_select_slot_label_idx(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  m_user_select_slot_label_idx_ = value;
}
inline void target_slot::set_m_user_select_slot_label_idx(int32_t value) {
  _internal_set_m_user_select_slot_label_idx(value);
  // @@protoc_insertion_point(field_set:aph.target_slot.m_user_select_slot_label_idx)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace aph

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::aph::ApaStatusType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::aph::ApaStatusType>() {
  return ::aph::ApaStatusType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_aph_2eproto
