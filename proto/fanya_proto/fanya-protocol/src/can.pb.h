// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: can.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_can_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_can_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_can_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_can_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_can_2eproto;
namespace can {
class VehicleCanData;
struct VehicleCanDataDefaultTypeInternal;
extern VehicleCanDataDefaultTypeInternal _VehicleCanData_default_instance_;
}  // namespace can
PROTOBUF_NAMESPACE_OPEN
template<> ::can::VehicleCanData* Arena::CreateMaybeMessage<::can::VehicleCanData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace can {

// ===================================================================

class VehicleCanData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:can.VehicleCanData) */ {
 public:
  inline VehicleCanData() : VehicleCanData(nullptr) {}
  ~VehicleCanData() override;
  explicit constexpr VehicleCanData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VehicleCanData(const VehicleCanData& from);
  VehicleCanData(VehicleCanData&& from) noexcept
    : VehicleCanData() {
    *this = ::std::move(from);
  }

  inline VehicleCanData& operator=(const VehicleCanData& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleCanData& operator=(VehicleCanData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VehicleCanData& default_instance() {
    return *internal_default_instance();
  }
  static inline const VehicleCanData* internal_default_instance() {
    return reinterpret_cast<const VehicleCanData*>(
               &_VehicleCanData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VehicleCanData& a, VehicleCanData& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleCanData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehicleCanData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VehicleCanData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VehicleCanData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VehicleCanData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VehicleCanData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleCanData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "can.VehicleCanData";
  }
  protected:
  explicit VehicleCanData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVehicleSpeedFieldNumber = 1,
    kGearStatusFieldNumber = 2,
    kWheelDirectionFieldNumber = 3,
    kWheelAngleFieldNumber = 4,
    kYawRateDirectionFieldNumber = 5,
    kYawRateFieldNumber = 6,
    kLateralAcceFieldNumber = 7,
    kLongitAcceFieldNumber = 8,
    kFLWheelSpeedInkphFieldNumber = 9,
    kFRwheelSpeedInkphFieldNumber = 10,
    kRLwheelSpeedInkphFieldNumber = 11,
    kRRwheelSpeedInkphFieldNumber = 12,
    kFLWheelSpeedPulseFieldNumber = 13,
    kFRwheelSpeedPulseFieldNumber = 14,
    kRLwheelSpeedPulseFieldNumber = 15,
    kRRwheelSpeedPulseFieldNumber = 16,
  };
  // optional float VehicleSpeed = 1;
  bool has_vehiclespeed() const;
  private:
  bool _internal_has_vehiclespeed() const;
  public:
  void clear_vehiclespeed();
  float vehiclespeed() const;
  void set_vehiclespeed(float value);
  private:
  float _internal_vehiclespeed() const;
  void _internal_set_vehiclespeed(float value);
  public:

  // optional int32 GearStatus = 2;
  bool has_gearstatus() const;
  private:
  bool _internal_has_gearstatus() const;
  public:
  void clear_gearstatus();
  int32_t gearstatus() const;
  void set_gearstatus(int32_t value);
  private:
  int32_t _internal_gearstatus() const;
  void _internal_set_gearstatus(int32_t value);
  public:

  // optional int32 WheelDirection = 3;
  bool has_wheeldirection() const;
  private:
  bool _internal_has_wheeldirection() const;
  public:
  void clear_wheeldirection();
  int32_t wheeldirection() const;
  void set_wheeldirection(int32_t value);
  private:
  int32_t _internal_wheeldirection() const;
  void _internal_set_wheeldirection(int32_t value);
  public:

  // optional int32 WheelAngle = 4;
  bool has_wheelangle() const;
  private:
  bool _internal_has_wheelangle() const;
  public:
  void clear_wheelangle();
  int32_t wheelangle() const;
  void set_wheelangle(int32_t value);
  private:
  int32_t _internal_wheelangle() const;
  void _internal_set_wheelangle(int32_t value);
  public:

  // optional int32 YawRateDirection = 5;
  bool has_yawratedirection() const;
  private:
  bool _internal_has_yawratedirection() const;
  public:
  void clear_yawratedirection();
  int32_t yawratedirection() const;
  void set_yawratedirection(int32_t value);
  private:
  int32_t _internal_yawratedirection() const;
  void _internal_set_yawratedirection(int32_t value);
  public:

  // optional int32 YawRate = 6;
  bool has_yawrate() const;
  private:
  bool _internal_has_yawrate() const;
  public:
  void clear_yawrate();
  int32_t yawrate() const;
  void set_yawrate(int32_t value);
  private:
  int32_t _internal_yawrate() const;
  void _internal_set_yawrate(int32_t value);
  public:

  // optional int32 LateralAcce = 7;
  bool has_lateralacce() const;
  private:
  bool _internal_has_lateralacce() const;
  public:
  void clear_lateralacce();
  int32_t lateralacce() const;
  void set_lateralacce(int32_t value);
  private:
  int32_t _internal_lateralacce() const;
  void _internal_set_lateralacce(int32_t value);
  public:

  // optional int32 LongitAcce = 8;
  bool has_longitacce() const;
  private:
  bool _internal_has_longitacce() const;
  public:
  void clear_longitacce();
  int32_t longitacce() const;
  void set_longitacce(int32_t value);
  private:
  int32_t _internal_longitacce() const;
  void _internal_set_longitacce(int32_t value);
  public:

  // optional int32 FLWheelSpeedInkph = 9;
  bool has_flwheelspeedinkph() const;
  private:
  bool _internal_has_flwheelspeedinkph() const;
  public:
  void clear_flwheelspeedinkph();
  int32_t flwheelspeedinkph() const;
  void set_flwheelspeedinkph(int32_t value);
  private:
  int32_t _internal_flwheelspeedinkph() const;
  void _internal_set_flwheelspeedinkph(int32_t value);
  public:

  // optional int32 FRwheelSpeedInkph = 10;
  bool has_frwheelspeedinkph() const;
  private:
  bool _internal_has_frwheelspeedinkph() const;
  public:
  void clear_frwheelspeedinkph();
  int32_t frwheelspeedinkph() const;
  void set_frwheelspeedinkph(int32_t value);
  private:
  int32_t _internal_frwheelspeedinkph() const;
  void _internal_set_frwheelspeedinkph(int32_t value);
  public:

  // optional int32 RLwheelSpeedInkph = 11;
  bool has_rlwheelspeedinkph() const;
  private:
  bool _internal_has_rlwheelspeedinkph() const;
  public:
  void clear_rlwheelspeedinkph();
  int32_t rlwheelspeedinkph() const;
  void set_rlwheelspeedinkph(int32_t value);
  private:
  int32_t _internal_rlwheelspeedinkph() const;
  void _internal_set_rlwheelspeedinkph(int32_t value);
  public:

  // optional int32 RRwheelSpeedInkph = 12;
  bool has_rrwheelspeedinkph() const;
  private:
  bool _internal_has_rrwheelspeedinkph() const;
  public:
  void clear_rrwheelspeedinkph();
  int32_t rrwheelspeedinkph() const;
  void set_rrwheelspeedinkph(int32_t value);
  private:
  int32_t _internal_rrwheelspeedinkph() const;
  void _internal_set_rrwheelspeedinkph(int32_t value);
  public:

  // optional int32 FLWheelSpeedPulse = 13;
  bool has_flwheelspeedpulse() const;
  private:
  bool _internal_has_flwheelspeedpulse() const;
  public:
  void clear_flwheelspeedpulse();
  int32_t flwheelspeedpulse() const;
  void set_flwheelspeedpulse(int32_t value);
  private:
  int32_t _internal_flwheelspeedpulse() const;
  void _internal_set_flwheelspeedpulse(int32_t value);
  public:

  // optional int32 FRwheelSpeedPulse = 14;
  bool has_frwheelspeedpulse() const;
  private:
  bool _internal_has_frwheelspeedpulse() const;
  public:
  void clear_frwheelspeedpulse();
  int32_t frwheelspeedpulse() const;
  void set_frwheelspeedpulse(int32_t value);
  private:
  int32_t _internal_frwheelspeedpulse() const;
  void _internal_set_frwheelspeedpulse(int32_t value);
  public:

  // optional int32 RLwheelSpeedPulse = 15;
  bool has_rlwheelspeedpulse() const;
  private:
  bool _internal_has_rlwheelspeedpulse() const;
  public:
  void clear_rlwheelspeedpulse();
  int32_t rlwheelspeedpulse() const;
  void set_rlwheelspeedpulse(int32_t value);
  private:
  int32_t _internal_rlwheelspeedpulse() const;
  void _internal_set_rlwheelspeedpulse(int32_t value);
  public:

  // optional int32 RRwheelSpeedPulse = 16;
  bool has_rrwheelspeedpulse() const;
  private:
  bool _internal_has_rrwheelspeedpulse() const;
  public:
  void clear_rrwheelspeedpulse();
  int32_t rrwheelspeedpulse() const;
  void set_rrwheelspeedpulse(int32_t value);
  private:
  int32_t _internal_rrwheelspeedpulse() const;
  void _internal_set_rrwheelspeedpulse(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:can.VehicleCanData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float vehiclespeed_;
  int32_t gearstatus_;
  int32_t wheeldirection_;
  int32_t wheelangle_;
  int32_t yawratedirection_;
  int32_t yawrate_;
  int32_t lateralacce_;
  int32_t longitacce_;
  int32_t flwheelspeedinkph_;
  int32_t frwheelspeedinkph_;
  int32_t rlwheelspeedinkph_;
  int32_t rrwheelspeedinkph_;
  int32_t flwheelspeedpulse_;
  int32_t frwheelspeedpulse_;
  int32_t rlwheelspeedpulse_;
  int32_t rrwheelspeedpulse_;
  friend struct ::TableStruct_can_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VehicleCanData

// optional float VehicleSpeed = 1;
inline bool VehicleCanData::_internal_has_vehiclespeed() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VehicleCanData::has_vehiclespeed() const {
  return _internal_has_vehiclespeed();
}
inline void VehicleCanData::clear_vehiclespeed() {
  vehiclespeed_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float VehicleCanData::_internal_vehiclespeed() const {
  return vehiclespeed_;
}
inline float VehicleCanData::vehiclespeed() const {
  // @@protoc_insertion_point(field_get:can.VehicleCanData.VehicleSpeed)
  return _internal_vehiclespeed();
}
inline void VehicleCanData::_internal_set_vehiclespeed(float value) {
  _has_bits_[0] |= 0x00000001u;
  vehiclespeed_ = value;
}
inline void VehicleCanData::set_vehiclespeed(float value) {
  _internal_set_vehiclespeed(value);
  // @@protoc_insertion_point(field_set:can.VehicleCanData.VehicleSpeed)
}

// optional int32 GearStatus = 2;
inline bool VehicleCanData::_internal_has_gearstatus() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VehicleCanData::has_gearstatus() const {
  return _internal_has_gearstatus();
}
inline void VehicleCanData::clear_gearstatus() {
  gearstatus_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t VehicleCanData::_internal_gearstatus() const {
  return gearstatus_;
}
inline int32_t VehicleCanData::gearstatus() const {
  // @@protoc_insertion_point(field_get:can.VehicleCanData.GearStatus)
  return _internal_gearstatus();
}
inline void VehicleCanData::_internal_set_gearstatus(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  gearstatus_ = value;
}
inline void VehicleCanData::set_gearstatus(int32_t value) {
  _internal_set_gearstatus(value);
  // @@protoc_insertion_point(field_set:can.VehicleCanData.GearStatus)
}

// optional int32 WheelDirection = 3;
inline bool VehicleCanData::_internal_has_wheeldirection() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool VehicleCanData::has_wheeldirection() const {
  return _internal_has_wheeldirection();
}
inline void VehicleCanData::clear_wheeldirection() {
  wheeldirection_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t VehicleCanData::_internal_wheeldirection() const {
  return wheeldirection_;
}
inline int32_t VehicleCanData::wheeldirection() const {
  // @@protoc_insertion_point(field_get:can.VehicleCanData.WheelDirection)
  return _internal_wheeldirection();
}
inline void VehicleCanData::_internal_set_wheeldirection(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  wheeldirection_ = value;
}
inline void VehicleCanData::set_wheeldirection(int32_t value) {
  _internal_set_wheeldirection(value);
  // @@protoc_insertion_point(field_set:can.VehicleCanData.WheelDirection)
}

// optional int32 WheelAngle = 4;
inline bool VehicleCanData::_internal_has_wheelangle() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool VehicleCanData::has_wheelangle() const {
  return _internal_has_wheelangle();
}
inline void VehicleCanData::clear_wheelangle() {
  wheelangle_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t VehicleCanData::_internal_wheelangle() const {
  return wheelangle_;
}
inline int32_t VehicleCanData::wheelangle() const {
  // @@protoc_insertion_point(field_get:can.VehicleCanData.WheelAngle)
  return _internal_wheelangle();
}
inline void VehicleCanData::_internal_set_wheelangle(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  wheelangle_ = value;
}
inline void VehicleCanData::set_wheelangle(int32_t value) {
  _internal_set_wheelangle(value);
  // @@protoc_insertion_point(field_set:can.VehicleCanData.WheelAngle)
}

// optional int32 YawRateDirection = 5;
inline bool VehicleCanData::_internal_has_yawratedirection() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool VehicleCanData::has_yawratedirection() const {
  return _internal_has_yawratedirection();
}
inline void VehicleCanData::clear_yawratedirection() {
  yawratedirection_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t VehicleCanData::_internal_yawratedirection() const {
  return yawratedirection_;
}
inline int32_t VehicleCanData::yawratedirection() const {
  // @@protoc_insertion_point(field_get:can.VehicleCanData.YawRateDirection)
  return _internal_yawratedirection();
}
inline void VehicleCanData::_internal_set_yawratedirection(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  yawratedirection_ = value;
}
inline void VehicleCanData::set_yawratedirection(int32_t value) {
  _internal_set_yawratedirection(value);
  // @@protoc_insertion_point(field_set:can.VehicleCanData.YawRateDirection)
}

// optional int32 YawRate = 6;
inline bool VehicleCanData::_internal_has_yawrate() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool VehicleCanData::has_yawrate() const {
  return _internal_has_yawrate();
}
inline void VehicleCanData::clear_yawrate() {
  yawrate_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t VehicleCanData::_internal_yawrate() const {
  return yawrate_;
}
inline int32_t VehicleCanData::yawrate() const {
  // @@protoc_insertion_point(field_get:can.VehicleCanData.YawRate)
  return _internal_yawrate();
}
inline void VehicleCanData::_internal_set_yawrate(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  yawrate_ = value;
}
inline void VehicleCanData::set_yawrate(int32_t value) {
  _internal_set_yawrate(value);
  // @@protoc_insertion_point(field_set:can.VehicleCanData.YawRate)
}

// optional int32 LateralAcce = 7;
inline bool VehicleCanData::_internal_has_lateralacce() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool VehicleCanData::has_lateralacce() const {
  return _internal_has_lateralacce();
}
inline void VehicleCanData::clear_lateralacce() {
  lateralacce_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline int32_t VehicleCanData::_internal_lateralacce() const {
  return lateralacce_;
}
inline int32_t VehicleCanData::lateralacce() const {
  // @@protoc_insertion_point(field_get:can.VehicleCanData.LateralAcce)
  return _internal_lateralacce();
}
inline void VehicleCanData::_internal_set_lateralacce(int32_t value) {
  _has_bits_[0] |= 0x00000040u;
  lateralacce_ = value;
}
inline void VehicleCanData::set_lateralacce(int32_t value) {
  _internal_set_lateralacce(value);
  // @@protoc_insertion_point(field_set:can.VehicleCanData.LateralAcce)
}

// optional int32 LongitAcce = 8;
inline bool VehicleCanData::_internal_has_longitacce() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool VehicleCanData::has_longitacce() const {
  return _internal_has_longitacce();
}
inline void VehicleCanData::clear_longitacce() {
  longitacce_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline int32_t VehicleCanData::_internal_longitacce() const {
  return longitacce_;
}
inline int32_t VehicleCanData::longitacce() const {
  // @@protoc_insertion_point(field_get:can.VehicleCanData.LongitAcce)
  return _internal_longitacce();
}
inline void VehicleCanData::_internal_set_longitacce(int32_t value) {
  _has_bits_[0] |= 0x00000080u;
  longitacce_ = value;
}
inline void VehicleCanData::set_longitacce(int32_t value) {
  _internal_set_longitacce(value);
  // @@protoc_insertion_point(field_set:can.VehicleCanData.LongitAcce)
}

// optional int32 FLWheelSpeedInkph = 9;
inline bool VehicleCanData::_internal_has_flwheelspeedinkph() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool VehicleCanData::has_flwheelspeedinkph() const {
  return _internal_has_flwheelspeedinkph();
}
inline void VehicleCanData::clear_flwheelspeedinkph() {
  flwheelspeedinkph_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline int32_t VehicleCanData::_internal_flwheelspeedinkph() const {
  return flwheelspeedinkph_;
}
inline int32_t VehicleCanData::flwheelspeedinkph() const {
  // @@protoc_insertion_point(field_get:can.VehicleCanData.FLWheelSpeedInkph)
  return _internal_flwheelspeedinkph();
}
inline void VehicleCanData::_internal_set_flwheelspeedinkph(int32_t value) {
  _has_bits_[0] |= 0x00000100u;
  flwheelspeedinkph_ = value;
}
inline void VehicleCanData::set_flwheelspeedinkph(int32_t value) {
  _internal_set_flwheelspeedinkph(value);
  // @@protoc_insertion_point(field_set:can.VehicleCanData.FLWheelSpeedInkph)
}

// optional int32 FRwheelSpeedInkph = 10;
inline bool VehicleCanData::_internal_has_frwheelspeedinkph() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool VehicleCanData::has_frwheelspeedinkph() const {
  return _internal_has_frwheelspeedinkph();
}
inline void VehicleCanData::clear_frwheelspeedinkph() {
  frwheelspeedinkph_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline int32_t VehicleCanData::_internal_frwheelspeedinkph() const {
  return frwheelspeedinkph_;
}
inline int32_t VehicleCanData::frwheelspeedinkph() const {
  // @@protoc_insertion_point(field_get:can.VehicleCanData.FRwheelSpeedInkph)
  return _internal_frwheelspeedinkph();
}
inline void VehicleCanData::_internal_set_frwheelspeedinkph(int32_t value) {
  _has_bits_[0] |= 0x00000200u;
  frwheelspeedinkph_ = value;
}
inline void VehicleCanData::set_frwheelspeedinkph(int32_t value) {
  _internal_set_frwheelspeedinkph(value);
  // @@protoc_insertion_point(field_set:can.VehicleCanData.FRwheelSpeedInkph)
}

// optional int32 RLwheelSpeedInkph = 11;
inline bool VehicleCanData::_internal_has_rlwheelspeedinkph() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool VehicleCanData::has_rlwheelspeedinkph() const {
  return _internal_has_rlwheelspeedinkph();
}
inline void VehicleCanData::clear_rlwheelspeedinkph() {
  rlwheelspeedinkph_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline int32_t VehicleCanData::_internal_rlwheelspeedinkph() const {
  return rlwheelspeedinkph_;
}
inline int32_t VehicleCanData::rlwheelspeedinkph() const {
  // @@protoc_insertion_point(field_get:can.VehicleCanData.RLwheelSpeedInkph)
  return _internal_rlwheelspeedinkph();
}
inline void VehicleCanData::_internal_set_rlwheelspeedinkph(int32_t value) {
  _has_bits_[0] |= 0x00000400u;
  rlwheelspeedinkph_ = value;
}
inline void VehicleCanData::set_rlwheelspeedinkph(int32_t value) {
  _internal_set_rlwheelspeedinkph(value);
  // @@protoc_insertion_point(field_set:can.VehicleCanData.RLwheelSpeedInkph)
}

// optional int32 RRwheelSpeedInkph = 12;
inline bool VehicleCanData::_internal_has_rrwheelspeedinkph() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool VehicleCanData::has_rrwheelspeedinkph() const {
  return _internal_has_rrwheelspeedinkph();
}
inline void VehicleCanData::clear_rrwheelspeedinkph() {
  rrwheelspeedinkph_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline int32_t VehicleCanData::_internal_rrwheelspeedinkph() const {
  return rrwheelspeedinkph_;
}
inline int32_t VehicleCanData::rrwheelspeedinkph() const {
  // @@protoc_insertion_point(field_get:can.VehicleCanData.RRwheelSpeedInkph)
  return _internal_rrwheelspeedinkph();
}
inline void VehicleCanData::_internal_set_rrwheelspeedinkph(int32_t value) {
  _has_bits_[0] |= 0x00000800u;
  rrwheelspeedinkph_ = value;
}
inline void VehicleCanData::set_rrwheelspeedinkph(int32_t value) {
  _internal_set_rrwheelspeedinkph(value);
  // @@protoc_insertion_point(field_set:can.VehicleCanData.RRwheelSpeedInkph)
}

// optional int32 FLWheelSpeedPulse = 13;
inline bool VehicleCanData::_internal_has_flwheelspeedpulse() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool VehicleCanData::has_flwheelspeedpulse() const {
  return _internal_has_flwheelspeedpulse();
}
inline void VehicleCanData::clear_flwheelspeedpulse() {
  flwheelspeedpulse_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline int32_t VehicleCanData::_internal_flwheelspeedpulse() const {
  return flwheelspeedpulse_;
}
inline int32_t VehicleCanData::flwheelspeedpulse() const {
  // @@protoc_insertion_point(field_get:can.VehicleCanData.FLWheelSpeedPulse)
  return _internal_flwheelspeedpulse();
}
inline void VehicleCanData::_internal_set_flwheelspeedpulse(int32_t value) {
  _has_bits_[0] |= 0x00001000u;
  flwheelspeedpulse_ = value;
}
inline void VehicleCanData::set_flwheelspeedpulse(int32_t value) {
  _internal_set_flwheelspeedpulse(value);
  // @@protoc_insertion_point(field_set:can.VehicleCanData.FLWheelSpeedPulse)
}

// optional int32 FRwheelSpeedPulse = 14;
inline bool VehicleCanData::_internal_has_frwheelspeedpulse() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool VehicleCanData::has_frwheelspeedpulse() const {
  return _internal_has_frwheelspeedpulse();
}
inline void VehicleCanData::clear_frwheelspeedpulse() {
  frwheelspeedpulse_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline int32_t VehicleCanData::_internal_frwheelspeedpulse() const {
  return frwheelspeedpulse_;
}
inline int32_t VehicleCanData::frwheelspeedpulse() const {
  // @@protoc_insertion_point(field_get:can.VehicleCanData.FRwheelSpeedPulse)
  return _internal_frwheelspeedpulse();
}
inline void VehicleCanData::_internal_set_frwheelspeedpulse(int32_t value) {
  _has_bits_[0] |= 0x00002000u;
  frwheelspeedpulse_ = value;
}
inline void VehicleCanData::set_frwheelspeedpulse(int32_t value) {
  _internal_set_frwheelspeedpulse(value);
  // @@protoc_insertion_point(field_set:can.VehicleCanData.FRwheelSpeedPulse)
}

// optional int32 RLwheelSpeedPulse = 15;
inline bool VehicleCanData::_internal_has_rlwheelspeedpulse() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool VehicleCanData::has_rlwheelspeedpulse() const {
  return _internal_has_rlwheelspeedpulse();
}
inline void VehicleCanData::clear_rlwheelspeedpulse() {
  rlwheelspeedpulse_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline int32_t VehicleCanData::_internal_rlwheelspeedpulse() const {
  return rlwheelspeedpulse_;
}
inline int32_t VehicleCanData::rlwheelspeedpulse() const {
  // @@protoc_insertion_point(field_get:can.VehicleCanData.RLwheelSpeedPulse)
  return _internal_rlwheelspeedpulse();
}
inline void VehicleCanData::_internal_set_rlwheelspeedpulse(int32_t value) {
  _has_bits_[0] |= 0x00004000u;
  rlwheelspeedpulse_ = value;
}
inline void VehicleCanData::set_rlwheelspeedpulse(int32_t value) {
  _internal_set_rlwheelspeedpulse(value);
  // @@protoc_insertion_point(field_set:can.VehicleCanData.RLwheelSpeedPulse)
}

// optional int32 RRwheelSpeedPulse = 16;
inline bool VehicleCanData::_internal_has_rrwheelspeedpulse() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool VehicleCanData::has_rrwheelspeedpulse() const {
  return _internal_has_rrwheelspeedpulse();
}
inline void VehicleCanData::clear_rrwheelspeedpulse() {
  rrwheelspeedpulse_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline int32_t VehicleCanData::_internal_rrwheelspeedpulse() const {
  return rrwheelspeedpulse_;
}
inline int32_t VehicleCanData::rrwheelspeedpulse() const {
  // @@protoc_insertion_point(field_get:can.VehicleCanData.RRwheelSpeedPulse)
  return _internal_rrwheelspeedpulse();
}
inline void VehicleCanData::_internal_set_rrwheelspeedpulse(int32_t value) {
  _has_bits_[0] |= 0x00008000u;
  rrwheelspeedpulse_ = value;
}
inline void VehicleCanData::set_rrwheelspeedpulse(int32_t value) {
  _internal_set_rrwheelspeedpulse(value);
  // @@protoc_insertion_point(field_set:can.VehicleCanData.RRwheelSpeedPulse)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace can

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_can_2eproto
