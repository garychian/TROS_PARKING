// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: s32g.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_s32g_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_s32g_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_s32g_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_s32g_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_s32g_2eproto;
namespace s32g {
class apastatusreqMessage;
struct apastatusreqMessageDefaultTypeInternal;
extern apastatusreqMessageDefaultTypeInternal _apastatusreqMessage_default_instance_;
class slotlabel;
struct slotlabelDefaultTypeInternal;
extern slotlabelDefaultTypeInternal _slotlabel_default_instance_;
}  // namespace s32g
PROTOBUF_NAMESPACE_OPEN
template<> ::s32g::apastatusreqMessage* Arena::CreateMaybeMessage<::s32g::apastatusreqMessage>(Arena*);
template<> ::s32g::slotlabel* Arena::CreateMaybeMessage<::s32g::slotlabel>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace s32g {

enum apaStatusReq : int {
  off = 0,
  standby = 1,
  Search_phase = 2,
  Exit_park = 3,
  enable = 4,
  Guidance = 5,
  Finish = 6,
  error = 7,
  apaStatusReq_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  apaStatusReq_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool apaStatusReq_IsValid(int value);
constexpr apaStatusReq apaStatusReq_MIN = off;
constexpr apaStatusReq apaStatusReq_MAX = error;
constexpr int apaStatusReq_ARRAYSIZE = apaStatusReq_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* apaStatusReq_descriptor();
template<typename T>
inline const std::string& apaStatusReq_Name(T enum_t_value) {
  static_assert(::std::is_same<T, apaStatusReq>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function apaStatusReq_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    apaStatusReq_descriptor(), enum_t_value);
}
inline bool apaStatusReq_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, apaStatusReq* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<apaStatusReq>(
    apaStatusReq_descriptor(), name, value);
}
// ===================================================================

class slotlabel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:s32g.slotlabel) */ {
 public:
  inline slotlabel() : slotlabel(nullptr) {}
  ~slotlabel() override;
  explicit constexpr slotlabel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  slotlabel(const slotlabel& from);
  slotlabel(slotlabel&& from) noexcept
    : slotlabel() {
    *this = ::std::move(from);
  }

  inline slotlabel& operator=(const slotlabel& from) {
    CopyFrom(from);
    return *this;
  }
  inline slotlabel& operator=(slotlabel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const slotlabel& default_instance() {
    return *internal_default_instance();
  }
  static inline const slotlabel* internal_default_instance() {
    return reinterpret_cast<const slotlabel*>(
               &_slotlabel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(slotlabel& a, slotlabel& b) {
    a.Swap(&b);
  }
  inline void Swap(slotlabel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(slotlabel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  slotlabel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<slotlabel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const slotlabel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const slotlabel& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(slotlabel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "s32g.slotlabel";
  }
  protected:
  explicit slotlabel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetSlotLabelFieldNumber = 1,
  };
  // optional int32 targetSlotLabel = 1;
  bool has_targetslotlabel() const;
  private:
  bool _internal_has_targetslotlabel() const;
  public:
  void clear_targetslotlabel();
  int32_t targetslotlabel() const;
  void set_targetslotlabel(int32_t value);
  private:
  int32_t _internal_targetslotlabel() const;
  void _internal_set_targetslotlabel(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:s32g.slotlabel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t targetslotlabel_;
  friend struct ::TableStruct_s32g_2eproto;
};
// -------------------------------------------------------------------

class apastatusreqMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:s32g.apastatusreqMessage) */ {
 public:
  inline apastatusreqMessage() : apastatusreqMessage(nullptr) {}
  ~apastatusreqMessage() override;
  explicit constexpr apastatusreqMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  apastatusreqMessage(const apastatusreqMessage& from);
  apastatusreqMessage(apastatusreqMessage&& from) noexcept
    : apastatusreqMessage() {
    *this = ::std::move(from);
  }

  inline apastatusreqMessage& operator=(const apastatusreqMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline apastatusreqMessage& operator=(apastatusreqMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const apastatusreqMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const apastatusreqMessage* internal_default_instance() {
    return reinterpret_cast<const apastatusreqMessage*>(
               &_apastatusreqMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(apastatusreqMessage& a, apastatusreqMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(apastatusreqMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(apastatusreqMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  apastatusreqMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<apastatusreqMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const apastatusreqMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const apastatusreqMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(apastatusreqMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "s32g.apastatusreqMessage";
  }
  protected:
  explicit apastatusreqMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApastatusreqFieldNumber = 1,
  };
  // optional .s32g.apaStatusReq apastatusreq = 1;
  bool has_apastatusreq() const;
  private:
  bool _internal_has_apastatusreq() const;
  public:
  void clear_apastatusreq();
  ::s32g::apaStatusReq apastatusreq() const;
  void set_apastatusreq(::s32g::apaStatusReq value);
  private:
  ::s32g::apaStatusReq _internal_apastatusreq() const;
  void _internal_set_apastatusreq(::s32g::apaStatusReq value);
  public:

  // @@protoc_insertion_point(class_scope:s32g.apastatusreqMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int apastatusreq_;
  friend struct ::TableStruct_s32g_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// slotlabel

// optional int32 targetSlotLabel = 1;
inline bool slotlabel::_internal_has_targetslotlabel() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool slotlabel::has_targetslotlabel() const {
  return _internal_has_targetslotlabel();
}
inline void slotlabel::clear_targetslotlabel() {
  targetslotlabel_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t slotlabel::_internal_targetslotlabel() const {
  return targetslotlabel_;
}
inline int32_t slotlabel::targetslotlabel() const {
  // @@protoc_insertion_point(field_get:s32g.slotlabel.targetSlotLabel)
  return _internal_targetslotlabel();
}
inline void slotlabel::_internal_set_targetslotlabel(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  targetslotlabel_ = value;
}
inline void slotlabel::set_targetslotlabel(int32_t value) {
  _internal_set_targetslotlabel(value);
  // @@protoc_insertion_point(field_set:s32g.slotlabel.targetSlotLabel)
}

// -------------------------------------------------------------------

// apastatusreqMessage

// optional .s32g.apaStatusReq apastatusreq = 1;
inline bool apastatusreqMessage::_internal_has_apastatusreq() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool apastatusreqMessage::has_apastatusreq() const {
  return _internal_has_apastatusreq();
}
inline void apastatusreqMessage::clear_apastatusreq() {
  apastatusreq_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::s32g::apaStatusReq apastatusreqMessage::_internal_apastatusreq() const {
  return static_cast< ::s32g::apaStatusReq >(apastatusreq_);
}
inline ::s32g::apaStatusReq apastatusreqMessage::apastatusreq() const {
  // @@protoc_insertion_point(field_get:s32g.apastatusreqMessage.apastatusreq)
  return _internal_apastatusreq();
}
inline void apastatusreqMessage::_internal_set_apastatusreq(::s32g::apaStatusReq value) {
  _has_bits_[0] |= 0x00000001u;
  apastatusreq_ = value;
}
inline void apastatusreqMessage::set_apastatusreq(::s32g::apaStatusReq value) {
  _internal_set_apastatusreq(value);
  // @@protoc_insertion_point(field_set:s32g.apastatusreqMessage.apastatusreq)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace s32g

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::s32g::apaStatusReq> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::s32g::apaStatusReq>() {
  return ::s32g::apaStatusReq_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_s32g_2eproto
