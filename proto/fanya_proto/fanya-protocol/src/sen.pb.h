// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sen.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sen_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sen_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sen_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sen_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sen_2eproto;
namespace sen {
class DualAntennaData;
struct DualAntennaDataDefaultTypeInternal;
extern DualAntennaDataDefaultTypeInternal _DualAntennaData_default_instance_;
class GNSSData;
struct GNSSDataDefaultTypeInternal;
extern GNSSDataDefaultTypeInternal _GNSSData_default_instance_;
class IMUData;
struct IMUDataDefaultTypeInternal;
extern IMUDataDefaultTypeInternal _IMUData_default_instance_;
class INSData;
struct INSDataDefaultTypeInternal;
extern INSDataDefaultTypeInternal _INSData_default_instance_;
class Point3D;
struct Point3DDefaultTypeInternal;
extern Point3DDefaultTypeInternal _Point3D_default_instance_;
}  // namespace sen
PROTOBUF_NAMESPACE_OPEN
template<> ::sen::DualAntennaData* Arena::CreateMaybeMessage<::sen::DualAntennaData>(Arena*);
template<> ::sen::GNSSData* Arena::CreateMaybeMessage<::sen::GNSSData>(Arena*);
template<> ::sen::IMUData* Arena::CreateMaybeMessage<::sen::IMUData>(Arena*);
template<> ::sen::INSData* Arena::CreateMaybeMessage<::sen::INSData>(Arena*);
template<> ::sen::Point3D* Arena::CreateMaybeMessage<::sen::Point3D>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sen {

// ===================================================================

class Point3D final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sen.Point3D) */ {
 public:
  inline Point3D() : Point3D(nullptr) {}
  ~Point3D() override;
  explicit constexpr Point3D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Point3D(const Point3D& from);
  Point3D(Point3D&& from) noexcept
    : Point3D() {
    *this = ::std::move(from);
  }

  inline Point3D& operator=(const Point3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point3D& operator=(Point3D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Point3D& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point3D* internal_default_instance() {
    return reinterpret_cast<const Point3D*>(
               &_Point3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Point3D& a, Point3D& b) {
    a.Swap(&b);
  }
  inline void Swap(Point3D* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Point3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Point3D>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Point3D& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Point3D& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point3D* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sen.Point3D";
  }
  protected:
  explicit Point3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // optional double x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // optional double y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // optional double z = 3;
  bool has_z() const;
  private:
  bool _internal_has_z() const;
  public:
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:sen.Point3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double x_;
  double y_;
  double z_;
  friend struct ::TableStruct_sen_2eproto;
};
// -------------------------------------------------------------------

class IMUData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sen.IMUData) */ {
 public:
  inline IMUData() : IMUData(nullptr) {}
  ~IMUData() override;
  explicit constexpr IMUData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IMUData(const IMUData& from);
  IMUData(IMUData&& from) noexcept
    : IMUData() {
    *this = ::std::move(from);
  }

  inline IMUData& operator=(const IMUData& from) {
    CopyFrom(from);
    return *this;
  }
  inline IMUData& operator=(IMUData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IMUData& default_instance() {
    return *internal_default_instance();
  }
  static inline const IMUData* internal_default_instance() {
    return reinterpret_cast<const IMUData*>(
               &_IMUData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IMUData& a, IMUData& b) {
    a.Swap(&b);
  }
  inline void Swap(IMUData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IMUData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IMUData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IMUData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IMUData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IMUData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IMUData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sen.IMUData";
  }
  protected:
  explicit IMUData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccFieldNumber = 1,
    kGyroFieldNumber = 2,
  };
  // optional .sen.Point3D acc = 1;
  bool has_acc() const;
  private:
  bool _internal_has_acc() const;
  public:
  void clear_acc();
  const ::sen::Point3D& acc() const;
  PROTOBUF_NODISCARD ::sen::Point3D* release_acc();
  ::sen::Point3D* mutable_acc();
  void set_allocated_acc(::sen::Point3D* acc);
  private:
  const ::sen::Point3D& _internal_acc() const;
  ::sen::Point3D* _internal_mutable_acc();
  public:
  void unsafe_arena_set_allocated_acc(
      ::sen::Point3D* acc);
  ::sen::Point3D* unsafe_arena_release_acc();

  // optional .sen.Point3D gyro = 2;
  bool has_gyro() const;
  private:
  bool _internal_has_gyro() const;
  public:
  void clear_gyro();
  const ::sen::Point3D& gyro() const;
  PROTOBUF_NODISCARD ::sen::Point3D* release_gyro();
  ::sen::Point3D* mutable_gyro();
  void set_allocated_gyro(::sen::Point3D* gyro);
  private:
  const ::sen::Point3D& _internal_gyro() const;
  ::sen::Point3D* _internal_mutable_gyro();
  public:
  void unsafe_arena_set_allocated_gyro(
      ::sen::Point3D* gyro);
  ::sen::Point3D* unsafe_arena_release_gyro();

  // @@protoc_insertion_point(class_scope:sen.IMUData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::sen::Point3D* acc_;
  ::sen::Point3D* gyro_;
  friend struct ::TableStruct_sen_2eproto;
};
// -------------------------------------------------------------------

class GNSSData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sen.GNSSData) */ {
 public:
  inline GNSSData() : GNSSData(nullptr) {}
  ~GNSSData() override;
  explicit constexpr GNSSData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GNSSData(const GNSSData& from);
  GNSSData(GNSSData&& from) noexcept
    : GNSSData() {
    *this = ::std::move(from);
  }

  inline GNSSData& operator=(const GNSSData& from) {
    CopyFrom(from);
    return *this;
  }
  inline GNSSData& operator=(GNSSData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GNSSData& default_instance() {
    return *internal_default_instance();
  }
  static inline const GNSSData* internal_default_instance() {
    return reinterpret_cast<const GNSSData*>(
               &_GNSSData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GNSSData& a, GNSSData& b) {
    a.Swap(&b);
  }
  inline void Swap(GNSSData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GNSSData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GNSSData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GNSSData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GNSSData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GNSSData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GNSSData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sen.GNSSData";
  }
  protected:
  explicit GNSSData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStdFieldNumber = 5,
    kLatFieldNumber = 1,
    kLonFieldNumber = 2,
    kHeightFieldNumber = 3,
    kQualityFieldNumber = 4,
  };
  // optional .sen.Point3D std = 5;
  bool has_std() const;
  private:
  bool _internal_has_std() const;
  public:
  void clear_std();
  const ::sen::Point3D& std() const;
  PROTOBUF_NODISCARD ::sen::Point3D* release_std();
  ::sen::Point3D* mutable_std();
  void set_allocated_std(::sen::Point3D* std);
  private:
  const ::sen::Point3D& _internal_std() const;
  ::sen::Point3D* _internal_mutable_std();
  public:
  void unsafe_arena_set_allocated_std(
      ::sen::Point3D* std);
  ::sen::Point3D* unsafe_arena_release_std();

  // optional double lat = 1;
  bool has_lat() const;
  private:
  bool _internal_has_lat() const;
  public:
  void clear_lat();
  double lat() const;
  void set_lat(double value);
  private:
  double _internal_lat() const;
  void _internal_set_lat(double value);
  public:

  // optional double lon = 2;
  bool has_lon() const;
  private:
  bool _internal_has_lon() const;
  public:
  void clear_lon();
  double lon() const;
  void set_lon(double value);
  private:
  double _internal_lon() const;
  void _internal_set_lon(double value);
  public:

  // optional double height = 3;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  double height() const;
  void set_height(double value);
  private:
  double _internal_height() const;
  void _internal_set_height(double value);
  public:

  // optional int32 quality = 4;
  bool has_quality() const;
  private:
  bool _internal_has_quality() const;
  public:
  void clear_quality();
  int32_t quality() const;
  void set_quality(int32_t value);
  private:
  int32_t _internal_quality() const;
  void _internal_set_quality(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sen.GNSSData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::sen::Point3D* std_;
  double lat_;
  double lon_;
  double height_;
  int32_t quality_;
  friend struct ::TableStruct_sen_2eproto;
};
// -------------------------------------------------------------------

class INSData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sen.INSData) */ {
 public:
  inline INSData() : INSData(nullptr) {}
  ~INSData() override;
  explicit constexpr INSData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  INSData(const INSData& from);
  INSData(INSData&& from) noexcept
    : INSData() {
    *this = ::std::move(from);
  }

  inline INSData& operator=(const INSData& from) {
    CopyFrom(from);
    return *this;
  }
  inline INSData& operator=(INSData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const INSData& default_instance() {
    return *internal_default_instance();
  }
  static inline const INSData* internal_default_instance() {
    return reinterpret_cast<const INSData*>(
               &_INSData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(INSData& a, INSData& b) {
    a.Swap(&b);
  }
  inline void Swap(INSData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(INSData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  INSData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<INSData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const INSData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const INSData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(INSData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sen.INSData";
  }
  protected:
  explicit INSData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEulerRpyFieldNumber = 5,
    kVelocityFieldNumber = 6,
    kLatFieldNumber = 2,
    kLonFieldNumber = 3,
    kAltFieldNumber = 4,
    kQualityFieldNumber = 1,
  };
  // optional .sen.Point3D euler_rpy = 5;
  bool has_euler_rpy() const;
  private:
  bool _internal_has_euler_rpy() const;
  public:
  void clear_euler_rpy();
  const ::sen::Point3D& euler_rpy() const;
  PROTOBUF_NODISCARD ::sen::Point3D* release_euler_rpy();
  ::sen::Point3D* mutable_euler_rpy();
  void set_allocated_euler_rpy(::sen::Point3D* euler_rpy);
  private:
  const ::sen::Point3D& _internal_euler_rpy() const;
  ::sen::Point3D* _internal_mutable_euler_rpy();
  public:
  void unsafe_arena_set_allocated_euler_rpy(
      ::sen::Point3D* euler_rpy);
  ::sen::Point3D* unsafe_arena_release_euler_rpy();

  // optional .sen.Point3D velocity = 6;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::sen::Point3D& velocity() const;
  PROTOBUF_NODISCARD ::sen::Point3D* release_velocity();
  ::sen::Point3D* mutable_velocity();
  void set_allocated_velocity(::sen::Point3D* velocity);
  private:
  const ::sen::Point3D& _internal_velocity() const;
  ::sen::Point3D* _internal_mutable_velocity();
  public:
  void unsafe_arena_set_allocated_velocity(
      ::sen::Point3D* velocity);
  ::sen::Point3D* unsafe_arena_release_velocity();

  // optional double lat = 2;
  bool has_lat() const;
  private:
  bool _internal_has_lat() const;
  public:
  void clear_lat();
  double lat() const;
  void set_lat(double value);
  private:
  double _internal_lat() const;
  void _internal_set_lat(double value);
  public:

  // optional double lon = 3;
  bool has_lon() const;
  private:
  bool _internal_has_lon() const;
  public:
  void clear_lon();
  double lon() const;
  void set_lon(double value);
  private:
  double _internal_lon() const;
  void _internal_set_lon(double value);
  public:

  // optional double alt = 4;
  bool has_alt() const;
  private:
  bool _internal_has_alt() const;
  public:
  void clear_alt();
  double alt() const;
  void set_alt(double value);
  private:
  double _internal_alt() const;
  void _internal_set_alt(double value);
  public:

  // optional int32 quality = 1;
  bool has_quality() const;
  private:
  bool _internal_has_quality() const;
  public:
  void clear_quality();
  int32_t quality() const;
  void set_quality(int32_t value);
  private:
  int32_t _internal_quality() const;
  void _internal_set_quality(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sen.INSData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::sen::Point3D* euler_rpy_;
  ::sen::Point3D* velocity_;
  double lat_;
  double lon_;
  double alt_;
  int32_t quality_;
  friend struct ::TableStruct_sen_2eproto;
};
// -------------------------------------------------------------------

class DualAntennaData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sen.DualAntennaData) */ {
 public:
  inline DualAntennaData() : DualAntennaData(nullptr) {}
  ~DualAntennaData() override;
  explicit constexpr DualAntennaData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DualAntennaData(const DualAntennaData& from);
  DualAntennaData(DualAntennaData&& from) noexcept
    : DualAntennaData() {
    *this = ::std::move(from);
  }

  inline DualAntennaData& operator=(const DualAntennaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline DualAntennaData& operator=(DualAntennaData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DualAntennaData& default_instance() {
    return *internal_default_instance();
  }
  static inline const DualAntennaData* internal_default_instance() {
    return reinterpret_cast<const DualAntennaData*>(
               &_DualAntennaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DualAntennaData& a, DualAntennaData& b) {
    a.Swap(&b);
  }
  inline void Swap(DualAntennaData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DualAntennaData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DualAntennaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DualAntennaData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DualAntennaData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DualAntennaData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DualAntennaData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sen.DualAntennaData";
  }
  protected:
  explicit DualAntennaData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeadingFieldNumber = 1,
    kHeadingStdFieldNumber = 2,
    kQualityFieldNumber = 3,
  };
  // optional double heading = 1;
  bool has_heading() const;
  private:
  bool _internal_has_heading() const;
  public:
  void clear_heading();
  double heading() const;
  void set_heading(double value);
  private:
  double _internal_heading() const;
  void _internal_set_heading(double value);
  public:

  // optional double heading_std = 2;
  bool has_heading_std() const;
  private:
  bool _internal_has_heading_std() const;
  public:
  void clear_heading_std();
  double heading_std() const;
  void set_heading_std(double value);
  private:
  double _internal_heading_std() const;
  void _internal_set_heading_std(double value);
  public:

  // optional int32 quality = 3;
  bool has_quality() const;
  private:
  bool _internal_has_quality() const;
  public:
  void clear_quality();
  int32_t quality() const;
  void set_quality(int32_t value);
  private:
  int32_t _internal_quality() const;
  void _internal_set_quality(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:sen.DualAntennaData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double heading_;
  double heading_std_;
  int32_t quality_;
  friend struct ::TableStruct_sen_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Point3D

// optional double x = 1;
inline bool Point3D::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Point3D::has_x() const {
  return _internal_has_x();
}
inline void Point3D::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Point3D::_internal_x() const {
  return x_;
}
inline double Point3D::x() const {
  // @@protoc_insertion_point(field_get:sen.Point3D.x)
  return _internal_x();
}
inline void Point3D::_internal_set_x(double value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void Point3D::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:sen.Point3D.x)
}

// optional double y = 2;
inline bool Point3D::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Point3D::has_y() const {
  return _internal_has_y();
}
inline void Point3D::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Point3D::_internal_y() const {
  return y_;
}
inline double Point3D::y() const {
  // @@protoc_insertion_point(field_get:sen.Point3D.y)
  return _internal_y();
}
inline void Point3D::_internal_set_y(double value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void Point3D::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:sen.Point3D.y)
}

// optional double z = 3;
inline bool Point3D::_internal_has_z() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Point3D::has_z() const {
  return _internal_has_z();
}
inline void Point3D::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double Point3D::_internal_z() const {
  return z_;
}
inline double Point3D::z() const {
  // @@protoc_insertion_point(field_get:sen.Point3D.z)
  return _internal_z();
}
inline void Point3D::_internal_set_z(double value) {
  _has_bits_[0] |= 0x00000004u;
  z_ = value;
}
inline void Point3D::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:sen.Point3D.z)
}

// -------------------------------------------------------------------

// IMUData

// optional .sen.Point3D acc = 1;
inline bool IMUData::_internal_has_acc() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || acc_ != nullptr);
  return value;
}
inline bool IMUData::has_acc() const {
  return _internal_has_acc();
}
inline void IMUData::clear_acc() {
  if (acc_ != nullptr) acc_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::sen::Point3D& IMUData::_internal_acc() const {
  const ::sen::Point3D* p = acc_;
  return p != nullptr ? *p : reinterpret_cast<const ::sen::Point3D&>(
      ::sen::_Point3D_default_instance_);
}
inline const ::sen::Point3D& IMUData::acc() const {
  // @@protoc_insertion_point(field_get:sen.IMUData.acc)
  return _internal_acc();
}
inline void IMUData::unsafe_arena_set_allocated_acc(
    ::sen::Point3D* acc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acc_);
  }
  acc_ = acc;
  if (acc) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sen.IMUData.acc)
}
inline ::sen::Point3D* IMUData::release_acc() {
  _has_bits_[0] &= ~0x00000001u;
  ::sen::Point3D* temp = acc_;
  acc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sen::Point3D* IMUData::unsafe_arena_release_acc() {
  // @@protoc_insertion_point(field_release:sen.IMUData.acc)
  _has_bits_[0] &= ~0x00000001u;
  ::sen::Point3D* temp = acc_;
  acc_ = nullptr;
  return temp;
}
inline ::sen::Point3D* IMUData::_internal_mutable_acc() {
  _has_bits_[0] |= 0x00000001u;
  if (acc_ == nullptr) {
    auto* p = CreateMaybeMessage<::sen::Point3D>(GetArenaForAllocation());
    acc_ = p;
  }
  return acc_;
}
inline ::sen::Point3D* IMUData::mutable_acc() {
  ::sen::Point3D* _msg = _internal_mutable_acc();
  // @@protoc_insertion_point(field_mutable:sen.IMUData.acc)
  return _msg;
}
inline void IMUData::set_allocated_acc(::sen::Point3D* acc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete acc_;
  }
  if (acc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::sen::Point3D>::GetOwningArena(acc);
    if (message_arena != submessage_arena) {
      acc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acc, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  acc_ = acc;
  // @@protoc_insertion_point(field_set_allocated:sen.IMUData.acc)
}

// optional .sen.Point3D gyro = 2;
inline bool IMUData::_internal_has_gyro() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || gyro_ != nullptr);
  return value;
}
inline bool IMUData::has_gyro() const {
  return _internal_has_gyro();
}
inline void IMUData::clear_gyro() {
  if (gyro_ != nullptr) gyro_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::sen::Point3D& IMUData::_internal_gyro() const {
  const ::sen::Point3D* p = gyro_;
  return p != nullptr ? *p : reinterpret_cast<const ::sen::Point3D&>(
      ::sen::_Point3D_default_instance_);
}
inline const ::sen::Point3D& IMUData::gyro() const {
  // @@protoc_insertion_point(field_get:sen.IMUData.gyro)
  return _internal_gyro();
}
inline void IMUData::unsafe_arena_set_allocated_gyro(
    ::sen::Point3D* gyro) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gyro_);
  }
  gyro_ = gyro;
  if (gyro) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sen.IMUData.gyro)
}
inline ::sen::Point3D* IMUData::release_gyro() {
  _has_bits_[0] &= ~0x00000002u;
  ::sen::Point3D* temp = gyro_;
  gyro_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sen::Point3D* IMUData::unsafe_arena_release_gyro() {
  // @@protoc_insertion_point(field_release:sen.IMUData.gyro)
  _has_bits_[0] &= ~0x00000002u;
  ::sen::Point3D* temp = gyro_;
  gyro_ = nullptr;
  return temp;
}
inline ::sen::Point3D* IMUData::_internal_mutable_gyro() {
  _has_bits_[0] |= 0x00000002u;
  if (gyro_ == nullptr) {
    auto* p = CreateMaybeMessage<::sen::Point3D>(GetArenaForAllocation());
    gyro_ = p;
  }
  return gyro_;
}
inline ::sen::Point3D* IMUData::mutable_gyro() {
  ::sen::Point3D* _msg = _internal_mutable_gyro();
  // @@protoc_insertion_point(field_mutable:sen.IMUData.gyro)
  return _msg;
}
inline void IMUData::set_allocated_gyro(::sen::Point3D* gyro) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete gyro_;
  }
  if (gyro) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::sen::Point3D>::GetOwningArena(gyro);
    if (message_arena != submessage_arena) {
      gyro = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gyro, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  gyro_ = gyro;
  // @@protoc_insertion_point(field_set_allocated:sen.IMUData.gyro)
}

// -------------------------------------------------------------------

// GNSSData

// optional double lat = 1;
inline bool GNSSData::_internal_has_lat() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GNSSData::has_lat() const {
  return _internal_has_lat();
}
inline void GNSSData::clear_lat() {
  lat_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double GNSSData::_internal_lat() const {
  return lat_;
}
inline double GNSSData::lat() const {
  // @@protoc_insertion_point(field_get:sen.GNSSData.lat)
  return _internal_lat();
}
inline void GNSSData::_internal_set_lat(double value) {
  _has_bits_[0] |= 0x00000002u;
  lat_ = value;
}
inline void GNSSData::set_lat(double value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:sen.GNSSData.lat)
}

// optional double lon = 2;
inline bool GNSSData::_internal_has_lon() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GNSSData::has_lon() const {
  return _internal_has_lon();
}
inline void GNSSData::clear_lon() {
  lon_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double GNSSData::_internal_lon() const {
  return lon_;
}
inline double GNSSData::lon() const {
  // @@protoc_insertion_point(field_get:sen.GNSSData.lon)
  return _internal_lon();
}
inline void GNSSData::_internal_set_lon(double value) {
  _has_bits_[0] |= 0x00000004u;
  lon_ = value;
}
inline void GNSSData::set_lon(double value) {
  _internal_set_lon(value);
  // @@protoc_insertion_point(field_set:sen.GNSSData.lon)
}

// optional double height = 3;
inline bool GNSSData::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GNSSData::has_height() const {
  return _internal_has_height();
}
inline void GNSSData::clear_height() {
  height_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double GNSSData::_internal_height() const {
  return height_;
}
inline double GNSSData::height() const {
  // @@protoc_insertion_point(field_get:sen.GNSSData.height)
  return _internal_height();
}
inline void GNSSData::_internal_set_height(double value) {
  _has_bits_[0] |= 0x00000008u;
  height_ = value;
}
inline void GNSSData::set_height(double value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:sen.GNSSData.height)
}

// optional int32 quality = 4;
inline bool GNSSData::_internal_has_quality() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GNSSData::has_quality() const {
  return _internal_has_quality();
}
inline void GNSSData::clear_quality() {
  quality_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t GNSSData::_internal_quality() const {
  return quality_;
}
inline int32_t GNSSData::quality() const {
  // @@protoc_insertion_point(field_get:sen.GNSSData.quality)
  return _internal_quality();
}
inline void GNSSData::_internal_set_quality(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  quality_ = value;
}
inline void GNSSData::set_quality(int32_t value) {
  _internal_set_quality(value);
  // @@protoc_insertion_point(field_set:sen.GNSSData.quality)
}

// optional .sen.Point3D std = 5;
inline bool GNSSData::_internal_has_std() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || std_ != nullptr);
  return value;
}
inline bool GNSSData::has_std() const {
  return _internal_has_std();
}
inline void GNSSData::clear_std() {
  if (std_ != nullptr) std_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::sen::Point3D& GNSSData::_internal_std() const {
  const ::sen::Point3D* p = std_;
  return p != nullptr ? *p : reinterpret_cast<const ::sen::Point3D&>(
      ::sen::_Point3D_default_instance_);
}
inline const ::sen::Point3D& GNSSData::std() const {
  // @@protoc_insertion_point(field_get:sen.GNSSData.std)
  return _internal_std();
}
inline void GNSSData::unsafe_arena_set_allocated_std(
    ::sen::Point3D* std) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(std_);
  }
  std_ = std;
  if (std) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sen.GNSSData.std)
}
inline ::sen::Point3D* GNSSData::release_std() {
  _has_bits_[0] &= ~0x00000001u;
  ::sen::Point3D* temp = std_;
  std_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sen::Point3D* GNSSData::unsafe_arena_release_std() {
  // @@protoc_insertion_point(field_release:sen.GNSSData.std)
  _has_bits_[0] &= ~0x00000001u;
  ::sen::Point3D* temp = std_;
  std_ = nullptr;
  return temp;
}
inline ::sen::Point3D* GNSSData::_internal_mutable_std() {
  _has_bits_[0] |= 0x00000001u;
  if (std_ == nullptr) {
    auto* p = CreateMaybeMessage<::sen::Point3D>(GetArenaForAllocation());
    std_ = p;
  }
  return std_;
}
inline ::sen::Point3D* GNSSData::mutable_std() {
  ::sen::Point3D* _msg = _internal_mutable_std();
  // @@protoc_insertion_point(field_mutable:sen.GNSSData.std)
  return _msg;
}
inline void GNSSData::set_allocated_std(::sen::Point3D* std) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete std_;
  }
  if (std) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::sen::Point3D>::GetOwningArena(std);
    if (message_arena != submessage_arena) {
      std = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, std, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  std_ = std;
  // @@protoc_insertion_point(field_set_allocated:sen.GNSSData.std)
}

// -------------------------------------------------------------------

// INSData

// optional int32 quality = 1;
inline bool INSData::_internal_has_quality() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool INSData::has_quality() const {
  return _internal_has_quality();
}
inline void INSData::clear_quality() {
  quality_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t INSData::_internal_quality() const {
  return quality_;
}
inline int32_t INSData::quality() const {
  // @@protoc_insertion_point(field_get:sen.INSData.quality)
  return _internal_quality();
}
inline void INSData::_internal_set_quality(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  quality_ = value;
}
inline void INSData::set_quality(int32_t value) {
  _internal_set_quality(value);
  // @@protoc_insertion_point(field_set:sen.INSData.quality)
}

// optional double lat = 2;
inline bool INSData::_internal_has_lat() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool INSData::has_lat() const {
  return _internal_has_lat();
}
inline void INSData::clear_lat() {
  lat_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double INSData::_internal_lat() const {
  return lat_;
}
inline double INSData::lat() const {
  // @@protoc_insertion_point(field_get:sen.INSData.lat)
  return _internal_lat();
}
inline void INSData::_internal_set_lat(double value) {
  _has_bits_[0] |= 0x00000004u;
  lat_ = value;
}
inline void INSData::set_lat(double value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:sen.INSData.lat)
}

// optional double lon = 3;
inline bool INSData::_internal_has_lon() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool INSData::has_lon() const {
  return _internal_has_lon();
}
inline void INSData::clear_lon() {
  lon_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double INSData::_internal_lon() const {
  return lon_;
}
inline double INSData::lon() const {
  // @@protoc_insertion_point(field_get:sen.INSData.lon)
  return _internal_lon();
}
inline void INSData::_internal_set_lon(double value) {
  _has_bits_[0] |= 0x00000008u;
  lon_ = value;
}
inline void INSData::set_lon(double value) {
  _internal_set_lon(value);
  // @@protoc_insertion_point(field_set:sen.INSData.lon)
}

// optional double alt = 4;
inline bool INSData::_internal_has_alt() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool INSData::has_alt() const {
  return _internal_has_alt();
}
inline void INSData::clear_alt() {
  alt_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double INSData::_internal_alt() const {
  return alt_;
}
inline double INSData::alt() const {
  // @@protoc_insertion_point(field_get:sen.INSData.alt)
  return _internal_alt();
}
inline void INSData::_internal_set_alt(double value) {
  _has_bits_[0] |= 0x00000010u;
  alt_ = value;
}
inline void INSData::set_alt(double value) {
  _internal_set_alt(value);
  // @@protoc_insertion_point(field_set:sen.INSData.alt)
}

// optional .sen.Point3D euler_rpy = 5;
inline bool INSData::_internal_has_euler_rpy() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || euler_rpy_ != nullptr);
  return value;
}
inline bool INSData::has_euler_rpy() const {
  return _internal_has_euler_rpy();
}
inline void INSData::clear_euler_rpy() {
  if (euler_rpy_ != nullptr) euler_rpy_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::sen::Point3D& INSData::_internal_euler_rpy() const {
  const ::sen::Point3D* p = euler_rpy_;
  return p != nullptr ? *p : reinterpret_cast<const ::sen::Point3D&>(
      ::sen::_Point3D_default_instance_);
}
inline const ::sen::Point3D& INSData::euler_rpy() const {
  // @@protoc_insertion_point(field_get:sen.INSData.euler_rpy)
  return _internal_euler_rpy();
}
inline void INSData::unsafe_arena_set_allocated_euler_rpy(
    ::sen::Point3D* euler_rpy) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(euler_rpy_);
  }
  euler_rpy_ = euler_rpy;
  if (euler_rpy) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sen.INSData.euler_rpy)
}
inline ::sen::Point3D* INSData::release_euler_rpy() {
  _has_bits_[0] &= ~0x00000001u;
  ::sen::Point3D* temp = euler_rpy_;
  euler_rpy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sen::Point3D* INSData::unsafe_arena_release_euler_rpy() {
  // @@protoc_insertion_point(field_release:sen.INSData.euler_rpy)
  _has_bits_[0] &= ~0x00000001u;
  ::sen::Point3D* temp = euler_rpy_;
  euler_rpy_ = nullptr;
  return temp;
}
inline ::sen::Point3D* INSData::_internal_mutable_euler_rpy() {
  _has_bits_[0] |= 0x00000001u;
  if (euler_rpy_ == nullptr) {
    auto* p = CreateMaybeMessage<::sen::Point3D>(GetArenaForAllocation());
    euler_rpy_ = p;
  }
  return euler_rpy_;
}
inline ::sen::Point3D* INSData::mutable_euler_rpy() {
  ::sen::Point3D* _msg = _internal_mutable_euler_rpy();
  // @@protoc_insertion_point(field_mutable:sen.INSData.euler_rpy)
  return _msg;
}
inline void INSData::set_allocated_euler_rpy(::sen::Point3D* euler_rpy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete euler_rpy_;
  }
  if (euler_rpy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::sen::Point3D>::GetOwningArena(euler_rpy);
    if (message_arena != submessage_arena) {
      euler_rpy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, euler_rpy, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  euler_rpy_ = euler_rpy;
  // @@protoc_insertion_point(field_set_allocated:sen.INSData.euler_rpy)
}

// optional .sen.Point3D velocity = 6;
inline bool INSData::_internal_has_velocity() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || velocity_ != nullptr);
  return value;
}
inline bool INSData::has_velocity() const {
  return _internal_has_velocity();
}
inline void INSData::clear_velocity() {
  if (velocity_ != nullptr) velocity_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::sen::Point3D& INSData::_internal_velocity() const {
  const ::sen::Point3D* p = velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::sen::Point3D&>(
      ::sen::_Point3D_default_instance_);
}
inline const ::sen::Point3D& INSData::velocity() const {
  // @@protoc_insertion_point(field_get:sen.INSData.velocity)
  return _internal_velocity();
}
inline void INSData::unsafe_arena_set_allocated_velocity(
    ::sen::Point3D* velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_);
  }
  velocity_ = velocity;
  if (velocity) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sen.INSData.velocity)
}
inline ::sen::Point3D* INSData::release_velocity() {
  _has_bits_[0] &= ~0x00000002u;
  ::sen::Point3D* temp = velocity_;
  velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sen::Point3D* INSData::unsafe_arena_release_velocity() {
  // @@protoc_insertion_point(field_release:sen.INSData.velocity)
  _has_bits_[0] &= ~0x00000002u;
  ::sen::Point3D* temp = velocity_;
  velocity_ = nullptr;
  return temp;
}
inline ::sen::Point3D* INSData::_internal_mutable_velocity() {
  _has_bits_[0] |= 0x00000002u;
  if (velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::sen::Point3D>(GetArenaForAllocation());
    velocity_ = p;
  }
  return velocity_;
}
inline ::sen::Point3D* INSData::mutable_velocity() {
  ::sen::Point3D* _msg = _internal_mutable_velocity();
  // @@protoc_insertion_point(field_mutable:sen.INSData.velocity)
  return _msg;
}
inline void INSData::set_allocated_velocity(::sen::Point3D* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete velocity_;
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::sen::Point3D>::GetOwningArena(velocity);
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:sen.INSData.velocity)
}

// -------------------------------------------------------------------

// DualAntennaData

// optional double heading = 1;
inline bool DualAntennaData::_internal_has_heading() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DualAntennaData::has_heading() const {
  return _internal_has_heading();
}
inline void DualAntennaData::clear_heading() {
  heading_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double DualAntennaData::_internal_heading() const {
  return heading_;
}
inline double DualAntennaData::heading() const {
  // @@protoc_insertion_point(field_get:sen.DualAntennaData.heading)
  return _internal_heading();
}
inline void DualAntennaData::_internal_set_heading(double value) {
  _has_bits_[0] |= 0x00000001u;
  heading_ = value;
}
inline void DualAntennaData::set_heading(double value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:sen.DualAntennaData.heading)
}

// optional double heading_std = 2;
inline bool DualAntennaData::_internal_has_heading_std() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DualAntennaData::has_heading_std() const {
  return _internal_has_heading_std();
}
inline void DualAntennaData::clear_heading_std() {
  heading_std_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double DualAntennaData::_internal_heading_std() const {
  return heading_std_;
}
inline double DualAntennaData::heading_std() const {
  // @@protoc_insertion_point(field_get:sen.DualAntennaData.heading_std)
  return _internal_heading_std();
}
inline void DualAntennaData::_internal_set_heading_std(double value) {
  _has_bits_[0] |= 0x00000002u;
  heading_std_ = value;
}
inline void DualAntennaData::set_heading_std(double value) {
  _internal_set_heading_std(value);
  // @@protoc_insertion_point(field_set:sen.DualAntennaData.heading_std)
}

// optional int32 quality = 3;
inline bool DualAntennaData::_internal_has_quality() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DualAntennaData::has_quality() const {
  return _internal_has_quality();
}
inline void DualAntennaData::clear_quality() {
  quality_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t DualAntennaData::_internal_quality() const {
  return quality_;
}
inline int32_t DualAntennaData::quality() const {
  // @@protoc_insertion_point(field_get:sen.DualAntennaData.quality)
  return _internal_quality();
}
inline void DualAntennaData::_internal_set_quality(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  quality_ = value;
}
inline void DualAntennaData::set_quality(int32_t value) {
  _internal_set_quality(value);
  // @@protoc_insertion_point(field_set:sen.DualAntennaData.quality)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sen

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sen_2eproto
