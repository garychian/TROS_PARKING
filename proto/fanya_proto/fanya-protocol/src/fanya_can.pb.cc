// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fanya_can.proto

#include "fanya_can.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace can {
constexpr VehicleCanData::VehicleCanData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vehspdavgndrvn_(0)
  , strwhang_(0)
  , imuyawrtpri_(0)
  , imulataccsec_(0)
  , imuyawrtsec_(0)
  , imulonaccsec_(0)
  , iimulataccprim_(0)
  , imulonaccpri_(0)
  , whlangvelrrrauth_(0)
  , whlangvellrrauth_(0)
  , whlangvelrfrtauth_(0)
  , whlangvellfrtauth_(0)
  , whldistedgecntrlrhigfreq_(0)
  , whldistedgecntrrrhigfreq_(0)
  , whldistedgecntrrfhigfreq_(0)
  , whldistedgecntrlfhigfreq_(0)
  , trnsshftlvrpos_tcm_(0)
{}
struct VehicleCanDataDefaultTypeInternal {
  constexpr VehicleCanDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VehicleCanDataDefaultTypeInternal() {}
  union {
    VehicleCanData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VehicleCanDataDefaultTypeInternal _VehicleCanData_default_instance_;
}  // namespace can
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_fanya_5fcan_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_fanya_5fcan_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_fanya_5fcan_2eproto = nullptr;

const uint32_t TableStruct_fanya_5fcan_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::can::VehicleCanData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::can::VehicleCanData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::can::VehicleCanData, vehspdavgndrvn_),
  PROTOBUF_FIELD_OFFSET(::can::VehicleCanData, strwhang_),
  PROTOBUF_FIELD_OFFSET(::can::VehicleCanData, imuyawrtpri_),
  PROTOBUF_FIELD_OFFSET(::can::VehicleCanData, imulataccsec_),
  PROTOBUF_FIELD_OFFSET(::can::VehicleCanData, imuyawrtsec_),
  PROTOBUF_FIELD_OFFSET(::can::VehicleCanData, imulonaccsec_),
  PROTOBUF_FIELD_OFFSET(::can::VehicleCanData, iimulataccprim_),
  PROTOBUF_FIELD_OFFSET(::can::VehicleCanData, imulonaccpri_),
  PROTOBUF_FIELD_OFFSET(::can::VehicleCanData, whlangvelrrrauth_),
  PROTOBUF_FIELD_OFFSET(::can::VehicleCanData, whlangvellrrauth_),
  PROTOBUF_FIELD_OFFSET(::can::VehicleCanData, whlangvelrfrtauth_),
  PROTOBUF_FIELD_OFFSET(::can::VehicleCanData, whlangvellfrtauth_),
  PROTOBUF_FIELD_OFFSET(::can::VehicleCanData, whldistedgecntrlrhigfreq_),
  PROTOBUF_FIELD_OFFSET(::can::VehicleCanData, whldistedgecntrrrhigfreq_),
  PROTOBUF_FIELD_OFFSET(::can::VehicleCanData, whldistedgecntrrfhigfreq_),
  PROTOBUF_FIELD_OFFSET(::can::VehicleCanData, whldistedgecntrlfhigfreq_),
  PROTOBUF_FIELD_OFFSET(::can::VehicleCanData, trnsshftlvrpos_tcm_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 23, -1, sizeof(::can::VehicleCanData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::can::_VehicleCanData_default_instance_),
};

const char descriptor_table_protodef_fanya_5fcan_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017fanya_can.proto\022\003can\"\241\007\n\016VehicleCanDat"
  "a\022\033\n\016VehSpdAvgNDrvn\030\001 \001(\002H\000\210\001\001\022\025\n\010StrWhA"
  "ng\030\002 \001(\002H\001\210\001\001\022\030\n\013IMUYawRtPri\030\003 \001(\002H\002\210\001\001\022"
  "\031\n\014IMULatACCSec\030\004 \001(\002H\003\210\001\001\022\030\n\013IMUYawRtSe"
  "c\030\005 \001(\002H\004\210\001\001\022\031\n\014IMULonAccSec\030\006 \001(\002H\005\210\001\001\022"
  "\033\n\016IIMULatAccPrim\030\007 \001(\002H\006\210\001\001\022\031\n\014IMULonAc"
  "cPri\030\010 \001(\002H\007\210\001\001\022\035\n\020WhlAngVelRRrAuth\030\t \001("
  "\002H\010\210\001\001\022\035\n\020WhlAngVelLRrAuth\030\n \001(\002H\t\210\001\001\022\036\n"
  "\021WhlAngVelRFrtAuth\030\013 \001(\002H\n\210\001\001\022\036\n\021WhlAngV"
  "elLFrtAuth\030\014 \001(\002H\013\210\001\001\022%\n\030WhlDistEdgeCntr"
  "LRHigFreq\030\r \001(\002H\014\210\001\001\022%\n\030WhlDistEdgeCntrR"
  "RHigFreq\030\016 \001(\002H\r\210\001\001\022%\n\030WhlDistEdgeCntrRF"
  "HigFreq\030\017 \001(\002H\016\210\001\001\022%\n\030WhlDistEdgeCntrLFH"
  "igFreq\030\020 \001(\002H\017\210\001\001\0228\n\022trnsShftLvrPos_TCM\030"
  "\021 \001(\0162\027.can.TrnsShftLvrPos_TCMH\020\210\001\001B\021\n\017_"
  "VehSpdAvgNDrvnB\013\n\t_StrWhAngB\016\n\014_IMUYawRt"
  "PriB\017\n\r_IMULatACCSecB\016\n\014_IMUYawRtSecB\017\n\r"
  "_IMULonAccSecB\021\n\017_IIMULatAccPrimB\017\n\r_IMU"
  "LonAccPriB\023\n\021_WhlAngVelRRrAuthB\023\n\021_WhlAn"
  "gVelLRrAuthB\024\n\022_WhlAngVelRFrtAuthB\024\n\022_Wh"
  "lAngVelLFrtAuthB\033\n\031_WhlDistEdgeCntrLRHig"
  "FreqB\033\n\031_WhlDistEdgeCntrRRHigFreqB\033\n\031_Wh"
  "lDistEdgeCntrRFHigFreqB\033\n\031_WhlDistEdgeCn"
  "trLFHigFreqB\025\n\023_trnsShftLvrPos_TCM*\300\002\n\022T"
  "rnsShftLvrPos_TCM\022\021\n\rBetweenranges\020\000\022\r\n\t"
  "Parkrange\020\001\022\020\n\014Reverserange\020\002\022\020\n\014Neutral"
  "range\020\003\022\021\n\rForwardrangea\020\004\022\021\n\rForwardran"
  "geb\020\005\022\021\n\rForwardrangec\020\006\022\021\n\rForwardrange"
  "d\020\007\022\021\n\rForwardrangee\020\010\022\021\n\rForwardrangef\020"
  "\t\022\021\n\rForwardrangeg\020\n\022\021\n\rForwardrangeh\020\013\022"
  "\021\n\rForwardrangei\020\014\022\021\n\rForwardrangej\020\r\022\014\n"
  "\010Reserved\020\016\022\030\n\024Leverpositionunknown\020\017b\006p"
  "roto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_fanya_5fcan_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fanya_5fcan_2eproto = {
  false, false, 1285, descriptor_table_protodef_fanya_5fcan_2eproto, "fanya_can.proto", 
  &descriptor_table_fanya_5fcan_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_fanya_5fcan_2eproto::offsets,
  file_level_metadata_fanya_5fcan_2eproto, file_level_enum_descriptors_fanya_5fcan_2eproto, file_level_service_descriptors_fanya_5fcan_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_fanya_5fcan_2eproto_getter() {
  return &descriptor_table_fanya_5fcan_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_fanya_5fcan_2eproto(&descriptor_table_fanya_5fcan_2eproto);
namespace can {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrnsShftLvrPos_TCM_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_fanya_5fcan_2eproto);
  return file_level_enum_descriptors_fanya_5fcan_2eproto[0];
}
bool TrnsShftLvrPos_TCM_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class VehicleCanData::_Internal {
 public:
  using HasBits = decltype(std::declval<VehicleCanData>()._has_bits_);
  static void set_has_vehspdavgndrvn(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_strwhang(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_imuyawrtpri(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_imulataccsec(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_imuyawrtsec(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_imulonaccsec(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_iimulataccprim(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_imulonaccpri(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_whlangvelrrrauth(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_whlangvellrrauth(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_whlangvelrfrtauth(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_whlangvellfrtauth(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_whldistedgecntrlrhigfreq(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_whldistedgecntrrrhigfreq(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_whldistedgecntrrfhigfreq(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_whldistedgecntrlfhigfreq(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_trnsshftlvrpos_tcm(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
};

VehicleCanData::VehicleCanData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:can.VehicleCanData)
}
VehicleCanData::VehicleCanData(const VehicleCanData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&vehspdavgndrvn_, &from.vehspdavgndrvn_,
    static_cast<size_t>(reinterpret_cast<char*>(&trnsshftlvrpos_tcm_) -
    reinterpret_cast<char*>(&vehspdavgndrvn_)) + sizeof(trnsshftlvrpos_tcm_));
  // @@protoc_insertion_point(copy_constructor:can.VehicleCanData)
}

inline void VehicleCanData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&vehspdavgndrvn_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&trnsshftlvrpos_tcm_) -
    reinterpret_cast<char*>(&vehspdavgndrvn_)) + sizeof(trnsshftlvrpos_tcm_));
}

VehicleCanData::~VehicleCanData() {
  // @@protoc_insertion_point(destructor:can.VehicleCanData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VehicleCanData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VehicleCanData::ArenaDtor(void* object) {
  VehicleCanData* _this = reinterpret_cast< VehicleCanData* >(object);
  (void)_this;
}
void VehicleCanData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VehicleCanData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VehicleCanData::Clear() {
// @@protoc_insertion_point(message_clear_start:can.VehicleCanData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&vehspdavgndrvn_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&imulonaccpri_) -
        reinterpret_cast<char*>(&vehspdavgndrvn_)) + sizeof(imulonaccpri_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&whlangvelrrrauth_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&whldistedgecntrlfhigfreq_) -
        reinterpret_cast<char*>(&whlangvelrrrauth_)) + sizeof(whldistedgecntrlfhigfreq_));
  }
  trnsshftlvrpos_tcm_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleCanData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float VehSpdAvgNDrvn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_vehspdavgndrvn(&has_bits);
          vehspdavgndrvn_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float StrWhAng = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_strwhang(&has_bits);
          strwhang_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float IMUYawRtPri = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_imuyawrtpri(&has_bits);
          imuyawrtpri_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float IMULatACCSec = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_imulataccsec(&has_bits);
          imulataccsec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float IMUYawRtSec = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _Internal::set_has_imuyawrtsec(&has_bits);
          imuyawrtsec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float IMULonAccSec = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _Internal::set_has_imulonaccsec(&has_bits);
          imulonaccsec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float IIMULatAccPrim = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _Internal::set_has_iimulataccprim(&has_bits);
          iimulataccprim_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float IMULonAccPri = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _Internal::set_has_imulonaccpri(&has_bits);
          imulonaccpri_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float WhlAngVelRRrAuth = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _Internal::set_has_whlangvelrrrauth(&has_bits);
          whlangvelrrrauth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float WhlAngVelLRrAuth = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _Internal::set_has_whlangvellrrauth(&has_bits);
          whlangvellrrauth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float WhlAngVelRFrtAuth = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 93)) {
          _Internal::set_has_whlangvelrfrtauth(&has_bits);
          whlangvelrfrtauth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float WhlAngVelLFrtAuth = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 101)) {
          _Internal::set_has_whlangvellfrtauth(&has_bits);
          whlangvellfrtauth_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float WhlDistEdgeCntrLRHigFreq = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 109)) {
          _Internal::set_has_whldistedgecntrlrhigfreq(&has_bits);
          whldistedgecntrlrhigfreq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float WhlDistEdgeCntrRRHigFreq = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 117)) {
          _Internal::set_has_whldistedgecntrrrhigfreq(&has_bits);
          whldistedgecntrrrhigfreq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float WhlDistEdgeCntrRFHigFreq = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 125)) {
          _Internal::set_has_whldistedgecntrrfhigfreq(&has_bits);
          whldistedgecntrrfhigfreq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float WhlDistEdgeCntrLFHigFreq = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 133)) {
          _Internal::set_has_whldistedgecntrlfhigfreq(&has_bits);
          whldistedgecntrlfhigfreq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .can.TrnsShftLvrPos_TCM trnsShftLvrPos_TCM = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_trnsshftlvrpos_tcm(static_cast<::can::TrnsShftLvrPos_TCM>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VehicleCanData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:can.VehicleCanData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional float VehSpdAvgNDrvn = 1;
  if (_internal_has_vehspdavgndrvn()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_vehspdavgndrvn(), target);
  }

  // optional float StrWhAng = 2;
  if (_internal_has_strwhang()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_strwhang(), target);
  }

  // optional float IMUYawRtPri = 3;
  if (_internal_has_imuyawrtpri()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_imuyawrtpri(), target);
  }

  // optional float IMULatACCSec = 4;
  if (_internal_has_imulataccsec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_imulataccsec(), target);
  }

  // optional float IMUYawRtSec = 5;
  if (_internal_has_imuyawrtsec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_imuyawrtsec(), target);
  }

  // optional float IMULonAccSec = 6;
  if (_internal_has_imulonaccsec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_imulonaccsec(), target);
  }

  // optional float IIMULatAccPrim = 7;
  if (_internal_has_iimulataccprim()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_iimulataccprim(), target);
  }

  // optional float IMULonAccPri = 8;
  if (_internal_has_imulonaccpri()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_imulonaccpri(), target);
  }

  // optional float WhlAngVelRRrAuth = 9;
  if (_internal_has_whlangvelrrrauth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_whlangvelrrrauth(), target);
  }

  // optional float WhlAngVelLRrAuth = 10;
  if (_internal_has_whlangvellrrauth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_whlangvellrrauth(), target);
  }

  // optional float WhlAngVelRFrtAuth = 11;
  if (_internal_has_whlangvelrfrtauth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_whlangvelrfrtauth(), target);
  }

  // optional float WhlAngVelLFrtAuth = 12;
  if (_internal_has_whlangvellfrtauth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_whlangvellfrtauth(), target);
  }

  // optional float WhlDistEdgeCntrLRHigFreq = 13;
  if (_internal_has_whldistedgecntrlrhigfreq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_whldistedgecntrlrhigfreq(), target);
  }

  // optional float WhlDistEdgeCntrRRHigFreq = 14;
  if (_internal_has_whldistedgecntrrrhigfreq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_whldistedgecntrrrhigfreq(), target);
  }

  // optional float WhlDistEdgeCntrRFHigFreq = 15;
  if (_internal_has_whldistedgecntrrfhigfreq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_whldistedgecntrrfhigfreq(), target);
  }

  // optional float WhlDistEdgeCntrLFHigFreq = 16;
  if (_internal_has_whldistedgecntrlfhigfreq()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_whldistedgecntrlfhigfreq(), target);
  }

  // optional .can.TrnsShftLvrPos_TCM trnsShftLvrPos_TCM = 17;
  if (_internal_has_trnsshftlvrpos_tcm()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      17, this->_internal_trnsshftlvrpos_tcm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:can.VehicleCanData)
  return target;
}

size_t VehicleCanData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:can.VehicleCanData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional float VehSpdAvgNDrvn = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float StrWhAng = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float IMUYawRtPri = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float IMULatACCSec = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float IMUYawRtSec = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float IMULonAccSec = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float IIMULatAccPrim = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional float IMULonAccPri = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional float WhlAngVelRRrAuth = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float WhlAngVelLRrAuth = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float WhlAngVelRFrtAuth = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float WhlAngVelLFrtAuth = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float WhlDistEdgeCntrLRHigFreq = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float WhlDistEdgeCntrRRHigFreq = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float WhlDistEdgeCntrRFHigFreq = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional float WhlDistEdgeCntrLFHigFreq = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  // optional .can.TrnsShftLvrPos_TCM trnsShftLvrPos_TCM = 17;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_trnsshftlvrpos_tcm());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VehicleCanData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VehicleCanData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VehicleCanData::GetClassData() const { return &_class_data_; }

void VehicleCanData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VehicleCanData *>(to)->MergeFrom(
      static_cast<const VehicleCanData &>(from));
}


void VehicleCanData::MergeFrom(const VehicleCanData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:can.VehicleCanData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      vehspdavgndrvn_ = from.vehspdavgndrvn_;
    }
    if (cached_has_bits & 0x00000002u) {
      strwhang_ = from.strwhang_;
    }
    if (cached_has_bits & 0x00000004u) {
      imuyawrtpri_ = from.imuyawrtpri_;
    }
    if (cached_has_bits & 0x00000008u) {
      imulataccsec_ = from.imulataccsec_;
    }
    if (cached_has_bits & 0x00000010u) {
      imuyawrtsec_ = from.imuyawrtsec_;
    }
    if (cached_has_bits & 0x00000020u) {
      imulonaccsec_ = from.imulonaccsec_;
    }
    if (cached_has_bits & 0x00000040u) {
      iimulataccprim_ = from.iimulataccprim_;
    }
    if (cached_has_bits & 0x00000080u) {
      imulonaccpri_ = from.imulonaccpri_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      whlangvelrrrauth_ = from.whlangvelrrrauth_;
    }
    if (cached_has_bits & 0x00000200u) {
      whlangvellrrauth_ = from.whlangvellrrauth_;
    }
    if (cached_has_bits & 0x00000400u) {
      whlangvelrfrtauth_ = from.whlangvelrfrtauth_;
    }
    if (cached_has_bits & 0x00000800u) {
      whlangvellfrtauth_ = from.whlangvellfrtauth_;
    }
    if (cached_has_bits & 0x00001000u) {
      whldistedgecntrlrhigfreq_ = from.whldistedgecntrlrhigfreq_;
    }
    if (cached_has_bits & 0x00002000u) {
      whldistedgecntrrrhigfreq_ = from.whldistedgecntrrrhigfreq_;
    }
    if (cached_has_bits & 0x00004000u) {
      whldistedgecntrrfhigfreq_ = from.whldistedgecntrrfhigfreq_;
    }
    if (cached_has_bits & 0x00008000u) {
      whldistedgecntrlfhigfreq_ = from.whldistedgecntrlfhigfreq_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_trnsshftlvrpos_tcm(from._internal_trnsshftlvrpos_tcm());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VehicleCanData::CopyFrom(const VehicleCanData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:can.VehicleCanData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleCanData::IsInitialized() const {
  return true;
}

void VehicleCanData::InternalSwap(VehicleCanData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VehicleCanData, trnsshftlvrpos_tcm_)
      + sizeof(VehicleCanData::trnsshftlvrpos_tcm_)
      - PROTOBUF_FIELD_OFFSET(VehicleCanData, vehspdavgndrvn_)>(
          reinterpret_cast<char*>(&vehspdavgndrvn_),
          reinterpret_cast<char*>(&other->vehspdavgndrvn_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleCanData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_fanya_5fcan_2eproto_getter, &descriptor_table_fanya_5fcan_2eproto_once,
      file_level_metadata_fanya_5fcan_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace can
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::can::VehicleCanData* Arena::CreateMaybeMessage< ::can::VehicleCanData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::can::VehicleCanData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
