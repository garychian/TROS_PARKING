// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fanya_can.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_fanya_5fcan_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_fanya_5fcan_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_fanya_5fcan_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_fanya_5fcan_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fanya_5fcan_2eproto;
namespace can {
class VehicleCanData;
struct VehicleCanDataDefaultTypeInternal;
extern VehicleCanDataDefaultTypeInternal _VehicleCanData_default_instance_;
}  // namespace can
PROTOBUF_NAMESPACE_OPEN
template<> ::can::VehicleCanData* Arena::CreateMaybeMessage<::can::VehicleCanData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace can {

enum TrnsShftLvrPos_TCM : int {
  Betweenranges = 0,
  Parkrange = 1,
  Reverserange = 2,
  Neutralrange = 3,
  Forwardrangea = 4,
  Forwardrangeb = 5,
  Forwardrangec = 6,
  Forwardranged = 7,
  Forwardrangee = 8,
  Forwardrangef = 9,
  Forwardrangeg = 10,
  Forwardrangeh = 11,
  Forwardrangei = 12,
  Forwardrangej = 13,
  Reserved = 14,
  Leverpositionunknown = 15,
  TrnsShftLvrPos_TCM_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TrnsShftLvrPos_TCM_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TrnsShftLvrPos_TCM_IsValid(int value);
constexpr TrnsShftLvrPos_TCM TrnsShftLvrPos_TCM_MIN = Betweenranges;
constexpr TrnsShftLvrPos_TCM TrnsShftLvrPos_TCM_MAX = Leverpositionunknown;
constexpr int TrnsShftLvrPos_TCM_ARRAYSIZE = TrnsShftLvrPos_TCM_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrnsShftLvrPos_TCM_descriptor();
template<typename T>
inline const std::string& TrnsShftLvrPos_TCM_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TrnsShftLvrPos_TCM>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TrnsShftLvrPos_TCM_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TrnsShftLvrPos_TCM_descriptor(), enum_t_value);
}
inline bool TrnsShftLvrPos_TCM_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TrnsShftLvrPos_TCM* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TrnsShftLvrPos_TCM>(
    TrnsShftLvrPos_TCM_descriptor(), name, value);
}
// ===================================================================

class VehicleCanData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:can.VehicleCanData) */ {
 public:
  inline VehicleCanData() : VehicleCanData(nullptr) {}
  ~VehicleCanData() override;
  explicit constexpr VehicleCanData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VehicleCanData(const VehicleCanData& from);
  VehicleCanData(VehicleCanData&& from) noexcept
    : VehicleCanData() {
    *this = ::std::move(from);
  }

  inline VehicleCanData& operator=(const VehicleCanData& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleCanData& operator=(VehicleCanData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VehicleCanData& default_instance() {
    return *internal_default_instance();
  }
  static inline const VehicleCanData* internal_default_instance() {
    return reinterpret_cast<const VehicleCanData*>(
               &_VehicleCanData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VehicleCanData& a, VehicleCanData& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleCanData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehicleCanData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VehicleCanData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VehicleCanData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VehicleCanData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const VehicleCanData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleCanData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "can.VehicleCanData";
  }
  protected:
  explicit VehicleCanData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVehSpdAvgNDrvnFieldNumber = 1,
    kStrWhAngFieldNumber = 2,
    kIMUYawRtPriFieldNumber = 3,
    kIMULatACCSecFieldNumber = 4,
    kIMUYawRtSecFieldNumber = 5,
    kIMULonAccSecFieldNumber = 6,
    kIIMULatAccPrimFieldNumber = 7,
    kIMULonAccPriFieldNumber = 8,
    kWhlAngVelRRrAuthFieldNumber = 9,
    kWhlAngVelLRrAuthFieldNumber = 10,
    kWhlAngVelRFrtAuthFieldNumber = 11,
    kWhlAngVelLFrtAuthFieldNumber = 12,
    kWhlDistEdgeCntrLRHigFreqFieldNumber = 13,
    kWhlDistEdgeCntrRRHigFreqFieldNumber = 14,
    kWhlDistEdgeCntrRFHigFreqFieldNumber = 15,
    kWhlDistEdgeCntrLFHigFreqFieldNumber = 16,
    kTrnsShftLvrPosTCMFieldNumber = 17,
  };
  // optional float VehSpdAvgNDrvn = 1;
  bool has_vehspdavgndrvn() const;
  private:
  bool _internal_has_vehspdavgndrvn() const;
  public:
  void clear_vehspdavgndrvn();
  float vehspdavgndrvn() const;
  void set_vehspdavgndrvn(float value);
  private:
  float _internal_vehspdavgndrvn() const;
  void _internal_set_vehspdavgndrvn(float value);
  public:

  // optional float StrWhAng = 2;
  bool has_strwhang() const;
  private:
  bool _internal_has_strwhang() const;
  public:
  void clear_strwhang();
  float strwhang() const;
  void set_strwhang(float value);
  private:
  float _internal_strwhang() const;
  void _internal_set_strwhang(float value);
  public:

  // optional float IMUYawRtPri = 3;
  bool has_imuyawrtpri() const;
  private:
  bool _internal_has_imuyawrtpri() const;
  public:
  void clear_imuyawrtpri();
  float imuyawrtpri() const;
  void set_imuyawrtpri(float value);
  private:
  float _internal_imuyawrtpri() const;
  void _internal_set_imuyawrtpri(float value);
  public:

  // optional float IMULatACCSec = 4;
  bool has_imulataccsec() const;
  private:
  bool _internal_has_imulataccsec() const;
  public:
  void clear_imulataccsec();
  float imulataccsec() const;
  void set_imulataccsec(float value);
  private:
  float _internal_imulataccsec() const;
  void _internal_set_imulataccsec(float value);
  public:

  // optional float IMUYawRtSec = 5;
  bool has_imuyawrtsec() const;
  private:
  bool _internal_has_imuyawrtsec() const;
  public:
  void clear_imuyawrtsec();
  float imuyawrtsec() const;
  void set_imuyawrtsec(float value);
  private:
  float _internal_imuyawrtsec() const;
  void _internal_set_imuyawrtsec(float value);
  public:

  // optional float IMULonAccSec = 6;
  bool has_imulonaccsec() const;
  private:
  bool _internal_has_imulonaccsec() const;
  public:
  void clear_imulonaccsec();
  float imulonaccsec() const;
  void set_imulonaccsec(float value);
  private:
  float _internal_imulonaccsec() const;
  void _internal_set_imulonaccsec(float value);
  public:

  // optional float IIMULatAccPrim = 7;
  bool has_iimulataccprim() const;
  private:
  bool _internal_has_iimulataccprim() const;
  public:
  void clear_iimulataccprim();
  float iimulataccprim() const;
  void set_iimulataccprim(float value);
  private:
  float _internal_iimulataccprim() const;
  void _internal_set_iimulataccprim(float value);
  public:

  // optional float IMULonAccPri = 8;
  bool has_imulonaccpri() const;
  private:
  bool _internal_has_imulonaccpri() const;
  public:
  void clear_imulonaccpri();
  float imulonaccpri() const;
  void set_imulonaccpri(float value);
  private:
  float _internal_imulonaccpri() const;
  void _internal_set_imulonaccpri(float value);
  public:

  // optional float WhlAngVelRRrAuth = 9;
  bool has_whlangvelrrrauth() const;
  private:
  bool _internal_has_whlangvelrrrauth() const;
  public:
  void clear_whlangvelrrrauth();
  float whlangvelrrrauth() const;
  void set_whlangvelrrrauth(float value);
  private:
  float _internal_whlangvelrrrauth() const;
  void _internal_set_whlangvelrrrauth(float value);
  public:

  // optional float WhlAngVelLRrAuth = 10;
  bool has_whlangvellrrauth() const;
  private:
  bool _internal_has_whlangvellrrauth() const;
  public:
  void clear_whlangvellrrauth();
  float whlangvellrrauth() const;
  void set_whlangvellrrauth(float value);
  private:
  float _internal_whlangvellrrauth() const;
  void _internal_set_whlangvellrrauth(float value);
  public:

  // optional float WhlAngVelRFrtAuth = 11;
  bool has_whlangvelrfrtauth() const;
  private:
  bool _internal_has_whlangvelrfrtauth() const;
  public:
  void clear_whlangvelrfrtauth();
  float whlangvelrfrtauth() const;
  void set_whlangvelrfrtauth(float value);
  private:
  float _internal_whlangvelrfrtauth() const;
  void _internal_set_whlangvelrfrtauth(float value);
  public:

  // optional float WhlAngVelLFrtAuth = 12;
  bool has_whlangvellfrtauth() const;
  private:
  bool _internal_has_whlangvellfrtauth() const;
  public:
  void clear_whlangvellfrtauth();
  float whlangvellfrtauth() const;
  void set_whlangvellfrtauth(float value);
  private:
  float _internal_whlangvellfrtauth() const;
  void _internal_set_whlangvellfrtauth(float value);
  public:

  // optional float WhlDistEdgeCntrLRHigFreq = 13;
  bool has_whldistedgecntrlrhigfreq() const;
  private:
  bool _internal_has_whldistedgecntrlrhigfreq() const;
  public:
  void clear_whldistedgecntrlrhigfreq();
  float whldistedgecntrlrhigfreq() const;
  void set_whldistedgecntrlrhigfreq(float value);
  private:
  float _internal_whldistedgecntrlrhigfreq() const;
  void _internal_set_whldistedgecntrlrhigfreq(float value);
  public:

  // optional float WhlDistEdgeCntrRRHigFreq = 14;
  bool has_whldistedgecntrrrhigfreq() const;
  private:
  bool _internal_has_whldistedgecntrrrhigfreq() const;
  public:
  void clear_whldistedgecntrrrhigfreq();
  float whldistedgecntrrrhigfreq() const;
  void set_whldistedgecntrrrhigfreq(float value);
  private:
  float _internal_whldistedgecntrrrhigfreq() const;
  void _internal_set_whldistedgecntrrrhigfreq(float value);
  public:

  // optional float WhlDistEdgeCntrRFHigFreq = 15;
  bool has_whldistedgecntrrfhigfreq() const;
  private:
  bool _internal_has_whldistedgecntrrfhigfreq() const;
  public:
  void clear_whldistedgecntrrfhigfreq();
  float whldistedgecntrrfhigfreq() const;
  void set_whldistedgecntrrfhigfreq(float value);
  private:
  float _internal_whldistedgecntrrfhigfreq() const;
  void _internal_set_whldistedgecntrrfhigfreq(float value);
  public:

  // optional float WhlDistEdgeCntrLFHigFreq = 16;
  bool has_whldistedgecntrlfhigfreq() const;
  private:
  bool _internal_has_whldistedgecntrlfhigfreq() const;
  public:
  void clear_whldistedgecntrlfhigfreq();
  float whldistedgecntrlfhigfreq() const;
  void set_whldistedgecntrlfhigfreq(float value);
  private:
  float _internal_whldistedgecntrlfhigfreq() const;
  void _internal_set_whldistedgecntrlfhigfreq(float value);
  public:

  // optional .can.TrnsShftLvrPos_TCM trnsShftLvrPos_TCM = 17;
  bool has_trnsshftlvrpos_tcm() const;
  private:
  bool _internal_has_trnsshftlvrpos_tcm() const;
  public:
  void clear_trnsshftlvrpos_tcm();
  ::can::TrnsShftLvrPos_TCM trnsshftlvrpos_tcm() const;
  void set_trnsshftlvrpos_tcm(::can::TrnsShftLvrPos_TCM value);
  private:
  ::can::TrnsShftLvrPos_TCM _internal_trnsshftlvrpos_tcm() const;
  void _internal_set_trnsshftlvrpos_tcm(::can::TrnsShftLvrPos_TCM value);
  public:

  // @@protoc_insertion_point(class_scope:can.VehicleCanData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float vehspdavgndrvn_;
  float strwhang_;
  float imuyawrtpri_;
  float imulataccsec_;
  float imuyawrtsec_;
  float imulonaccsec_;
  float iimulataccprim_;
  float imulonaccpri_;
  float whlangvelrrrauth_;
  float whlangvellrrauth_;
  float whlangvelrfrtauth_;
  float whlangvellfrtauth_;
  float whldistedgecntrlrhigfreq_;
  float whldistedgecntrrrhigfreq_;
  float whldistedgecntrrfhigfreq_;
  float whldistedgecntrlfhigfreq_;
  int trnsshftlvrpos_tcm_;
  friend struct ::TableStruct_fanya_5fcan_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VehicleCanData

// optional float VehSpdAvgNDrvn = 1;
inline bool VehicleCanData::_internal_has_vehspdavgndrvn() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VehicleCanData::has_vehspdavgndrvn() const {
  return _internal_has_vehspdavgndrvn();
}
inline void VehicleCanData::clear_vehspdavgndrvn() {
  vehspdavgndrvn_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float VehicleCanData::_internal_vehspdavgndrvn() const {
  return vehspdavgndrvn_;
}
inline float VehicleCanData::vehspdavgndrvn() const {
  // @@protoc_insertion_point(field_get:can.VehicleCanData.VehSpdAvgNDrvn)
  return _internal_vehspdavgndrvn();
}
inline void VehicleCanData::_internal_set_vehspdavgndrvn(float value) {
  _has_bits_[0] |= 0x00000001u;
  vehspdavgndrvn_ = value;
}
inline void VehicleCanData::set_vehspdavgndrvn(float value) {
  _internal_set_vehspdavgndrvn(value);
  // @@protoc_insertion_point(field_set:can.VehicleCanData.VehSpdAvgNDrvn)
}

// optional float StrWhAng = 2;
inline bool VehicleCanData::_internal_has_strwhang() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VehicleCanData::has_strwhang() const {
  return _internal_has_strwhang();
}
inline void VehicleCanData::clear_strwhang() {
  strwhang_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float VehicleCanData::_internal_strwhang() const {
  return strwhang_;
}
inline float VehicleCanData::strwhang() const {
  // @@protoc_insertion_point(field_get:can.VehicleCanData.StrWhAng)
  return _internal_strwhang();
}
inline void VehicleCanData::_internal_set_strwhang(float value) {
  _has_bits_[0] |= 0x00000002u;
  strwhang_ = value;
}
inline void VehicleCanData::set_strwhang(float value) {
  _internal_set_strwhang(value);
  // @@protoc_insertion_point(field_set:can.VehicleCanData.StrWhAng)
}

// optional float IMUYawRtPri = 3;
inline bool VehicleCanData::_internal_has_imuyawrtpri() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool VehicleCanData::has_imuyawrtpri() const {
  return _internal_has_imuyawrtpri();
}
inline void VehicleCanData::clear_imuyawrtpri() {
  imuyawrtpri_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float VehicleCanData::_internal_imuyawrtpri() const {
  return imuyawrtpri_;
}
inline float VehicleCanData::imuyawrtpri() const {
  // @@protoc_insertion_point(field_get:can.VehicleCanData.IMUYawRtPri)
  return _internal_imuyawrtpri();
}
inline void VehicleCanData::_internal_set_imuyawrtpri(float value) {
  _has_bits_[0] |= 0x00000004u;
  imuyawrtpri_ = value;
}
inline void VehicleCanData::set_imuyawrtpri(float value) {
  _internal_set_imuyawrtpri(value);
  // @@protoc_insertion_point(field_set:can.VehicleCanData.IMUYawRtPri)
}

// optional float IMULatACCSec = 4;
inline bool VehicleCanData::_internal_has_imulataccsec() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool VehicleCanData::has_imulataccsec() const {
  return _internal_has_imulataccsec();
}
inline void VehicleCanData::clear_imulataccsec() {
  imulataccsec_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float VehicleCanData::_internal_imulataccsec() const {
  return imulataccsec_;
}
inline float VehicleCanData::imulataccsec() const {
  // @@protoc_insertion_point(field_get:can.VehicleCanData.IMULatACCSec)
  return _internal_imulataccsec();
}
inline void VehicleCanData::_internal_set_imulataccsec(float value) {
  _has_bits_[0] |= 0x00000008u;
  imulataccsec_ = value;
}
inline void VehicleCanData::set_imulataccsec(float value) {
  _internal_set_imulataccsec(value);
  // @@protoc_insertion_point(field_set:can.VehicleCanData.IMULatACCSec)
}

// optional float IMUYawRtSec = 5;
inline bool VehicleCanData::_internal_has_imuyawrtsec() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool VehicleCanData::has_imuyawrtsec() const {
  return _internal_has_imuyawrtsec();
}
inline void VehicleCanData::clear_imuyawrtsec() {
  imuyawrtsec_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float VehicleCanData::_internal_imuyawrtsec() const {
  return imuyawrtsec_;
}
inline float VehicleCanData::imuyawrtsec() const {
  // @@protoc_insertion_point(field_get:can.VehicleCanData.IMUYawRtSec)
  return _internal_imuyawrtsec();
}
inline void VehicleCanData::_internal_set_imuyawrtsec(float value) {
  _has_bits_[0] |= 0x00000010u;
  imuyawrtsec_ = value;
}
inline void VehicleCanData::set_imuyawrtsec(float value) {
  _internal_set_imuyawrtsec(value);
  // @@protoc_insertion_point(field_set:can.VehicleCanData.IMUYawRtSec)
}

// optional float IMULonAccSec = 6;
inline bool VehicleCanData::_internal_has_imulonaccsec() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool VehicleCanData::has_imulonaccsec() const {
  return _internal_has_imulonaccsec();
}
inline void VehicleCanData::clear_imulonaccsec() {
  imulonaccsec_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float VehicleCanData::_internal_imulonaccsec() const {
  return imulonaccsec_;
}
inline float VehicleCanData::imulonaccsec() const {
  // @@protoc_insertion_point(field_get:can.VehicleCanData.IMULonAccSec)
  return _internal_imulonaccsec();
}
inline void VehicleCanData::_internal_set_imulonaccsec(float value) {
  _has_bits_[0] |= 0x00000020u;
  imulonaccsec_ = value;
}
inline void VehicleCanData::set_imulonaccsec(float value) {
  _internal_set_imulonaccsec(value);
  // @@protoc_insertion_point(field_set:can.VehicleCanData.IMULonAccSec)
}

// optional float IIMULatAccPrim = 7;
inline bool VehicleCanData::_internal_has_iimulataccprim() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool VehicleCanData::has_iimulataccprim() const {
  return _internal_has_iimulataccprim();
}
inline void VehicleCanData::clear_iimulataccprim() {
  iimulataccprim_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float VehicleCanData::_internal_iimulataccprim() const {
  return iimulataccprim_;
}
inline float VehicleCanData::iimulataccprim() const {
  // @@protoc_insertion_point(field_get:can.VehicleCanData.IIMULatAccPrim)
  return _internal_iimulataccprim();
}
inline void VehicleCanData::_internal_set_iimulataccprim(float value) {
  _has_bits_[0] |= 0x00000040u;
  iimulataccprim_ = value;
}
inline void VehicleCanData::set_iimulataccprim(float value) {
  _internal_set_iimulataccprim(value);
  // @@protoc_insertion_point(field_set:can.VehicleCanData.IIMULatAccPrim)
}

// optional float IMULonAccPri = 8;
inline bool VehicleCanData::_internal_has_imulonaccpri() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool VehicleCanData::has_imulonaccpri() const {
  return _internal_has_imulonaccpri();
}
inline void VehicleCanData::clear_imulonaccpri() {
  imulonaccpri_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float VehicleCanData::_internal_imulonaccpri() const {
  return imulonaccpri_;
}
inline float VehicleCanData::imulonaccpri() const {
  // @@protoc_insertion_point(field_get:can.VehicleCanData.IMULonAccPri)
  return _internal_imulonaccpri();
}
inline void VehicleCanData::_internal_set_imulonaccpri(float value) {
  _has_bits_[0] |= 0x00000080u;
  imulonaccpri_ = value;
}
inline void VehicleCanData::set_imulonaccpri(float value) {
  _internal_set_imulonaccpri(value);
  // @@protoc_insertion_point(field_set:can.VehicleCanData.IMULonAccPri)
}

// optional float WhlAngVelRRrAuth = 9;
inline bool VehicleCanData::_internal_has_whlangvelrrrauth() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool VehicleCanData::has_whlangvelrrrauth() const {
  return _internal_has_whlangvelrrrauth();
}
inline void VehicleCanData::clear_whlangvelrrrauth() {
  whlangvelrrrauth_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float VehicleCanData::_internal_whlangvelrrrauth() const {
  return whlangvelrrrauth_;
}
inline float VehicleCanData::whlangvelrrrauth() const {
  // @@protoc_insertion_point(field_get:can.VehicleCanData.WhlAngVelRRrAuth)
  return _internal_whlangvelrrrauth();
}
inline void VehicleCanData::_internal_set_whlangvelrrrauth(float value) {
  _has_bits_[0] |= 0x00000100u;
  whlangvelrrrauth_ = value;
}
inline void VehicleCanData::set_whlangvelrrrauth(float value) {
  _internal_set_whlangvelrrrauth(value);
  // @@protoc_insertion_point(field_set:can.VehicleCanData.WhlAngVelRRrAuth)
}

// optional float WhlAngVelLRrAuth = 10;
inline bool VehicleCanData::_internal_has_whlangvellrrauth() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool VehicleCanData::has_whlangvellrrauth() const {
  return _internal_has_whlangvellrrauth();
}
inline void VehicleCanData::clear_whlangvellrrauth() {
  whlangvellrrauth_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float VehicleCanData::_internal_whlangvellrrauth() const {
  return whlangvellrrauth_;
}
inline float VehicleCanData::whlangvellrrauth() const {
  // @@protoc_insertion_point(field_get:can.VehicleCanData.WhlAngVelLRrAuth)
  return _internal_whlangvellrrauth();
}
inline void VehicleCanData::_internal_set_whlangvellrrauth(float value) {
  _has_bits_[0] |= 0x00000200u;
  whlangvellrrauth_ = value;
}
inline void VehicleCanData::set_whlangvellrrauth(float value) {
  _internal_set_whlangvellrrauth(value);
  // @@protoc_insertion_point(field_set:can.VehicleCanData.WhlAngVelLRrAuth)
}

// optional float WhlAngVelRFrtAuth = 11;
inline bool VehicleCanData::_internal_has_whlangvelrfrtauth() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool VehicleCanData::has_whlangvelrfrtauth() const {
  return _internal_has_whlangvelrfrtauth();
}
inline void VehicleCanData::clear_whlangvelrfrtauth() {
  whlangvelrfrtauth_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float VehicleCanData::_internal_whlangvelrfrtauth() const {
  return whlangvelrfrtauth_;
}
inline float VehicleCanData::whlangvelrfrtauth() const {
  // @@protoc_insertion_point(field_get:can.VehicleCanData.WhlAngVelRFrtAuth)
  return _internal_whlangvelrfrtauth();
}
inline void VehicleCanData::_internal_set_whlangvelrfrtauth(float value) {
  _has_bits_[0] |= 0x00000400u;
  whlangvelrfrtauth_ = value;
}
inline void VehicleCanData::set_whlangvelrfrtauth(float value) {
  _internal_set_whlangvelrfrtauth(value);
  // @@protoc_insertion_point(field_set:can.VehicleCanData.WhlAngVelRFrtAuth)
}

// optional float WhlAngVelLFrtAuth = 12;
inline bool VehicleCanData::_internal_has_whlangvellfrtauth() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool VehicleCanData::has_whlangvellfrtauth() const {
  return _internal_has_whlangvellfrtauth();
}
inline void VehicleCanData::clear_whlangvellfrtauth() {
  whlangvellfrtauth_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float VehicleCanData::_internal_whlangvellfrtauth() const {
  return whlangvellfrtauth_;
}
inline float VehicleCanData::whlangvellfrtauth() const {
  // @@protoc_insertion_point(field_get:can.VehicleCanData.WhlAngVelLFrtAuth)
  return _internal_whlangvellfrtauth();
}
inline void VehicleCanData::_internal_set_whlangvellfrtauth(float value) {
  _has_bits_[0] |= 0x00000800u;
  whlangvellfrtauth_ = value;
}
inline void VehicleCanData::set_whlangvellfrtauth(float value) {
  _internal_set_whlangvellfrtauth(value);
  // @@protoc_insertion_point(field_set:can.VehicleCanData.WhlAngVelLFrtAuth)
}

// optional float WhlDistEdgeCntrLRHigFreq = 13;
inline bool VehicleCanData::_internal_has_whldistedgecntrlrhigfreq() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool VehicleCanData::has_whldistedgecntrlrhigfreq() const {
  return _internal_has_whldistedgecntrlrhigfreq();
}
inline void VehicleCanData::clear_whldistedgecntrlrhigfreq() {
  whldistedgecntrlrhigfreq_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float VehicleCanData::_internal_whldistedgecntrlrhigfreq() const {
  return whldistedgecntrlrhigfreq_;
}
inline float VehicleCanData::whldistedgecntrlrhigfreq() const {
  // @@protoc_insertion_point(field_get:can.VehicleCanData.WhlDistEdgeCntrLRHigFreq)
  return _internal_whldistedgecntrlrhigfreq();
}
inline void VehicleCanData::_internal_set_whldistedgecntrlrhigfreq(float value) {
  _has_bits_[0] |= 0x00001000u;
  whldistedgecntrlrhigfreq_ = value;
}
inline void VehicleCanData::set_whldistedgecntrlrhigfreq(float value) {
  _internal_set_whldistedgecntrlrhigfreq(value);
  // @@protoc_insertion_point(field_set:can.VehicleCanData.WhlDistEdgeCntrLRHigFreq)
}

// optional float WhlDistEdgeCntrRRHigFreq = 14;
inline bool VehicleCanData::_internal_has_whldistedgecntrrrhigfreq() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool VehicleCanData::has_whldistedgecntrrrhigfreq() const {
  return _internal_has_whldistedgecntrrrhigfreq();
}
inline void VehicleCanData::clear_whldistedgecntrrrhigfreq() {
  whldistedgecntrrrhigfreq_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float VehicleCanData::_internal_whldistedgecntrrrhigfreq() const {
  return whldistedgecntrrrhigfreq_;
}
inline float VehicleCanData::whldistedgecntrrrhigfreq() const {
  // @@protoc_insertion_point(field_get:can.VehicleCanData.WhlDistEdgeCntrRRHigFreq)
  return _internal_whldistedgecntrrrhigfreq();
}
inline void VehicleCanData::_internal_set_whldistedgecntrrrhigfreq(float value) {
  _has_bits_[0] |= 0x00002000u;
  whldistedgecntrrrhigfreq_ = value;
}
inline void VehicleCanData::set_whldistedgecntrrrhigfreq(float value) {
  _internal_set_whldistedgecntrrrhigfreq(value);
  // @@protoc_insertion_point(field_set:can.VehicleCanData.WhlDistEdgeCntrRRHigFreq)
}

// optional float WhlDistEdgeCntrRFHigFreq = 15;
inline bool VehicleCanData::_internal_has_whldistedgecntrrfhigfreq() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool VehicleCanData::has_whldistedgecntrrfhigfreq() const {
  return _internal_has_whldistedgecntrrfhigfreq();
}
inline void VehicleCanData::clear_whldistedgecntrrfhigfreq() {
  whldistedgecntrrfhigfreq_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float VehicleCanData::_internal_whldistedgecntrrfhigfreq() const {
  return whldistedgecntrrfhigfreq_;
}
inline float VehicleCanData::whldistedgecntrrfhigfreq() const {
  // @@protoc_insertion_point(field_get:can.VehicleCanData.WhlDistEdgeCntrRFHigFreq)
  return _internal_whldistedgecntrrfhigfreq();
}
inline void VehicleCanData::_internal_set_whldistedgecntrrfhigfreq(float value) {
  _has_bits_[0] |= 0x00004000u;
  whldistedgecntrrfhigfreq_ = value;
}
inline void VehicleCanData::set_whldistedgecntrrfhigfreq(float value) {
  _internal_set_whldistedgecntrrfhigfreq(value);
  // @@protoc_insertion_point(field_set:can.VehicleCanData.WhlDistEdgeCntrRFHigFreq)
}

// optional float WhlDistEdgeCntrLFHigFreq = 16;
inline bool VehicleCanData::_internal_has_whldistedgecntrlfhigfreq() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool VehicleCanData::has_whldistedgecntrlfhigfreq() const {
  return _internal_has_whldistedgecntrlfhigfreq();
}
inline void VehicleCanData::clear_whldistedgecntrlfhigfreq() {
  whldistedgecntrlfhigfreq_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline float VehicleCanData::_internal_whldistedgecntrlfhigfreq() const {
  return whldistedgecntrlfhigfreq_;
}
inline float VehicleCanData::whldistedgecntrlfhigfreq() const {
  // @@protoc_insertion_point(field_get:can.VehicleCanData.WhlDistEdgeCntrLFHigFreq)
  return _internal_whldistedgecntrlfhigfreq();
}
inline void VehicleCanData::_internal_set_whldistedgecntrlfhigfreq(float value) {
  _has_bits_[0] |= 0x00008000u;
  whldistedgecntrlfhigfreq_ = value;
}
inline void VehicleCanData::set_whldistedgecntrlfhigfreq(float value) {
  _internal_set_whldistedgecntrlfhigfreq(value);
  // @@protoc_insertion_point(field_set:can.VehicleCanData.WhlDistEdgeCntrLFHigFreq)
}

// optional .can.TrnsShftLvrPos_TCM trnsShftLvrPos_TCM = 17;
inline bool VehicleCanData::_internal_has_trnsshftlvrpos_tcm() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool VehicleCanData::has_trnsshftlvrpos_tcm() const {
  return _internal_has_trnsshftlvrpos_tcm();
}
inline void VehicleCanData::clear_trnsshftlvrpos_tcm() {
  trnsshftlvrpos_tcm_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::can::TrnsShftLvrPos_TCM VehicleCanData::_internal_trnsshftlvrpos_tcm() const {
  return static_cast< ::can::TrnsShftLvrPos_TCM >(trnsshftlvrpos_tcm_);
}
inline ::can::TrnsShftLvrPos_TCM VehicleCanData::trnsshftlvrpos_tcm() const {
  // @@protoc_insertion_point(field_get:can.VehicleCanData.trnsShftLvrPos_TCM)
  return _internal_trnsshftlvrpos_tcm();
}
inline void VehicleCanData::_internal_set_trnsshftlvrpos_tcm(::can::TrnsShftLvrPos_TCM value) {
  _has_bits_[0] |= 0x00010000u;
  trnsshftlvrpos_tcm_ = value;
}
inline void VehicleCanData::set_trnsshftlvrpos_tcm(::can::TrnsShftLvrPos_TCM value) {
  _internal_set_trnsshftlvrpos_tcm(value);
  // @@protoc_insertion_point(field_set:can.VehicleCanData.trnsShftLvrPos_TCM)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace can

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::can::TrnsShftLvrPos_TCM> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::can::TrnsShftLvrPos_TCM>() {
  return ::can::TrnsShftLvrPos_TCM_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_fanya_5fcan_2eproto
