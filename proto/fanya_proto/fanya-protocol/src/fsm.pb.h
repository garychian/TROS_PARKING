// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fsm.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_fsm_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_fsm_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_fsm_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_fsm_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fsm_2eproto;
namespace fsm {
class Apastatusreq;
struct ApastatusreqDefaultTypeInternal;
extern ApastatusreqDefaultTypeInternal _Apastatusreq_default_instance_;
class FusionSlotInfo;
struct FusionSlotInfoDefaultTypeInternal;
extern FusionSlotInfoDefaultTypeInternal _FusionSlotInfo_default_instance_;
class FusionSlotInfo2Location;
struct FusionSlotInfo2LocationDefaultTypeInternal;
extern FusionSlotInfo2LocationDefaultTypeInternal _FusionSlotInfo2Location_default_instance_;
class SlotPoint;
struct SlotPointDefaultTypeInternal;
extern SlotPointDefaultTypeInternal _SlotPoint_default_instance_;
class Slotlabel;
struct SlotlabelDefaultTypeInternal;
extern SlotlabelDefaultTypeInternal _Slotlabel_default_instance_;
}  // namespace fsm
PROTOBUF_NAMESPACE_OPEN
template<> ::fsm::Apastatusreq* Arena::CreateMaybeMessage<::fsm::Apastatusreq>(Arena*);
template<> ::fsm::FusionSlotInfo* Arena::CreateMaybeMessage<::fsm::FusionSlotInfo>(Arena*);
template<> ::fsm::FusionSlotInfo2Location* Arena::CreateMaybeMessage<::fsm::FusionSlotInfo2Location>(Arena*);
template<> ::fsm::SlotPoint* Arena::CreateMaybeMessage<::fsm::SlotPoint>(Arena*);
template<> ::fsm::Slotlabel* Arena::CreateMaybeMessage<::fsm::Slotlabel>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace fsm {

enum apaStatusReqType : int {
  off = 0,
  standby = 1,
  Search_phase = 2,
  Exit_park = 3,
  enable = 4,
  Guidance = 5,
  Finish = 6,
  error = 7,
  apaStatusReqType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  apaStatusReqType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool apaStatusReqType_IsValid(int value);
constexpr apaStatusReqType apaStatusReqType_MIN = off;
constexpr apaStatusReqType apaStatusReqType_MAX = error;
constexpr int apaStatusReqType_ARRAYSIZE = apaStatusReqType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* apaStatusReqType_descriptor();
template<typename T>
inline const std::string& apaStatusReqType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, apaStatusReqType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function apaStatusReqType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    apaStatusReqType_descriptor(), enum_t_value);
}
inline bool apaStatusReqType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, apaStatusReqType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<apaStatusReqType>(
    apaStatusReqType_descriptor(), name, value);
}
// ===================================================================

class Slotlabel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fsm.Slotlabel) */ {
 public:
  inline Slotlabel() : Slotlabel(nullptr) {}
  ~Slotlabel() override;
  explicit constexpr Slotlabel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Slotlabel(const Slotlabel& from);
  Slotlabel(Slotlabel&& from) noexcept
    : Slotlabel() {
    *this = ::std::move(from);
  }

  inline Slotlabel& operator=(const Slotlabel& from) {
    CopyFrom(from);
    return *this;
  }
  inline Slotlabel& operator=(Slotlabel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Slotlabel& default_instance() {
    return *internal_default_instance();
  }
  static inline const Slotlabel* internal_default_instance() {
    return reinterpret_cast<const Slotlabel*>(
               &_Slotlabel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Slotlabel& a, Slotlabel& b) {
    a.Swap(&b);
  }
  inline void Swap(Slotlabel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Slotlabel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Slotlabel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Slotlabel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Slotlabel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Slotlabel& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Slotlabel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fsm.Slotlabel";
  }
  protected:
  explicit Slotlabel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetSlotLabelFieldNumber = 1,
  };
  // optional int32 targetSlotLabel = 1;
  bool has_targetslotlabel() const;
  private:
  bool _internal_has_targetslotlabel() const;
  public:
  void clear_targetslotlabel();
  int32_t targetslotlabel() const;
  void set_targetslotlabel(int32_t value);
  private:
  int32_t _internal_targetslotlabel() const;
  void _internal_set_targetslotlabel(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:fsm.Slotlabel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t targetslotlabel_;
  friend struct ::TableStruct_fsm_2eproto;
};
// -------------------------------------------------------------------

class Apastatusreq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fsm.Apastatusreq) */ {
 public:
  inline Apastatusreq() : Apastatusreq(nullptr) {}
  ~Apastatusreq() override;
  explicit constexpr Apastatusreq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Apastatusreq(const Apastatusreq& from);
  Apastatusreq(Apastatusreq&& from) noexcept
    : Apastatusreq() {
    *this = ::std::move(from);
  }

  inline Apastatusreq& operator=(const Apastatusreq& from) {
    CopyFrom(from);
    return *this;
  }
  inline Apastatusreq& operator=(Apastatusreq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Apastatusreq& default_instance() {
    return *internal_default_instance();
  }
  static inline const Apastatusreq* internal_default_instance() {
    return reinterpret_cast<const Apastatusreq*>(
               &_Apastatusreq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Apastatusreq& a, Apastatusreq& b) {
    a.Swap(&b);
  }
  inline void Swap(Apastatusreq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Apastatusreq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Apastatusreq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Apastatusreq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Apastatusreq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Apastatusreq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Apastatusreq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fsm.Apastatusreq";
  }
  protected:
  explicit Apastatusreq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApaStatusReqFieldNumber = 1,
  };
  // optional .fsm.apaStatusReqType apaStatusReq = 1;
  bool has_apastatusreq() const;
  private:
  bool _internal_has_apastatusreq() const;
  public:
  void clear_apastatusreq();
  ::fsm::apaStatusReqType apastatusreq() const;
  void set_apastatusreq(::fsm::apaStatusReqType value);
  private:
  ::fsm::apaStatusReqType _internal_apastatusreq() const;
  void _internal_set_apastatusreq(::fsm::apaStatusReqType value);
  public:

  // @@protoc_insertion_point(class_scope:fsm.Apastatusreq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int apastatusreq_;
  friend struct ::TableStruct_fsm_2eproto;
};
// -------------------------------------------------------------------

class FusionSlotInfo2Location final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fsm.FusionSlotInfo2Location) */ {
 public:
  inline FusionSlotInfo2Location() : FusionSlotInfo2Location(nullptr) {}
  ~FusionSlotInfo2Location() override;
  explicit constexpr FusionSlotInfo2Location(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FusionSlotInfo2Location(const FusionSlotInfo2Location& from);
  FusionSlotInfo2Location(FusionSlotInfo2Location&& from) noexcept
    : FusionSlotInfo2Location() {
    *this = ::std::move(from);
  }

  inline FusionSlotInfo2Location& operator=(const FusionSlotInfo2Location& from) {
    CopyFrom(from);
    return *this;
  }
  inline FusionSlotInfo2Location& operator=(FusionSlotInfo2Location&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FusionSlotInfo2Location& default_instance() {
    return *internal_default_instance();
  }
  static inline const FusionSlotInfo2Location* internal_default_instance() {
    return reinterpret_cast<const FusionSlotInfo2Location*>(
               &_FusionSlotInfo2Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FusionSlotInfo2Location& a, FusionSlotInfo2Location& b) {
    a.Swap(&b);
  }
  inline void Swap(FusionSlotInfo2Location* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FusionSlotInfo2Location* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FusionSlotInfo2Location* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FusionSlotInfo2Location>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FusionSlotInfo2Location& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FusionSlotInfo2Location& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FusionSlotInfo2Location* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fsm.FusionSlotInfo2Location";
  }
  protected:
  explicit FusionSlotInfo2Location(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFusionSlotInfosFieldNumber = 2,
    kSlotNumFieldNumber = 1,
  };
  // repeated .fsm.FusionSlotInfo fusionSlotInfos = 2;
  int fusionslotinfos_size() const;
  private:
  int _internal_fusionslotinfos_size() const;
  public:
  void clear_fusionslotinfos();
  ::fsm::FusionSlotInfo* mutable_fusionslotinfos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fsm::FusionSlotInfo >*
      mutable_fusionslotinfos();
  private:
  const ::fsm::FusionSlotInfo& _internal_fusionslotinfos(int index) const;
  ::fsm::FusionSlotInfo* _internal_add_fusionslotinfos();
  public:
  const ::fsm::FusionSlotInfo& fusionslotinfos(int index) const;
  ::fsm::FusionSlotInfo* add_fusionslotinfos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fsm::FusionSlotInfo >&
      fusionslotinfos() const;

  // optional int32 slotNum = 1;
  bool has_slotnum() const;
  private:
  bool _internal_has_slotnum() const;
  public:
  void clear_slotnum();
  int32_t slotnum() const;
  void set_slotnum(int32_t value);
  private:
  int32_t _internal_slotnum() const;
  void _internal_set_slotnum(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:fsm.FusionSlotInfo2Location)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fsm::FusionSlotInfo > fusionslotinfos_;
  int32_t slotnum_;
  friend struct ::TableStruct_fsm_2eproto;
};
// -------------------------------------------------------------------

class FusionSlotInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fsm.FusionSlotInfo) */ {
 public:
  inline FusionSlotInfo() : FusionSlotInfo(nullptr) {}
  ~FusionSlotInfo() override;
  explicit constexpr FusionSlotInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FusionSlotInfo(const FusionSlotInfo& from);
  FusionSlotInfo(FusionSlotInfo&& from) noexcept
    : FusionSlotInfo() {
    *this = ::std::move(from);
  }

  inline FusionSlotInfo& operator=(const FusionSlotInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FusionSlotInfo& operator=(FusionSlotInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FusionSlotInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const FusionSlotInfo* internal_default_instance() {
    return reinterpret_cast<const FusionSlotInfo*>(
               &_FusionSlotInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FusionSlotInfo& a, FusionSlotInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FusionSlotInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FusionSlotInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FusionSlotInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FusionSlotInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FusionSlotInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FusionSlotInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FusionSlotInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fsm.FusionSlotInfo";
  }
  protected:
  explicit FusionSlotInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPtFieldNumber = 1,
    kSlotTypeFieldNumber = 2,
    kFusionSlotTypeFieldNumber = 3,
    kSlotLabelFieldNumber = 4,
    kDisplayLabelFieldNumber = 5,
    kSlotInnerObTypeFieldNumber = 6,
    kSlotStatusTypeFieldNumber = 7,
  };
  // repeated .fsm.SlotPoint pt = 1;
  int pt_size() const;
  private:
  int _internal_pt_size() const;
  public:
  void clear_pt();
  ::fsm::SlotPoint* mutable_pt(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fsm::SlotPoint >*
      mutable_pt();
  private:
  const ::fsm::SlotPoint& _internal_pt(int index) const;
  ::fsm::SlotPoint* _internal_add_pt();
  public:
  const ::fsm::SlotPoint& pt(int index) const;
  ::fsm::SlotPoint* add_pt();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fsm::SlotPoint >&
      pt() const;

  // optional int32 slotType = 2;
  bool has_slottype() const;
  private:
  bool _internal_has_slottype() const;
  public:
  void clear_slottype();
  int32_t slottype() const;
  void set_slottype(int32_t value);
  private:
  int32_t _internal_slottype() const;
  void _internal_set_slottype(int32_t value);
  public:

  // optional int32 fusionSlotType = 3;
  bool has_fusionslottype() const;
  private:
  bool _internal_has_fusionslottype() const;
  public:
  void clear_fusionslottype();
  int32_t fusionslottype() const;
  void set_fusionslottype(int32_t value);
  private:
  int32_t _internal_fusionslottype() const;
  void _internal_set_fusionslottype(int32_t value);
  public:

  // optional int32 slotLabel = 4;
  bool has_slotlabel() const;
  private:
  bool _internal_has_slotlabel() const;
  public:
  void clear_slotlabel();
  int32_t slotlabel() const;
  void set_slotlabel(int32_t value);
  private:
  int32_t _internal_slotlabel() const;
  void _internal_set_slotlabel(int32_t value);
  public:

  // optional int32 displayLabel = 5;
  bool has_displaylabel() const;
  private:
  bool _internal_has_displaylabel() const;
  public:
  void clear_displaylabel();
  int32_t displaylabel() const;
  void set_displaylabel(int32_t value);
  private:
  int32_t _internal_displaylabel() const;
  void _internal_set_displaylabel(int32_t value);
  public:

  // optional int32 slotInnerObType = 6;
  bool has_slotinnerobtype() const;
  private:
  bool _internal_has_slotinnerobtype() const;
  public:
  void clear_slotinnerobtype();
  int32_t slotinnerobtype() const;
  void set_slotinnerobtype(int32_t value);
  private:
  int32_t _internal_slotinnerobtype() const;
  void _internal_set_slotinnerobtype(int32_t value);
  public:

  // optional int32 slotStatusType = 7;
  bool has_slotstatustype() const;
  private:
  bool _internal_has_slotstatustype() const;
  public:
  void clear_slotstatustype();
  int32_t slotstatustype() const;
  void set_slotstatustype(int32_t value);
  private:
  int32_t _internal_slotstatustype() const;
  void _internal_set_slotstatustype(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:fsm.FusionSlotInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fsm::SlotPoint > pt_;
  int32_t slottype_;
  int32_t fusionslottype_;
  int32_t slotlabel_;
  int32_t displaylabel_;
  int32_t slotinnerobtype_;
  int32_t slotstatustype_;
  friend struct ::TableStruct_fsm_2eproto;
};
// -------------------------------------------------------------------

class SlotPoint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fsm.SlotPoint) */ {
 public:
  inline SlotPoint() : SlotPoint(nullptr) {}
  ~SlotPoint() override;
  explicit constexpr SlotPoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SlotPoint(const SlotPoint& from);
  SlotPoint(SlotPoint&& from) noexcept
    : SlotPoint() {
    *this = ::std::move(from);
  }

  inline SlotPoint& operator=(const SlotPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline SlotPoint& operator=(SlotPoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SlotPoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const SlotPoint* internal_default_instance() {
    return reinterpret_cast<const SlotPoint*>(
               &_SlotPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SlotPoint& a, SlotPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(SlotPoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SlotPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SlotPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SlotPoint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SlotPoint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SlotPoint& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SlotPoint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fsm.SlotPoint";
  }
  protected:
  explicit SlotPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // optional int32 x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  int32_t x() const;
  void set_x(int32_t value);
  private:
  int32_t _internal_x() const;
  void _internal_set_x(int32_t value);
  public:

  // optional int32 y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  int32_t y() const;
  void set_y(int32_t value);
  private:
  int32_t _internal_y() const;
  void _internal_set_y(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:fsm.SlotPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t x_;
  int32_t y_;
  friend struct ::TableStruct_fsm_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Slotlabel

// optional int32 targetSlotLabel = 1;
inline bool Slotlabel::_internal_has_targetslotlabel() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Slotlabel::has_targetslotlabel() const {
  return _internal_has_targetslotlabel();
}
inline void Slotlabel::clear_targetslotlabel() {
  targetslotlabel_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t Slotlabel::_internal_targetslotlabel() const {
  return targetslotlabel_;
}
inline int32_t Slotlabel::targetslotlabel() const {
  // @@protoc_insertion_point(field_get:fsm.Slotlabel.targetSlotLabel)
  return _internal_targetslotlabel();
}
inline void Slotlabel::_internal_set_targetslotlabel(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  targetslotlabel_ = value;
}
inline void Slotlabel::set_targetslotlabel(int32_t value) {
  _internal_set_targetslotlabel(value);
  // @@protoc_insertion_point(field_set:fsm.Slotlabel.targetSlotLabel)
}

// -------------------------------------------------------------------

// Apastatusreq

// optional .fsm.apaStatusReqType apaStatusReq = 1;
inline bool Apastatusreq::_internal_has_apastatusreq() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Apastatusreq::has_apastatusreq() const {
  return _internal_has_apastatusreq();
}
inline void Apastatusreq::clear_apastatusreq() {
  apastatusreq_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::fsm::apaStatusReqType Apastatusreq::_internal_apastatusreq() const {
  return static_cast< ::fsm::apaStatusReqType >(apastatusreq_);
}
inline ::fsm::apaStatusReqType Apastatusreq::apastatusreq() const {
  // @@protoc_insertion_point(field_get:fsm.Apastatusreq.apaStatusReq)
  return _internal_apastatusreq();
}
inline void Apastatusreq::_internal_set_apastatusreq(::fsm::apaStatusReqType value) {
  _has_bits_[0] |= 0x00000001u;
  apastatusreq_ = value;
}
inline void Apastatusreq::set_apastatusreq(::fsm::apaStatusReqType value) {
  _internal_set_apastatusreq(value);
  // @@protoc_insertion_point(field_set:fsm.Apastatusreq.apaStatusReq)
}

// -------------------------------------------------------------------

// FusionSlotInfo2Location

// optional int32 slotNum = 1;
inline bool FusionSlotInfo2Location::_internal_has_slotnum() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FusionSlotInfo2Location::has_slotnum() const {
  return _internal_has_slotnum();
}
inline void FusionSlotInfo2Location::clear_slotnum() {
  slotnum_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t FusionSlotInfo2Location::_internal_slotnum() const {
  return slotnum_;
}
inline int32_t FusionSlotInfo2Location::slotnum() const {
  // @@protoc_insertion_point(field_get:fsm.FusionSlotInfo2Location.slotNum)
  return _internal_slotnum();
}
inline void FusionSlotInfo2Location::_internal_set_slotnum(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  slotnum_ = value;
}
inline void FusionSlotInfo2Location::set_slotnum(int32_t value) {
  _internal_set_slotnum(value);
  // @@protoc_insertion_point(field_set:fsm.FusionSlotInfo2Location.slotNum)
}

// repeated .fsm.FusionSlotInfo fusionSlotInfos = 2;
inline int FusionSlotInfo2Location::_internal_fusionslotinfos_size() const {
  return fusionslotinfos_.size();
}
inline int FusionSlotInfo2Location::fusionslotinfos_size() const {
  return _internal_fusionslotinfos_size();
}
inline void FusionSlotInfo2Location::clear_fusionslotinfos() {
  fusionslotinfos_.Clear();
}
inline ::fsm::FusionSlotInfo* FusionSlotInfo2Location::mutable_fusionslotinfos(int index) {
  // @@protoc_insertion_point(field_mutable:fsm.FusionSlotInfo2Location.fusionSlotInfos)
  return fusionslotinfos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fsm::FusionSlotInfo >*
FusionSlotInfo2Location::mutable_fusionslotinfos() {
  // @@protoc_insertion_point(field_mutable_list:fsm.FusionSlotInfo2Location.fusionSlotInfos)
  return &fusionslotinfos_;
}
inline const ::fsm::FusionSlotInfo& FusionSlotInfo2Location::_internal_fusionslotinfos(int index) const {
  return fusionslotinfos_.Get(index);
}
inline const ::fsm::FusionSlotInfo& FusionSlotInfo2Location::fusionslotinfos(int index) const {
  // @@protoc_insertion_point(field_get:fsm.FusionSlotInfo2Location.fusionSlotInfos)
  return _internal_fusionslotinfos(index);
}
inline ::fsm::FusionSlotInfo* FusionSlotInfo2Location::_internal_add_fusionslotinfos() {
  return fusionslotinfos_.Add();
}
inline ::fsm::FusionSlotInfo* FusionSlotInfo2Location::add_fusionslotinfos() {
  ::fsm::FusionSlotInfo* _add = _internal_add_fusionslotinfos();
  // @@protoc_insertion_point(field_add:fsm.FusionSlotInfo2Location.fusionSlotInfos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fsm::FusionSlotInfo >&
FusionSlotInfo2Location::fusionslotinfos() const {
  // @@protoc_insertion_point(field_list:fsm.FusionSlotInfo2Location.fusionSlotInfos)
  return fusionslotinfos_;
}

// -------------------------------------------------------------------

// FusionSlotInfo

// repeated .fsm.SlotPoint pt = 1;
inline int FusionSlotInfo::_internal_pt_size() const {
  return pt_.size();
}
inline int FusionSlotInfo::pt_size() const {
  return _internal_pt_size();
}
inline void FusionSlotInfo::clear_pt() {
  pt_.Clear();
}
inline ::fsm::SlotPoint* FusionSlotInfo::mutable_pt(int index) {
  // @@protoc_insertion_point(field_mutable:fsm.FusionSlotInfo.pt)
  return pt_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fsm::SlotPoint >*
FusionSlotInfo::mutable_pt() {
  // @@protoc_insertion_point(field_mutable_list:fsm.FusionSlotInfo.pt)
  return &pt_;
}
inline const ::fsm::SlotPoint& FusionSlotInfo::_internal_pt(int index) const {
  return pt_.Get(index);
}
inline const ::fsm::SlotPoint& FusionSlotInfo::pt(int index) const {
  // @@protoc_insertion_point(field_get:fsm.FusionSlotInfo.pt)
  return _internal_pt(index);
}
inline ::fsm::SlotPoint* FusionSlotInfo::_internal_add_pt() {
  return pt_.Add();
}
inline ::fsm::SlotPoint* FusionSlotInfo::add_pt() {
  ::fsm::SlotPoint* _add = _internal_add_pt();
  // @@protoc_insertion_point(field_add:fsm.FusionSlotInfo.pt)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fsm::SlotPoint >&
FusionSlotInfo::pt() const {
  // @@protoc_insertion_point(field_list:fsm.FusionSlotInfo.pt)
  return pt_;
}

// optional int32 slotType = 2;
inline bool FusionSlotInfo::_internal_has_slottype() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FusionSlotInfo::has_slottype() const {
  return _internal_has_slottype();
}
inline void FusionSlotInfo::clear_slottype() {
  slottype_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t FusionSlotInfo::_internal_slottype() const {
  return slottype_;
}
inline int32_t FusionSlotInfo::slottype() const {
  // @@protoc_insertion_point(field_get:fsm.FusionSlotInfo.slotType)
  return _internal_slottype();
}
inline void FusionSlotInfo::_internal_set_slottype(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  slottype_ = value;
}
inline void FusionSlotInfo::set_slottype(int32_t value) {
  _internal_set_slottype(value);
  // @@protoc_insertion_point(field_set:fsm.FusionSlotInfo.slotType)
}

// optional int32 fusionSlotType = 3;
inline bool FusionSlotInfo::_internal_has_fusionslottype() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FusionSlotInfo::has_fusionslottype() const {
  return _internal_has_fusionslottype();
}
inline void FusionSlotInfo::clear_fusionslottype() {
  fusionslottype_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t FusionSlotInfo::_internal_fusionslottype() const {
  return fusionslottype_;
}
inline int32_t FusionSlotInfo::fusionslottype() const {
  // @@protoc_insertion_point(field_get:fsm.FusionSlotInfo.fusionSlotType)
  return _internal_fusionslottype();
}
inline void FusionSlotInfo::_internal_set_fusionslottype(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  fusionslottype_ = value;
}
inline void FusionSlotInfo::set_fusionslottype(int32_t value) {
  _internal_set_fusionslottype(value);
  // @@protoc_insertion_point(field_set:fsm.FusionSlotInfo.fusionSlotType)
}

// optional int32 slotLabel = 4;
inline bool FusionSlotInfo::_internal_has_slotlabel() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FusionSlotInfo::has_slotlabel() const {
  return _internal_has_slotlabel();
}
inline void FusionSlotInfo::clear_slotlabel() {
  slotlabel_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t FusionSlotInfo::_internal_slotlabel() const {
  return slotlabel_;
}
inline int32_t FusionSlotInfo::slotlabel() const {
  // @@protoc_insertion_point(field_get:fsm.FusionSlotInfo.slotLabel)
  return _internal_slotlabel();
}
inline void FusionSlotInfo::_internal_set_slotlabel(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  slotlabel_ = value;
}
inline void FusionSlotInfo::set_slotlabel(int32_t value) {
  _internal_set_slotlabel(value);
  // @@protoc_insertion_point(field_set:fsm.FusionSlotInfo.slotLabel)
}

// optional int32 displayLabel = 5;
inline bool FusionSlotInfo::_internal_has_displaylabel() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FusionSlotInfo::has_displaylabel() const {
  return _internal_has_displaylabel();
}
inline void FusionSlotInfo::clear_displaylabel() {
  displaylabel_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t FusionSlotInfo::_internal_displaylabel() const {
  return displaylabel_;
}
inline int32_t FusionSlotInfo::displaylabel() const {
  // @@protoc_insertion_point(field_get:fsm.FusionSlotInfo.displayLabel)
  return _internal_displaylabel();
}
inline void FusionSlotInfo::_internal_set_displaylabel(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  displaylabel_ = value;
}
inline void FusionSlotInfo::set_displaylabel(int32_t value) {
  _internal_set_displaylabel(value);
  // @@protoc_insertion_point(field_set:fsm.FusionSlotInfo.displayLabel)
}

// optional int32 slotInnerObType = 6;
inline bool FusionSlotInfo::_internal_has_slotinnerobtype() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FusionSlotInfo::has_slotinnerobtype() const {
  return _internal_has_slotinnerobtype();
}
inline void FusionSlotInfo::clear_slotinnerobtype() {
  slotinnerobtype_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t FusionSlotInfo::_internal_slotinnerobtype() const {
  return slotinnerobtype_;
}
inline int32_t FusionSlotInfo::slotinnerobtype() const {
  // @@protoc_insertion_point(field_get:fsm.FusionSlotInfo.slotInnerObType)
  return _internal_slotinnerobtype();
}
inline void FusionSlotInfo::_internal_set_slotinnerobtype(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  slotinnerobtype_ = value;
}
inline void FusionSlotInfo::set_slotinnerobtype(int32_t value) {
  _internal_set_slotinnerobtype(value);
  // @@protoc_insertion_point(field_set:fsm.FusionSlotInfo.slotInnerObType)
}

// optional int32 slotStatusType = 7;
inline bool FusionSlotInfo::_internal_has_slotstatustype() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FusionSlotInfo::has_slotstatustype() const {
  return _internal_has_slotstatustype();
}
inline void FusionSlotInfo::clear_slotstatustype() {
  slotstatustype_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t FusionSlotInfo::_internal_slotstatustype() const {
  return slotstatustype_;
}
inline int32_t FusionSlotInfo::slotstatustype() const {
  // @@protoc_insertion_point(field_get:fsm.FusionSlotInfo.slotStatusType)
  return _internal_slotstatustype();
}
inline void FusionSlotInfo::_internal_set_slotstatustype(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  slotstatustype_ = value;
}
inline void FusionSlotInfo::set_slotstatustype(int32_t value) {
  _internal_set_slotstatustype(value);
  // @@protoc_insertion_point(field_set:fsm.FusionSlotInfo.slotStatusType)
}

// -------------------------------------------------------------------

// SlotPoint

// optional int32 x = 1;
inline bool SlotPoint::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SlotPoint::has_x() const {
  return _internal_has_x();
}
inline void SlotPoint::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t SlotPoint::_internal_x() const {
  return x_;
}
inline int32_t SlotPoint::x() const {
  // @@protoc_insertion_point(field_get:fsm.SlotPoint.x)
  return _internal_x();
}
inline void SlotPoint::_internal_set_x(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void SlotPoint::set_x(int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:fsm.SlotPoint.x)
}

// optional int32 y = 2;
inline bool SlotPoint::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SlotPoint::has_y() const {
  return _internal_has_y();
}
inline void SlotPoint::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t SlotPoint::_internal_y() const {
  return y_;
}
inline int32_t SlotPoint::y() const {
  // @@protoc_insertion_point(field_get:fsm.SlotPoint.y)
  return _internal_y();
}
inline void SlotPoint::_internal_set_y(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void SlotPoint::set_y(int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:fsm.SlotPoint.y)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fsm

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::fsm::apaStatusReqType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fsm::apaStatusReqType>() {
  return ::fsm::apaStatusReqType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_fsm_2eproto
