// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fsm.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_fsm_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_fsm_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_fsm_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_fsm_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fsm_2eproto;
namespace fsm {
class Apastatusreq;
struct ApastatusreqDefaultTypeInternal;
extern ApastatusreqDefaultTypeInternal _Apastatusreq_default_instance_;
class Slotlabel;
struct SlotlabelDefaultTypeInternal;
extern SlotlabelDefaultTypeInternal _Slotlabel_default_instance_;
}  // namespace fsm
PROTOBUF_NAMESPACE_OPEN
template<> ::fsm::Apastatusreq* Arena::CreateMaybeMessage<::fsm::Apastatusreq>(Arena*);
template<> ::fsm::Slotlabel* Arena::CreateMaybeMessage<::fsm::Slotlabel>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace fsm {

enum apaStatusReqType : int {
  off = 0,
  standby = 1,
  Search_phase = 2,
  Exit_park = 3,
  enable = 4,
  Guidance = 5,
  Finish = 6,
  error = 7,
  apaStatusReqType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  apaStatusReqType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool apaStatusReqType_IsValid(int value);
constexpr apaStatusReqType apaStatusReqType_MIN = off;
constexpr apaStatusReqType apaStatusReqType_MAX = error;
constexpr int apaStatusReqType_ARRAYSIZE = apaStatusReqType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* apaStatusReqType_descriptor();
template<typename T>
inline const std::string& apaStatusReqType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, apaStatusReqType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function apaStatusReqType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    apaStatusReqType_descriptor(), enum_t_value);
}
inline bool apaStatusReqType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, apaStatusReqType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<apaStatusReqType>(
    apaStatusReqType_descriptor(), name, value);
}
// ===================================================================

class Slotlabel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fsm.Slotlabel) */ {
 public:
  inline Slotlabel() : Slotlabel(nullptr) {}
  ~Slotlabel() override;
  explicit constexpr Slotlabel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Slotlabel(const Slotlabel& from);
  Slotlabel(Slotlabel&& from) noexcept
    : Slotlabel() {
    *this = ::std::move(from);
  }

  inline Slotlabel& operator=(const Slotlabel& from) {
    CopyFrom(from);
    return *this;
  }
  inline Slotlabel& operator=(Slotlabel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Slotlabel& default_instance() {
    return *internal_default_instance();
  }
  static inline const Slotlabel* internal_default_instance() {
    return reinterpret_cast<const Slotlabel*>(
               &_Slotlabel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Slotlabel& a, Slotlabel& b) {
    a.Swap(&b);
  }
  inline void Swap(Slotlabel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Slotlabel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Slotlabel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Slotlabel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Slotlabel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Slotlabel& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Slotlabel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fsm.Slotlabel";
  }
  protected:
  explicit Slotlabel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetSlotLabelFieldNumber = 1,
  };
  // optional int32 targetSlotLabel = 1;
  bool has_targetslotlabel() const;
  private:
  bool _internal_has_targetslotlabel() const;
  public:
  void clear_targetslotlabel();
  int32_t targetslotlabel() const;
  void set_targetslotlabel(int32_t value);
  private:
  int32_t _internal_targetslotlabel() const;
  void _internal_set_targetslotlabel(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:fsm.Slotlabel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t targetslotlabel_;
  friend struct ::TableStruct_fsm_2eproto;
};
// -------------------------------------------------------------------

class Apastatusreq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fsm.Apastatusreq) */ {
 public:
  inline Apastatusreq() : Apastatusreq(nullptr) {}
  ~Apastatusreq() override;
  explicit constexpr Apastatusreq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Apastatusreq(const Apastatusreq& from);
  Apastatusreq(Apastatusreq&& from) noexcept
    : Apastatusreq() {
    *this = ::std::move(from);
  }

  inline Apastatusreq& operator=(const Apastatusreq& from) {
    CopyFrom(from);
    return *this;
  }
  inline Apastatusreq& operator=(Apastatusreq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Apastatusreq& default_instance() {
    return *internal_default_instance();
  }
  static inline const Apastatusreq* internal_default_instance() {
    return reinterpret_cast<const Apastatusreq*>(
               &_Apastatusreq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Apastatusreq& a, Apastatusreq& b) {
    a.Swap(&b);
  }
  inline void Swap(Apastatusreq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Apastatusreq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Apastatusreq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Apastatusreq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Apastatusreq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Apastatusreq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Apastatusreq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fsm.Apastatusreq";
  }
  protected:
  explicit Apastatusreq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApaStatusReqFieldNumber = 1,
  };
  // optional .fsm.apaStatusReqType apaStatusReq = 1;
  bool has_apastatusreq() const;
  private:
  bool _internal_has_apastatusreq() const;
  public:
  void clear_apastatusreq();
  ::fsm::apaStatusReqType apastatusreq() const;
  void set_apastatusreq(::fsm::apaStatusReqType value);
  private:
  ::fsm::apaStatusReqType _internal_apastatusreq() const;
  void _internal_set_apastatusreq(::fsm::apaStatusReqType value);
  public:

  // @@protoc_insertion_point(class_scope:fsm.Apastatusreq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int apastatusreq_;
  friend struct ::TableStruct_fsm_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Slotlabel

// optional int32 targetSlotLabel = 1;
inline bool Slotlabel::_internal_has_targetslotlabel() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Slotlabel::has_targetslotlabel() const {
  return _internal_has_targetslotlabel();
}
inline void Slotlabel::clear_targetslotlabel() {
  targetslotlabel_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t Slotlabel::_internal_targetslotlabel() const {
  return targetslotlabel_;
}
inline int32_t Slotlabel::targetslotlabel() const {
  // @@protoc_insertion_point(field_get:fsm.Slotlabel.targetSlotLabel)
  return _internal_targetslotlabel();
}
inline void Slotlabel::_internal_set_targetslotlabel(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  targetslotlabel_ = value;
}
inline void Slotlabel::set_targetslotlabel(int32_t value) {
  _internal_set_targetslotlabel(value);
  // @@protoc_insertion_point(field_set:fsm.Slotlabel.targetSlotLabel)
}

// -------------------------------------------------------------------

// Apastatusreq

// optional .fsm.apaStatusReqType apaStatusReq = 1;
inline bool Apastatusreq::_internal_has_apastatusreq() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Apastatusreq::has_apastatusreq() const {
  return _internal_has_apastatusreq();
}
inline void Apastatusreq::clear_apastatusreq() {
  apastatusreq_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::fsm::apaStatusReqType Apastatusreq::_internal_apastatusreq() const {
  return static_cast< ::fsm::apaStatusReqType >(apastatusreq_);
}
inline ::fsm::apaStatusReqType Apastatusreq::apastatusreq() const {
  // @@protoc_insertion_point(field_get:fsm.Apastatusreq.apaStatusReq)
  return _internal_apastatusreq();
}
inline void Apastatusreq::_internal_set_apastatusreq(::fsm::apaStatusReqType value) {
  _has_bits_[0] |= 0x00000001u;
  apastatusreq_ = value;
}
inline void Apastatusreq::set_apastatusreq(::fsm::apaStatusReqType value) {
  _internal_set_apastatusreq(value);
  // @@protoc_insertion_point(field_set:fsm.Apastatusreq.apaStatusReq)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fsm

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::fsm::apaStatusReqType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fsm::apaStatusReqType>() {
  return ::fsm::apaStatusReqType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_fsm_2eproto
