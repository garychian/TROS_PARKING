// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: can.proto

#include "can.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace can {
constexpr VehicleCanData::VehicleCanData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vehiclespeed_(0)
  , gearstatus_(0)
  , wheeldirection_(0)
  , wheelangle_(0)
  , yawratedirection_(0)
  , yawrate_(0)
  , lateralacce_(0)
  , longitacce_(0)
  , flwheelspeedinkph_(0)
  , frwheelspeedinkph_(0)
  , rlwheelspeedinkph_(0)
  , rrwheelspeedinkph_(0)
  , flwheelspeedpulse_(0)
  , frwheelspeedpulse_(0)
  , rlwheelspeedpulse_(0)
  , rrwheelspeedpulse_(0){}
struct VehicleCanDataDefaultTypeInternal {
  constexpr VehicleCanDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VehicleCanDataDefaultTypeInternal() {}
  union {
    VehicleCanData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VehicleCanDataDefaultTypeInternal _VehicleCanData_default_instance_;
}  // namespace can
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_can_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_can_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_can_2eproto = nullptr;

const uint32_t TableStruct_can_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::can::VehicleCanData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::can::VehicleCanData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::can::VehicleCanData, vehiclespeed_),
  PROTOBUF_FIELD_OFFSET(::can::VehicleCanData, gearstatus_),
  PROTOBUF_FIELD_OFFSET(::can::VehicleCanData, wheeldirection_),
  PROTOBUF_FIELD_OFFSET(::can::VehicleCanData, wheelangle_),
  PROTOBUF_FIELD_OFFSET(::can::VehicleCanData, yawratedirection_),
  PROTOBUF_FIELD_OFFSET(::can::VehicleCanData, yawrate_),
  PROTOBUF_FIELD_OFFSET(::can::VehicleCanData, lateralacce_),
  PROTOBUF_FIELD_OFFSET(::can::VehicleCanData, longitacce_),
  PROTOBUF_FIELD_OFFSET(::can::VehicleCanData, flwheelspeedinkph_),
  PROTOBUF_FIELD_OFFSET(::can::VehicleCanData, frwheelspeedinkph_),
  PROTOBUF_FIELD_OFFSET(::can::VehicleCanData, rlwheelspeedinkph_),
  PROTOBUF_FIELD_OFFSET(::can::VehicleCanData, rrwheelspeedinkph_),
  PROTOBUF_FIELD_OFFSET(::can::VehicleCanData, flwheelspeedpulse_),
  PROTOBUF_FIELD_OFFSET(::can::VehicleCanData, frwheelspeedpulse_),
  PROTOBUF_FIELD_OFFSET(::can::VehicleCanData, rlwheelspeedpulse_),
  PROTOBUF_FIELD_OFFSET(::can::VehicleCanData, rrwheelspeedpulse_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 22, -1, sizeof(::can::VehicleCanData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::can::_VehicleCanData_default_instance_),
};

const char descriptor_table_protodef_can_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tcan.proto\022\003can\"\224\006\n\016VehicleCanData\022\031\n\014V"
  "ehicleSpeed\030\001 \001(\002H\000\210\001\001\022\027\n\nGearStatus\030\002 \001"
  "(\005H\001\210\001\001\022\033\n\016WheelDirection\030\003 \001(\005H\002\210\001\001\022\027\n\n"
  "WheelAngle\030\004 \001(\005H\003\210\001\001\022\035\n\020YawRateDirectio"
  "n\030\005 \001(\005H\004\210\001\001\022\024\n\007YawRate\030\006 \001(\005H\005\210\001\001\022\030\n\013La"
  "teralAcce\030\007 \001(\005H\006\210\001\001\022\027\n\nLongitAcce\030\010 \001(\005"
  "H\007\210\001\001\022\036\n\021FLWheelSpeedInkph\030\t \001(\005H\010\210\001\001\022\036\n"
  "\021FRwheelSpeedInkph\030\n \001(\005H\t\210\001\001\022\036\n\021RLwheel"
  "SpeedInkph\030\013 \001(\005H\n\210\001\001\022\036\n\021RRwheelSpeedInk"
  "ph\030\014 \001(\005H\013\210\001\001\022\036\n\021FLWheelSpeedPulse\030\r \001(\005"
  "H\014\210\001\001\022\036\n\021FRwheelSpeedPulse\030\016 \001(\005H\r\210\001\001\022\036\n"
  "\021RLwheelSpeedPulse\030\017 \001(\005H\016\210\001\001\022\036\n\021RRwheel"
  "SpeedPulse\030\020 \001(\005H\017\210\001\001B\017\n\r_VehicleSpeedB\r"
  "\n\013_GearStatusB\021\n\017_WheelDirectionB\r\n\013_Whe"
  "elAngleB\023\n\021_YawRateDirectionB\n\n\010_YawRate"
  "B\016\n\014_LateralAcceB\r\n\013_LongitAcceB\024\n\022_FLWh"
  "eelSpeedInkphB\024\n\022_FRwheelSpeedInkphB\024\n\022_"
  "RLwheelSpeedInkphB\024\n\022_RRwheelSpeedInkphB"
  "\024\n\022_FLWheelSpeedPulseB\024\n\022_FRwheelSpeedPu"
  "lseB\024\n\022_RLwheelSpeedPulseB\024\n\022_RRwheelSpe"
  "edPulseb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_can_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_can_2eproto = {
  false, false, 815, descriptor_table_protodef_can_2eproto, "can.proto", 
  &descriptor_table_can_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_can_2eproto::offsets,
  file_level_metadata_can_2eproto, file_level_enum_descriptors_can_2eproto, file_level_service_descriptors_can_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_can_2eproto_getter() {
  return &descriptor_table_can_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_can_2eproto(&descriptor_table_can_2eproto);
namespace can {

// ===================================================================

class VehicleCanData::_Internal {
 public:
  using HasBits = decltype(std::declval<VehicleCanData>()._has_bits_);
  static void set_has_vehiclespeed(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_gearstatus(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_wheeldirection(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_wheelangle(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_yawratedirection(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_yawrate(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_lateralacce(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_longitacce(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_flwheelspeedinkph(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_frwheelspeedinkph(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_rlwheelspeedinkph(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_rrwheelspeedinkph(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_flwheelspeedpulse(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_frwheelspeedpulse(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_rlwheelspeedpulse(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_rrwheelspeedpulse(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

VehicleCanData::VehicleCanData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:can.VehicleCanData)
}
VehicleCanData::VehicleCanData(const VehicleCanData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&vehiclespeed_, &from.vehiclespeed_,
    static_cast<size_t>(reinterpret_cast<char*>(&rrwheelspeedpulse_) -
    reinterpret_cast<char*>(&vehiclespeed_)) + sizeof(rrwheelspeedpulse_));
  // @@protoc_insertion_point(copy_constructor:can.VehicleCanData)
}

inline void VehicleCanData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&vehiclespeed_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rrwheelspeedpulse_) -
    reinterpret_cast<char*>(&vehiclespeed_)) + sizeof(rrwheelspeedpulse_));
}

VehicleCanData::~VehicleCanData() {
  // @@protoc_insertion_point(destructor:can.VehicleCanData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void VehicleCanData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VehicleCanData::ArenaDtor(void* object) {
  VehicleCanData* _this = reinterpret_cast< VehicleCanData* >(object);
  (void)_this;
}
void VehicleCanData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VehicleCanData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VehicleCanData::Clear() {
// @@protoc_insertion_point(message_clear_start:can.VehicleCanData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&vehiclespeed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&longitacce_) -
        reinterpret_cast<char*>(&vehiclespeed_)) + sizeof(longitacce_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&flwheelspeedinkph_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rrwheelspeedpulse_) -
        reinterpret_cast<char*>(&flwheelspeedinkph_)) + sizeof(rrwheelspeedpulse_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleCanData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional float VehicleSpeed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_vehiclespeed(&has_bits);
          vehiclespeed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional int32 GearStatus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_gearstatus(&has_bits);
          gearstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 WheelDirection = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_wheeldirection(&has_bits);
          wheeldirection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 WheelAngle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_wheelangle(&has_bits);
          wheelangle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 YawRateDirection = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_yawratedirection(&has_bits);
          yawratedirection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 YawRate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_yawrate(&has_bits);
          yawrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 LateralAcce = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_lateralacce(&has_bits);
          lateralacce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 LongitAcce = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_longitacce(&has_bits);
          longitacce_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 FLWheelSpeedInkph = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_flwheelspeedinkph(&has_bits);
          flwheelspeedinkph_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 FRwheelSpeedInkph = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_frwheelspeedinkph(&has_bits);
          frwheelspeedinkph_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 RLwheelSpeedInkph = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_rlwheelspeedinkph(&has_bits);
          rlwheelspeedinkph_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 RRwheelSpeedInkph = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_rrwheelspeedinkph(&has_bits);
          rrwheelspeedinkph_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 FLWheelSpeedPulse = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_flwheelspeedpulse(&has_bits);
          flwheelspeedpulse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 FRwheelSpeedPulse = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_frwheelspeedpulse(&has_bits);
          frwheelspeedpulse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 RLwheelSpeedPulse = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_rlwheelspeedpulse(&has_bits);
          rlwheelspeedpulse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 RRwheelSpeedPulse = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_rrwheelspeedpulse(&has_bits);
          rrwheelspeedpulse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VehicleCanData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:can.VehicleCanData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional float VehicleSpeed = 1;
  if (_internal_has_vehiclespeed()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_vehiclespeed(), target);
  }

  // optional int32 GearStatus = 2;
  if (_internal_has_gearstatus()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_gearstatus(), target);
  }

  // optional int32 WheelDirection = 3;
  if (_internal_has_wheeldirection()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_wheeldirection(), target);
  }

  // optional int32 WheelAngle = 4;
  if (_internal_has_wheelangle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_wheelangle(), target);
  }

  // optional int32 YawRateDirection = 5;
  if (_internal_has_yawratedirection()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_yawratedirection(), target);
  }

  // optional int32 YawRate = 6;
  if (_internal_has_yawrate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_yawrate(), target);
  }

  // optional int32 LateralAcce = 7;
  if (_internal_has_lateralacce()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_lateralacce(), target);
  }

  // optional int32 LongitAcce = 8;
  if (_internal_has_longitacce()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_longitacce(), target);
  }

  // optional int32 FLWheelSpeedInkph = 9;
  if (_internal_has_flwheelspeedinkph()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_flwheelspeedinkph(), target);
  }

  // optional int32 FRwheelSpeedInkph = 10;
  if (_internal_has_frwheelspeedinkph()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_frwheelspeedinkph(), target);
  }

  // optional int32 RLwheelSpeedInkph = 11;
  if (_internal_has_rlwheelspeedinkph()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_rlwheelspeedinkph(), target);
  }

  // optional int32 RRwheelSpeedInkph = 12;
  if (_internal_has_rrwheelspeedinkph()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_rrwheelspeedinkph(), target);
  }

  // optional int32 FLWheelSpeedPulse = 13;
  if (_internal_has_flwheelspeedpulse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_flwheelspeedpulse(), target);
  }

  // optional int32 FRwheelSpeedPulse = 14;
  if (_internal_has_frwheelspeedpulse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_frwheelspeedpulse(), target);
  }

  // optional int32 RLwheelSpeedPulse = 15;
  if (_internal_has_rlwheelspeedpulse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_rlwheelspeedpulse(), target);
  }

  // optional int32 RRwheelSpeedPulse = 16;
  if (_internal_has_rrwheelspeedpulse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_rrwheelspeedpulse(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:can.VehicleCanData)
  return target;
}

size_t VehicleCanData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:can.VehicleCanData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional float VehicleSpeed = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional int32 GearStatus = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_gearstatus());
    }

    // optional int32 WheelDirection = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_wheeldirection());
    }

    // optional int32 WheelAngle = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_wheelangle());
    }

    // optional int32 YawRateDirection = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_yawratedirection());
    }

    // optional int32 YawRate = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_yawrate());
    }

    // optional int32 LateralAcce = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_lateralacce());
    }

    // optional int32 LongitAcce = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_longitacce());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 FLWheelSpeedInkph = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_flwheelspeedinkph());
    }

    // optional int32 FRwheelSpeedInkph = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_frwheelspeedinkph());
    }

    // optional int32 RLwheelSpeedInkph = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_rlwheelspeedinkph());
    }

    // optional int32 RRwheelSpeedInkph = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_rrwheelspeedinkph());
    }

    // optional int32 FLWheelSpeedPulse = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_flwheelspeedpulse());
    }

    // optional int32 FRwheelSpeedPulse = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_frwheelspeedpulse());
    }

    // optional int32 RLwheelSpeedPulse = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_rlwheelspeedpulse());
    }

    // optional int32 RRwheelSpeedPulse = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_rrwheelspeedpulse());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VehicleCanData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    VehicleCanData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VehicleCanData::GetClassData() const { return &_class_data_; }

void VehicleCanData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<VehicleCanData *>(to)->MergeFrom(
      static_cast<const VehicleCanData &>(from));
}


void VehicleCanData::MergeFrom(const VehicleCanData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:can.VehicleCanData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      vehiclespeed_ = from.vehiclespeed_;
    }
    if (cached_has_bits & 0x00000002u) {
      gearstatus_ = from.gearstatus_;
    }
    if (cached_has_bits & 0x00000004u) {
      wheeldirection_ = from.wheeldirection_;
    }
    if (cached_has_bits & 0x00000008u) {
      wheelangle_ = from.wheelangle_;
    }
    if (cached_has_bits & 0x00000010u) {
      yawratedirection_ = from.yawratedirection_;
    }
    if (cached_has_bits & 0x00000020u) {
      yawrate_ = from.yawrate_;
    }
    if (cached_has_bits & 0x00000040u) {
      lateralacce_ = from.lateralacce_;
    }
    if (cached_has_bits & 0x00000080u) {
      longitacce_ = from.longitacce_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      flwheelspeedinkph_ = from.flwheelspeedinkph_;
    }
    if (cached_has_bits & 0x00000200u) {
      frwheelspeedinkph_ = from.frwheelspeedinkph_;
    }
    if (cached_has_bits & 0x00000400u) {
      rlwheelspeedinkph_ = from.rlwheelspeedinkph_;
    }
    if (cached_has_bits & 0x00000800u) {
      rrwheelspeedinkph_ = from.rrwheelspeedinkph_;
    }
    if (cached_has_bits & 0x00001000u) {
      flwheelspeedpulse_ = from.flwheelspeedpulse_;
    }
    if (cached_has_bits & 0x00002000u) {
      frwheelspeedpulse_ = from.frwheelspeedpulse_;
    }
    if (cached_has_bits & 0x00004000u) {
      rlwheelspeedpulse_ = from.rlwheelspeedpulse_;
    }
    if (cached_has_bits & 0x00008000u) {
      rrwheelspeedpulse_ = from.rrwheelspeedpulse_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VehicleCanData::CopyFrom(const VehicleCanData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:can.VehicleCanData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleCanData::IsInitialized() const {
  return true;
}

void VehicleCanData::InternalSwap(VehicleCanData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VehicleCanData, rrwheelspeedpulse_)
      + sizeof(VehicleCanData::rrwheelspeedpulse_)
      - PROTOBUF_FIELD_OFFSET(VehicleCanData, vehiclespeed_)>(
          reinterpret_cast<char*>(&vehiclespeed_),
          reinterpret_cast<char*>(&other->vehiclespeed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleCanData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_can_2eproto_getter, &descriptor_table_can_2eproto_once,
      file_level_metadata_can_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace can
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::can::VehicleCanData* Arena::CreateMaybeMessage< ::can::VehicleCanData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::can::VehicleCanData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
