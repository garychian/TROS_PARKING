// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: simple_image.proto

#include "simple_image.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace simple_proto {
constexpr SimpleImage::SimpleImage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : image_desc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , height_(0)
  , width_(0)
  , channel_(0){}
struct SimpleImageDefaultTypeInternal {
  constexpr SimpleImageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SimpleImageDefaultTypeInternal() {}
  union {
    SimpleImage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SimpleImageDefaultTypeInternal _SimpleImage_default_instance_;
}  // namespace simple_proto
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_simple_5fimage_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_simple_5fimage_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_simple_5fimage_2eproto = nullptr;

const uint32_t TableStruct_simple_5fimage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::simple_proto::SimpleImage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::simple_proto::SimpleImage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::simple_proto::SimpleImage, height_),
  PROTOBUF_FIELD_OFFSET(::simple_proto::SimpleImage, width_),
  PROTOBUF_FIELD_OFFSET(::simple_proto::SimpleImage, channel_),
  PROTOBUF_FIELD_OFFSET(::simple_proto::SimpleImage, image_desc_),
  1,
  2,
  3,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::simple_proto::SimpleImage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::simple_proto::_SimpleImage_default_instance_),
};

const char descriptor_table_protodef_simple_5fimage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022simple_image.proto\022\014simple_proto\"Q\n\013Si"
  "mpleImage\022\016\n\006height\030\001 \001(\005\022\r\n\005width\030\002 \001(\005"
  "\022\017\n\007channel\030\003 \001(\005\022\022\n\nimage_desc\030\004 \001(\t"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_simple_5fimage_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_simple_5fimage_2eproto = {
  false, false, 117, descriptor_table_protodef_simple_5fimage_2eproto, "simple_image.proto", 
  &descriptor_table_simple_5fimage_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_simple_5fimage_2eproto::offsets,
  file_level_metadata_simple_5fimage_2eproto, file_level_enum_descriptors_simple_5fimage_2eproto, file_level_service_descriptors_simple_5fimage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_simple_5fimage_2eproto_getter() {
  return &descriptor_table_simple_5fimage_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_simple_5fimage_2eproto(&descriptor_table_simple_5fimage_2eproto);
namespace simple_proto {

// ===================================================================

class SimpleImage::_Internal {
 public:
  using HasBits = decltype(std::declval<SimpleImage>()._has_bits_);
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_channel(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_image_desc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SimpleImage::SimpleImage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:simple_proto.SimpleImage)
}
SimpleImage::SimpleImage(const SimpleImage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  image_desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    image_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_image_desc()) {
    image_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_image_desc(), 
      GetArenaForAllocation());
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_) -
    reinterpret_cast<char*>(&height_)) + sizeof(channel_));
  // @@protoc_insertion_point(copy_constructor:simple_proto.SimpleImage)
}

inline void SimpleImage::SharedCtor() {
image_desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  image_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&height_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&channel_) -
    reinterpret_cast<char*>(&height_)) + sizeof(channel_));
}

SimpleImage::~SimpleImage() {
  // @@protoc_insertion_point(destructor:simple_proto.SimpleImage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SimpleImage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  image_desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SimpleImage::ArenaDtor(void* object) {
  SimpleImage* _this = reinterpret_cast< SimpleImage* >(object);
  (void)_this;
}
void SimpleImage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SimpleImage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SimpleImage::Clear() {
// @@protoc_insertion_point(message_clear_start:simple_proto.SimpleImage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    image_desc_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&channel_) -
        reinterpret_cast<char*>(&height_)) + sizeof(channel_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SimpleImage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 channel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_channel(&has_bits);
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string image_desc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_image_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "simple_proto.SimpleImage.image_desc");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SimpleImage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:simple_proto.SimpleImage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 height = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_height(), target);
  }

  // optional int32 width = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_width(), target);
  }

  // optional int32 channel = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_channel(), target);
  }

  // optional string image_desc = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_image_desc().data(), static_cast<int>(this->_internal_image_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "simple_proto.SimpleImage.image_desc");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_image_desc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:simple_proto.SimpleImage)
  return target;
}

size_t SimpleImage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:simple_proto.SimpleImage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string image_desc = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_image_desc());
    }

    // optional int32 height = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_height());
    }

    // optional int32 width = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_width());
    }

    // optional int32 channel = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_channel());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SimpleImage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SimpleImage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SimpleImage::GetClassData() const { return &_class_data_; }

void SimpleImage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SimpleImage *>(to)->MergeFrom(
      static_cast<const SimpleImage &>(from));
}


void SimpleImage::MergeFrom(const SimpleImage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:simple_proto.SimpleImage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_image_desc(from._internal_image_desc());
    }
    if (cached_has_bits & 0x00000002u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000004u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000008u) {
      channel_ = from.channel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SimpleImage::CopyFrom(const SimpleImage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:simple_proto.SimpleImage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleImage::IsInitialized() const {
  return true;
}

void SimpleImage::InternalSwap(SimpleImage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &image_desc_, lhs_arena,
      &other->image_desc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SimpleImage, channel_)
      + sizeof(SimpleImage::channel_)
      - PROTOBUF_FIELD_OFFSET(SimpleImage, height_)>(
          reinterpret_cast<char*>(&height_),
          reinterpret_cast<char*>(&other->height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SimpleImage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_simple_5fimage_2eproto_getter, &descriptor_table_simple_5fimage_2eproto_once,
      file_level_metadata_simple_5fimage_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace simple_proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::simple_proto::SimpleImage* Arena::CreateMaybeMessage< ::simple_proto::SimpleImage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::simple_proto::SimpleImage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
